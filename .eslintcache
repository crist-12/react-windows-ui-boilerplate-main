[{"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\index.js":"1","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\App.js":"2","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\MasterPage.js":"3","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\login\\index.js":"4","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\bitacora\\index.js":"5","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\equipos\\index.js":"6","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\home\\index.js":"7","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\perfil\\index.js":"8","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\categorias\\index.js":"9","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\asignar\\index.js":"10","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\empleados\\index.js":"11","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\sucursales\\index.js":"12","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\configuraciones\\index.js":"13","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\areas\\index.js":"14","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\grupos\\index.js":"15","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\ciudades\\index.js":"16","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\campos\\index.js":"17","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\Navigation.js":"18","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\stores\\MasterStore.js":"19","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\stores\\AuthStore.js":"20","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\hooks\\useInput.js":"21","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\RightMenu.js":"22","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\MaterialTable.js":"23","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\computadoras\\index.js":"24","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\shared\\arrayToPivot.js":"25","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\Modal.js":"26","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\historial\\index.js":"27","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\mantenimientos\\index.js":"28","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\hooks\\useIsAuth.js":"29"},{"size":367,"mtime":1646084382725,"results":"30","hashOfConfig":"31"},{"size":2687,"mtime":1647294532211,"results":"32","hashOfConfig":"31"},{"size":664,"mtime":1646084382729,"results":"33","hashOfConfig":"31"},{"size":4331,"mtime":1647642241166,"results":"34","hashOfConfig":"31"},{"size":3652,"mtime":1647621981910,"results":"35","hashOfConfig":"31"},{"size":24265,"mtime":1647639825646,"results":"36","hashOfConfig":"31"},{"size":5910,"mtime":1647640625777,"results":"37","hashOfConfig":"31"},{"size":8939,"mtime":1647642805094,"results":"38","hashOfConfig":"31"},{"size":38694,"mtime":1647632170725,"results":"39","hashOfConfig":"31"},{"size":36107,"mtime":1647636733315,"results":"40","hashOfConfig":"31"},{"size":24555,"mtime":1647637795368,"results":"41","hashOfConfig":"31"},{"size":11652,"mtime":1647643034891,"results":"42","hashOfConfig":"31"},{"size":5290,"mtime":1647636453564,"results":"43","hashOfConfig":"31"},{"size":10720,"mtime":1647620603056,"results":"44","hashOfConfig":"31"},{"size":9312,"mtime":1647640367334,"results":"45","hashOfConfig":"31"},{"size":10639,"mtime":1647632845155,"results":"46","hashOfConfig":"31"},{"size":28867,"mtime":1647624260620,"results":"47","hashOfConfig":"31"},{"size":3595,"mtime":1647374363425,"results":"48","hashOfConfig":"31"},{"size":786,"mtime":1647373389693,"results":"49","hashOfConfig":"31"},{"size":2182,"mtime":1647295788070,"results":"50","hashOfConfig":"31"},{"size":1220,"mtime":1646084382730,"results":"51","hashOfConfig":"31"},{"size":1118,"mtime":1647458861176,"results":"52","hashOfConfig":"31"},{"size":2540,"mtime":1646250752955,"results":"53","hashOfConfig":"54"},{"size":45569,"mtime":1647634309357,"results":"55","hashOfConfig":"31"},{"size":1066,"mtime":1646667298109,"results":"56","hashOfConfig":"31"},{"size":125,"mtime":1646761528848,"results":"57","hashOfConfig":"31"},{"size":9516,"mtime":1647640522403,"results":"58","hashOfConfig":"31"},{"size":5705,"mtime":1647642528023,"results":"59","hashOfConfig":"31"},{"size":169,"mtime":1647294252282,"results":"60","hashOfConfig":"31"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1lw6dx1",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"63"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"63"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"63"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"63"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"63"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"63"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"63"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"63"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"63"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"63"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"63"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"63"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"63"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"63"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"1bvg7s2",{"filePath":"125","messages":"126","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"63"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"63"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"63"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"63"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\index.js",[],["141","142"],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\App.js",[],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\MasterPage.js",["143","144","145"],"import { NavPageContainer,Link } from 'react-windows-ui'\r\nimport React, { useState, useEffect } from 'react'\r\nimport NavigationWindow from '../components/Navigation'\r\nimport { useMasterState } from '../stores/MasterStore'\r\n\r\nconst MasterPage = () => {\r\n\r\n    const masterState = useMasterState();\r\n\r\n    return (\r\n      <>\r\n        <NavigationWindow/>\r\n            <NavPageContainer\r\n            hasPadding={true}\r\n            animateTransition={true}>\r\n            <h1>{masterState.get().name}</h1>\r\n            <p>{masterState.get().name}</p>\r\n            <div className=\"app-hr\"></div>\r\n        </NavPageContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MasterPage","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\login\\index.js",["146","147","148","149","150","151"],"/**\r\n * @file Componente - Login\r\n * @author Christopher Ortiz\r\n * @namespace Login\r\n * @description Pantalla que gestiona el inicio de sesión\r\n * @version 1.0.0\r\n */\r\nimport React, {Image, useState, useEffect} from 'react'\r\nimport login from \"../../assets/login.jpg\"\r\nimport { AvatarView, InputText, Button, SplashScreen } from 'react-windows-ui'\r\nimport user from \"../../assets/user.png\"\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useAuthState, loginUser } from '../../stores/AuthStore'\r\nimport { Alert } from 'react-windows-ui'\r\n\r\nconst Login = () => {\r\n\r\n    const [splash, setSplash] = useState(true);\r\n    const history = useHistory();\r\n    const authState = useAuthState();\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [message, setMessage] = useState(\"Algo salió mal, inténtalo de nuevo\")\r\n\r\n    const [validate, setValidate] = useState(false);\r\n\r\n    useEffect(() => {\r\n     setSplash(false);\r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n\r\n    }, [])\r\n\r\n/**\r\n * Gestiona la autenticación del usuario\r\n * @function handleLogin\r\n * @memberof Login\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n    const handleLogin = async() => {\r\n        if(username == \"\"){\r\n           setValidate(true)\r\n           setMessage(\"El nombre de usuario no puede estar vacío\")\r\n           return\r\n        }\r\n        if(password == \"\"){\r\n            setValidate(true)\r\n            setMessage(\"La contraseña no puede estar vacía\")\r\n            return\r\n        }\r\n\r\n       await loginUser(username, password);\r\n       if(authState.get().isLoggedIn){\r\n            //await postLoginLog(\" ingresó al sistema\");\r\n            history.push(\"/home\")\r\n            setValidate(false)\r\n            return\r\n       }else{\r\n            setValidate(true)\r\n            setMessage(authState.me.get().message)\r\n            return\r\n       }\r\n        \r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <>\r\n        \r\n        <SplashScreen\r\n            //duration={1000} // adjust how long it takes after render \r\n            isVisible={splash}\r\n            title={\"Kassa\"}\r\n            />\r\n        <div id=\"login-screen\" style={{backgroundImage:`url(${login})`, height: '100vh', backgroundPosition: 'center', backgroundRepeat: 'no-repeat', backgroundSize: 'cover', flex:1, display: 'flex', flexDirection: 'column'}}>\r\n            <div style={{display: 'flex', flex: 1, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n            {\r\n\r\n            \r\n            <Alert\r\n                isVisible={validate}\r\n                title=\"Atención\"\r\n                message={message}\r\n                onBackdropPress={()=>{setValidate(false)}}>\r\n                <button onClick={()=>{setValidate(false)}}>OK</button>\r\n            </Alert>\r\n        }\r\n            <AvatarView\r\n                src={user}\r\n                isLoading={false}\r\n                size=\"medium\"\r\n                showDropShadow={false}\r\n                />\r\n            </div>\r\n            <div style={{flex:2, display:'flex', alignItems: 'flex-start', justifyContent:'center', flex:2}}>\r\n            <div style={{display:'block', textAlign: 'center'}}>\r\n            <h2 style={{color: 'white'}}>Iniciar Sesión</h2>\r\n            <input\r\n                className='app-input-text'\r\n                placeholder=\"Nombre de Usuario\"\r\n                tooltip=\"Ingrese nombre de usuario\"\r\n                value={username}\r\n                id=\"input-username\"\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n            <input\r\n                type=\"password\"\r\n                className='app-input-text'\r\n                placeholder=\"Ingrese su contraseña\"\r\n                value={password}\r\n                id=\"input-password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                /> \r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n            <button\r\n                className='app-button animate'\r\n                onClick={handleLogin}\r\n                id=\"button-login\"\r\n                tooltip=\"Iniciar Sesión\"\r\n                >Iniciar Sesión</button>\r\n            </div>\r\n            \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\bitacora\\index.js",["152"],"/**\r\n * @file Componente - Bitácpra\r\n * @author Christopher Ortiz\r\n * @namespace Bitácora\r\n * @description Componente que contiene la bitácora de los movimientos realizados en el sistema.\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer,Link } from 'react-windows-ui'\r\nimport React, { useState, useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\n\r\nconst Bitacora = () => {\r\n/**\r\n * setLogs Obtiene los registros de la bitácora\r\n * @function setLogs\r\n * @memberof Bitácora\r\n * @return logs {Object}\r\n * @inner\r\n */\r\nconst [logs, setLogs] = useState()\r\n\r\nuseEffect(() => {\r\n  getBitacoraRecords();\r\n}, [])\r\n\r\n/**\r\n * searchTableAll Maneja la búsqueda en la tabla, función que se encarga de filtrar los datos de la tabla\r\n * @name searchTableAll\r\n * @function\r\n * @memberof Bitácora\r\n * @inner\r\n * @return {void}\r\n*/\r\nconst searchTableAll = () => {\r\n  var searchBox = document.getElementById('search-input-table');\r\n  var table = document.getElementById(\"table-products\");\r\n  var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n  var filter = searchBox.value.toUpperCase();\r\n  for (var rowI = 0; rowI < trs.length; rowI++) {\r\n    var tds = trs[rowI].getElementsByTagName(\"td\");\r\n    trs[rowI].style.display = \"none\";\r\n    for (var cellI = 0; cellI < tds.length; cellI++) {\r\n      if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n        trs[rowI].style.display = \"\";\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * getBitacoraRecords Obtiene los datos de la bitacóra \r\n * @name getBitacoraRecords\r\n * @function\r\n * @memberof Bitácora\r\n * @async\r\n * @inner\r\n * @return {void}\r\n*/\r\nconst getBitacoraRecords = async() => {\r\n  const response = await fetch(process.env.REACT_APP_HOME + \"bitacora\", {\r\n    method: 'GET',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n  const data = await response.json()\r\n  setLogs(data)\r\n}\r\n    return (\r\n      <>\r\n        <NavigationWindow/>\r\n            <NavPageContainer\r\n            hasPadding={true}\r\n            animateTransition={true}>\r\n\r\n            <h1>Bitacora</h1>\r\n            <p>Analiza los últimos movimientos realizados en el sistema.</p>\r\n            <div style={{ display: \"flex\", flex: 1, marginRight: \"30px\", flexDirection: \"column\" }}>\r\n                <div style={{ marginTop: \"15px\", display: \"flex\", flex: 1 }}>\r\n                  <div style={{ flex: 1 }}>\r\n                    <label>Buscar</label>\r\n                    <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                  </div>\r\n                </div>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Acción</th>\r\n                      <th>Módulo</th>\r\n                      <th>Fecha</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      logs ?\r\n                        logs.map((ele, index) => {\r\n                          return (\r\n                            <tr>\r\n                              <td>{ele.Accion}</td>\r\n                              <td>{ele.Modulo}</td>\r\n                              <td>{ele.FechaF}</td>\r\n                            </tr>\r\n                          )\r\n                        }) : <></>\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n        </NavPageContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Bitacora","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\equipos\\index.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"/**\r\n * @file Componente - Asignación\r\n * @author Christopher Ortiz\r\n * @namespace Equipos\r\n * @description Los equipos deben ser asignados a los empleados, esta pantalla es la encargada de realizar las asignaciones a cada uno de ellos.\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, InputText, RadioButton, Button, NavPageContainerRight, LinkCompound } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport Select from 'react-select'\r\nimport useState from 'react-usestateref'\r\nimport { useMasterState } from '../../stores/MasterStore'\r\nimport { useAuthState } from '../../stores/AuthStore'\r\nimport \"../equipos/index.css\"\r\nimport getPivotArray from '../../../shared/arrayToPivot'\r\nimport { triggerBase64Download } from 'react-base64-downloader'\r\nimport Modal from '../../components/Modal';\r\n\r\n\r\nconst Equipos = () => {\r\n\r\n  const [entities, setEntities] = React.useState([])\r\n  const [loading, setLoading] = React.useState(true)\r\n  const [controls, setControls] = React.useState([])\r\n  const [selected, setSelected] = React.useState(null)\r\n  const [options, setOptions] = React.useState([[]])\r\n  const [respuesta, setRespuesta, respuestaRef] = useState([])\r\n  const [entityCode, setEntityCode, entityCodeRef] = useState()\r\n  const [mode, setMode] = React.useState('R')\r\n  const [tableEquipo, setTableEquipo, tableEquipoRef] = useState([])\r\n  const [lastKey, setLastKey, lastKeyRef] = useState()\r\n  const [headers, setHeaders, headersRef] = useState([])\r\n  const [rows, setRows, rowsRef] = useState([])\r\n  const [modalImg, setModalImg] = useState(false)\r\n  const [currentImage, setCurrentImage, currentImageRef] = useState()\r\n  // const [dataList, setDataList] = React.useState([])\r\n\r\n  const masterState = useMasterState();\r\n  const authState = useAuthState();\r\n\r\n\r\n\r\n  const columnas = [\r\n    {\r\n      title: 'Equipo',\r\n      field: 'equipo'\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getAllCategories()\r\n    setLoading(false)\r\n  }, [])\r\n\r\n/**\r\n * Obtiene todas las entidades para cargarlas en el select\r\n * @function getAllCategories\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getAllCategories = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          value: ele.IdCategoria,\r\n          label: ele.DescripcionCategoria\r\n        }\r\n        arre.push(obj)\r\n        // console.log(obj)\r\n      })\r\n      setEntities(arre)\r\n      // setLoading(false)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * Obtiene las cabeceras para establecer en la tabla\r\n * @function getHeaders\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getHeaders = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/headers/\" + entityCodeRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          categoria: ele.IdCategoria,\r\n          caracteristica: ele.IdCaracteristica,\r\n          descripcion: ele.CaracteristicaDescripcion\r\n        }\r\n        arre.push(obj)\r\n        // console.log(obj)\r\n      })\r\n      //console.log(\"RESPUESTA HEADERS\")\r\n      //console.log(result)\r\n      setHeaders(arre)\r\n      //console.log(headersRef.current)\r\n      // setLoading(false)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * Cuando seleccionamos la entidad, obtenemos los campos de la misma\r\n * @function getEntityEntries\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getEntityEntries = async (id) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/filter/\" + id, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      var resp = [...respuesta]\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          id: ele.IdCaracteristica,\r\n          key: ele.IdCategoria,\r\n          name: ele.CaracteristicaDescripcion,\r\n          required: ele.Requerido,\r\n          placeholder: ele.Placeholder,\r\n          tooltip: ele.Tooltip,\r\n          type: ele.DescripcionTipo\r\n        }\r\n        arre.push(obj)\r\n        var keyObj = \"CTRL-\" + obj.id\r\n        setEntityCode(obj.key)\r\n        resp[keyObj] = \"\"\r\n        //setRespuesta([...respuesta, resp])\r\n        // console.log(resp)\r\n      })\r\n      setRespuesta(resp)\r\n      // console.log(resp)\r\n      setControls(arre)\r\n      getOptions(id)\r\n      // setLoading(false)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * Obtiene las opciones para los campos de la entidad\r\n * @function getOptions\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getOptions = async (id) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/options/\" + id, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          value: ele.IdOpcion,\r\n          label: ele.OpcionDescripcion,\r\n          key: ele.IdCaracteristica\r\n        }\r\n        arre.push(obj)\r\n        //console.log(obj)\r\n      })\r\n      setOptions(arre)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Manejo el cambio de la entidad \r\n * @function handleListChange\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleListChange = async (e) => {\r\n    //setLoading(true)\r\n    //setSelected(e.value)\r\n    /*if (mode == 'R')\r\n      await getEntityEntries(e.value)\r\n    else if (mode == 'L') {\r\n      setLoading(true)\r\n      await getAllEntriesTable(e.value)\r\n      setLoading(false)\r\n    }*/\r\n    await getEntityEntries(e.value)\r\n    await getAllEntriesTable(e.value)\r\n    await getHeaders();\r\n    await getRows();\r\n    //setLoading(false)\r\n  }\r\n\r\n/**\r\n * Obtiene las entradas de la entidad seleccionada\r\n * @function getAllEntriesTable\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getAllEntriesTable = async (id) => {\r\n    //setLoading(true)\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/equipos\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          equipo: ele.Equipo\r\n        }\r\n        arre.push(obj)\r\n        //console.log(obj)\r\n      })\r\n      setTableEquipo(arre)\r\n      //setLoading(false)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n /**\r\n * Muestra el control indicado de acuerdo al tipo de control especificado en la base de datos\r\n * @function showControls\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const showControls = (item) => {\r\n    try {\r\n      if (item?.type != undefined) {\r\n        var req = item.required.data[0];\r\n        // console.log(req)\r\n        if (req == 1) req = true; else req = false;\r\n        //console.log(req)\r\n        switch (item.type) {\r\n          case \"text\": case \"number\": case \"date\":\r\n            return (\r\n              <div style={{ margin: \"15px 0px\" }}>\r\n                <label>{item.name} {req ? <label style={{ color: masterState.get().color }}>*</label> : <></>}</label>\r\n                <div style={{ margin: \"10px 0\" }}>\r\n                  <input\r\n                    className='app-input-text'\r\n                    placeholder={item.placeholder}\r\n                    tooltip={item.tooltip}\r\n                    type={item.type}\r\n                    required={req}\r\n                    onChange={handleChangeControlValue}\r\n                    //onChange={change}\r\n                    step={0.01}\r\n                    id={item.id} />\r\n                </div>\r\n              </div>\r\n            )\r\n          case \"textarea\":\r\n            return (\r\n              <div style={{ margin: \"15px 0px\" }}>\r\n                <label>{item.name} {req ? <label style={{ color: masterState.get().color }}>*</label> : <></>}</label>\r\n                <div style={{ margin: \"10px 0\" }}>\r\n                  <textarea\r\n                    className='app-textarea'\r\n                    style={{ resize: 'none', width: '350px', height: '150px' }}\r\n                    placeholder={item.placeholder}\r\n                    tooltip={item.tooltip}\r\n                    id={item.id}\r\n                    onChange={handleChangeControlValue}\r\n                    required={req} />\r\n                </div>\r\n              </div>\r\n            )\r\n          case 'file':\r\n            return (\r\n              <div style={{ margin: \"15px 0px\" }}>\r\n                {/* \r\n                <br />\r\n                <div style={{ marginTop: \"15px\" }}>\r\n                  <label htmlFor={\"filePicker\"+item.id} style={{ background: \"lightgray\", padding: \"5px 10px\" }}>\r\n                    {item.placeholder ?? \"Escoge un archivo\"}\r\n                  </label>\r\n                  <input id={\"filePicker\"+item.id} style={{ visibility: \"hidden\" }} type={\"file\"} required={req} onChange={handleInputControlValue} />\r\n                </div>\r\n                <br /> */}\r\n                <label>{item.name} {req ? <label style={{ color: masterState.get().color }}>*</label> : <></>}</label>\r\n                <br />\r\n                <input type={item.type} id={item.id} onChange={handleInputControlValue} required={req} style={{ marginTop: \"10px\" }} accept=\"image/*\" />\r\n              </div>)\r\n          case 'select':\r\n            /*getOptions(item.key)*/\r\n            var arrayAux = options.filter(ele => ele.key == item.id)\r\n            return (\r\n              <div style={{ margin: \"15px 0px\" }}>\r\n                <label>{item.name} {req ? <label style={{ color: masterState.get().color }}>*</label> : <></>}</label>\r\n                <div style={{ margin: \"10px 0\" }}>\r\n                  <Select\r\n                    name={item.id}\r\n                    // id={item.id}\r\n                    placeholder={item.placeholder}\r\n                    options={arrayAux}\r\n                    onChange={handleChangeSelectValue}\r\n                    theme={(theme) => ({\r\n                      ...theme,\r\n                      borderRadius: 0,\r\n                      colors: {\r\n                        ...theme.colors,\r\n                        primary: masterState.get().color,\r\n                        primary25: masterState.get().color\r\n                      },\r\n                    })}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )\r\n        }\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n  }\r\n\r\n/**\r\n * Maneja los valores de los controles cuando se produce un cambio en él \r\n * @function handleChangeControlValue\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleChangeControlValue = (e) => {\r\n    var auxArray = respuesta\r\n\r\n    var keyName = \"CTRL-\" + e.target.id;\r\n    // if(e?.value){\r\n\r\n    if (e.target?.value) {\r\n      auxArray[keyName] = e.target.value;\r\n    } else\r\n      console.log(auxArray)\r\n    setRespuesta(auxArray)\r\n  }\r\n/**\r\n * Obtiene las opciones para los campos de la entidad\r\n * @function handleInputControlValue\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleInputControlValue = async (e) => {\r\n    const file = e.target.files[0];\r\n    const base64 = await convertToBase64(file);\r\n    console.log(base64)\r\n    var auxArray = respuesta\r\n\r\n    var id = e.target.id;\r\n    //  var id2 = id.substring(10);\r\n    var keyName = \"CTRL-\" + id;\r\n    console.log(keyName)\r\n    // if(e?.value){\r\n    auxArray[keyName] = base64;\r\n\r\n    setRespuesta(auxArray)\r\n    console.log(auxArray)\r\n  }\r\n\r\n/**\r\n * Convierte el archivo obtenido por el input type file en base 64\r\n * @function convertToBase64\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n/**\r\n * Maneja el cambio del select cuando cambia\r\n * @function handleChangeSelectValue\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleChangeSelectValue = (e, { name }) => {\r\n    var auxArray = respuesta\r\n\r\n    var keyName = \"CTRL-\" + name\r\n    // if(e?.value){\r\n    auxArray[keyName] = e.value;\r\n    // }else\r\n\r\n    console.log(auxArray)\r\n    setRespuesta(auxArray)\r\n  }\r\n\r\n  /**\r\n * Obtiene el último equipo insertado\r\n * @function getLastProductKey\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getLastProductKey = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/key\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      setLastKey(result[0].Key)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Maneja el proceso del guardado del estado de la computadora\r\n * @function saveComputerState\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const saveComputerState = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/state\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ \"IdEquipo\": lastKeyRef.current })\r\n      })\r\n      const result = await response.json()\r\n\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * Obtiene las opciones para los campos de la entidad\r\n * @function handleSaveNewEntry\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleSaveNewEntry = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      await getLastProductKey();\r\n\r\n\r\n      let llaves = Object.keys(respuestaRef.current)\r\n      const entityCode = entityCodeRef.current;\r\n\r\n      if (entityCode == 1) {\r\n        await saveComputerState();\r\n      }\r\n\r\n      console.log(llaves)\r\n\r\n      llaves.forEach((el) => {\r\n        console.log(el)\r\n        var show = el.substring(5)\r\n        console.log(respuestaRef.current[el])\r\n        const response = fetch(process.env.REACT_APP_HOME + \"control/entries\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"IdEquipoIngresado\": lastKeyRef.current, \"IdCategoria\": entityCode, \"IdCaracteristica\": show, \"Respuesta\": respuestaRef.current[el], \"UsuarioCreo\": authState.me.get().username })\r\n        })\r\n        \r\n      }).then((response) => {\r\n        console.log(response);\r\n        alert(\"Se ha registrado el producto exitosamente\");\r\n      }).catch((error) => {\r\n        alert(\"Ocurrio un error al registrar el producto\");\r\n        console.log(error);\r\n      })\r\n      //setRespuesta([])\r\n      alert(\"Registro finalizado exitosamente\")\r\n      \r\n    } catch (error) {\r\n      //alert(\"Ocurrio un error al guardar el empleado\" + error)\r\n      //alert(\"Ocurrio un error en el proceso \"+error)\r\n    }\r\n    alert(\"Registro finalizado exitosamente\")\r\n    setRespuesta([])\r\n    setLoading(true);\r\n    setLoading(false);\r\n    await getAllCategories();\r\n  }\r\n/**\r\n * Función que obtiene los listados de la computadora, invoca a  la función pivote en Js para ordenamiento de los mismos.\r\n * @function getRows\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getRows = async (id) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/rows/\" + entityCodeRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      let array = []\r\n\r\n      result.forEach((el) => {\r\n        let row = [];\r\n        console.log(el)\r\n        row[0] = el.IdEquipoIngresado\r\n        row[1] = el.IdCaracteristica\r\n        row[2] = el.Respuesta\r\n        array.push(row)\r\n      })\r\n      //console.log(array)\r\n      setRows(getPivotArray(array, 0, 1, 2))\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * Filtra en la tabla buscando por todos los campos\r\n * @function performSearch\r\n * @memberof Equipos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const performSearch = () => {\r\n    var searchBox = document.getElementById('search-input-table');\r\n    var table = document.getElementById(\"table-products\");\r\n    var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n    var filter = searchBox.value.toUpperCase();\r\n    for (var rowI = 0; rowI < trs.length; rowI++) {\r\n      var tds = trs[rowI].getElementsByTagName(\"td\");\r\n      trs[rowI].style.display = \"none\";\r\n      for (var cellI = 0; cellI < tds.length; cellI++) {\r\n        if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n          trs[rowI].style.display = \"\";\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> : <>\r\n          <NavigationWindow />\r\n          <NavPageContainer\r\n            hasPadding={true}\r\n            animateTransition={true}>\r\n\r\n            <h1>Equipos</h1>\r\n            <p>Ingrese productos a su stock de inventario.</p>\r\n            <div className=\"app-hr\"></div>\r\n            <div>\r\n              <span style={{ fontWeight: \"bold\" }}>Modo</span>\r\n              <br />\r\n              <div style={{ display: \"flex\", margin: \"15px 0px\" }}>\r\n                <div style={{ marginRight: \"15px\" }}>\r\n                  <RadioButton name=\"radio\" value={mode} label='Registro' onChange={() => setMode('R')} defaultChecked />\r\n                </div>\r\n                <div>\r\n                  <RadioButton name=\"radio\" value={mode} label='Lectura' onChange={() => setMode('L')} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ marginRight: \"20px\" }}>\r\n              <Select\r\n                // defaultInputValue='Seleccione una categoria'\r\n                placeholder='Seleccione una categoria'\r\n                defaultValue={entities[0]}\r\n                menuPortalTarget={document.body}\r\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                options={entities}\r\n                onChange={handleListChange}\r\n                theme={(theme) => ({\r\n                  ...theme,\r\n                  borderRadius: 0,\r\n                  colors: {\r\n                    ...theme.colors,\r\n                    primary: masterState.get().color,\r\n                    primary25: masterState.get().color\r\n                  },\r\n                })}\r\n              />\r\n            </div>\r\n            {\r\n              mode == 'R' ?\r\n                <>\r\n                  {\r\n                    controls.length >= 1 ?\r\n                      <form id=\"form-control-items\" onSubmit={handleSaveNewEntry}>\r\n                        <fieldset style={{ borderRadius: \"10px\", marginTop: \"15px\", marginRight: \"20px\", color: \"d9d9d9\", borderColor: \"d9d9d9\" }}>\r\n                          {\r\n                            controls.map(item => {\r\n                              return showControls(item)\r\n                            })\r\n                          }\r\n                          <button type=\"submit\" className='app-button animate primary' /*onSubmit={handleSaveNewEntry}*/ /*onClick={handleSaveNewEntry}*/>Guardar</button>\r\n                        </fieldset>\r\n                      </form>\r\n                      :\r\n                      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n                        <h3 style={{ color: \"lightgray\", marginTop: \"40px\" }}>Selecciona un elemento de la lista para añadir productos</h3>\r\n                      </div>\r\n                  }\r\n                </>\r\n                : rowsRef.current.length >= 1 ? <>\r\n                  <div style={{ marginTop: \"20px\", marginRight: \"30px\" }}>\r\n                    <div>\r\n                      <label>Buscar</label>\r\n                      <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={performSearch} />\r\n                    </div>\r\n                    <div style={{ overflow: \"auto\" }}>\r\n                      <table className=\"styled-table\" id=\"table-products\">\r\n                        <thead>\r\n                          <tr>\r\n                            {\r\n                              headers.map(item => {\r\n                                return (<th>{item.descripcion}</th>)\r\n                              })\r\n                            }\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {\r\n                            rowsRef.current.map((elemento, indice) => {\r\n                              if (indice == 0) return;\r\n                              return (\r\n                                <tr>\r\n                                  {\r\n                                    elemento.map((dato, indiceDato) => {\r\n                                      if (indiceDato == 0) return;\r\n                                      //return (<td>{dato}</td>)\r\n                                      if (dato.length > 1000) {\r\n                                        return (\r\n                                          <>\r\n                                            <td><a style={{ textDecoration: \"underline\", color: \"blue\" }} onClick={() => { setModalImg(true); setCurrentImage(dato); }}>Ver imagen</a></td>\r\n                                            <Modal showOverlay={true} show={modalImg}  onClose={() => setModalImg(false)}>\r\n                                              <Modal.Header>\r\n                                                <Modal.Title>Visualizador de imágenes</Modal.Title>\r\n                                              </Modal.Header>\r\n                                              <Modal.Body>\r\n                                                <img src={currentImageRef.current} width=\"700px\" height=\"auto\" />\r\n                                              </Modal.Body>\r\n                                              <Modal.Footer>\r\n                                                <Button value='Guardar imagen' onClick={() => {triggerBase64Download(currentImageRef.current, \"IMG-\"+Date.now()) }}  />\r\n                                                <Button value=\"Cerrar\" onClick={() => setModalImg(false)} />\r\n                                              </Modal.Footer>\r\n                                            </Modal>\r\n                                          </>\r\n                                        )\r\n                                      }\r\n                                      return (\r\n                                        <td>{dato}</td>\r\n                                      )\r\n                                    })\r\n                                  }\r\n                                </tr>\r\n                              )\r\n\r\n                            })\r\n                          }\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </> : <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n                  <h3 style={{ color: \"lightgray\", marginTop: \"40px\" }}>Selecciona un elemento de la lista para añadir productos</h3>\r\n                </div>\r\n            }\r\n\r\n          </NavPageContainer>\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Equipos","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\home\\index.js",["180","181","182","183","184","185","186","187"],"/**\r\n * @file Componente - Home\r\n * @author Christopher Ortiz\r\n * @namespace Home\r\n * @description Pantalla que muestra datos generales en forma de un dashboard\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport { useAuthState } from '../../stores/AuthStore'\r\nimport { useMasterState } from '../../stores/MasterStore'\r\nimport useState from 'react-usestateref';\r\nimport { VictoryPie, VictoryContainer } from 'victory';\r\nimport \"../home/index.css\";\r\nimport logorv from \"../../assets/rvlogo.png\"\r\nconst Palette = require('nice-color-palettes/200');\r\n\r\n\r\nconst Home = () => {\r\n\r\n  const authState = useAuthState();\r\n  const masterState = useMasterState();\r\n\r\n  const [dashboard, setDashboard, dashboardRef] = useState(null);\r\n  const [colors, setColors, colorsRef] = useState(null);\r\n  const [employees, setEmployees, employeesRef] = useState(null);\r\n  const [graphData, setGraphData, graphDataRef] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getDashboardData();\r\n\r\n  }, [])\r\n\r\n/**\r\n * Obtiene los datos del dashboard\r\n * @function getAllAssignmentData\r\n * @memberof Home\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getDashboardData = async () => {\r\n    var indice = Math.floor((Math.random() * (200 - 1 + 1)) + 1);\r\n    setColors(Palette[indice]);\r\n    const response = await fetch(process.env.REACT_APP_HOME + \"dashboard\", {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    const data = await response.json()\r\n    setDashboard(data[0][0].Cantidad);\r\n    setEmployees(data[0][0].Empleados);\r\n    var graph = [\r\n      { x: \"ASIG\", y: data[0][0].Asignados },\r\n      { x: \"NO ASIG\", y: data[0][0].NoAsignado },\r\n      { x: \"MNT\", y: data[0][0].Mantenimiento },\r\n      { x: \"NO DISP\", y: data[0][0].NoDisponibles }\r\n    ]\r\n    setGraphData(graph);\r\n    console.log(data)\r\n    setLoading(false);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !loading ?\r\n          <>\r\n            <NavigationWindow />\r\n\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n              <div style={{ display: \"flex\", flex: 1, flexDirection: \"column\" }}>\r\n                <div style={{ display: \"flex\", flex: 1, justifyContent: \"space-between\", marginRight: \"40px\" }}>\r\n                  <div>\r\n                    <h1>Home</h1>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n                    <img src={logorv} height={\"40px\"} />\r\n                  </div>\r\n                </div>\r\n                <div className='app-hr' />\r\n              </div>\r\n              <div style={{ flex: 1, display: \"flex\", marginRight: \"30px\", marginTop: \"30px\", flexDirection: \"column\" }}>\r\n                <div style={{ display: \"flex\", flex: 1, marginBottom: \"15px\" }}>\r\n                  <h3>¡Bienvenido(a), {authState.me.get().username}!</h3>\r\n                </div>\r\n                <div style={{ display: \"flex\", flex: 1 }}>\r\n                  <div style={{ display: \"flex\", flex: 1, justifyContent: \"center\", padding: \"20px\", alignItems: \"center\", backgroundColor: \"#eee\", height: \"450px\", margin: \"0 20px\", flexDirection: \"column\" }}>\r\n                    <h3 style={{ fontWeight: \"bold\" }}>Gráfica de Estados de Equipos</h3>\r\n                    <VictoryPie\r\n                      //colorScale={colorsRef.current}\r\n                      colorScale={[colorsRef.current[0], colorsRef.current[1], colorsRef.current[2], colorsRef.current[3]]}\r\n                      data={graphDataRef.current}\r\n                      padAngle={({ datum }) => datum.y}\r\n                      innerRadius={100}\r\n                      width={350}\r\n                      id=\"graph-victory-home\"\r\n                      style={{margin: 0, padding: 0}}\r\n                      animate={{ duration: 2000 }}\r\n                      labels={({ datum }) => {\r\n                        switch (datum.y) {\r\n                          case 0:\r\n                            return \"\";\r\n                          default:\r\n                            return datum.y + \" \" + datum.x;\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div style={{ display: \"flex\", flex: 1, flexDirection: \"column\" }}>\r\n                    <div style={{ display: \"flex\", flex: 1, flexDirection: \"column\", backgroundColor: \"#eee\", width: \"100%\", marginBottom: \"20px\" }}>\r\n                      <div style={{ display: \"flex\", flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n                        <h1 style={{ fontWeight: \"bold\" }}>{dashboardRef.current}</h1>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", flex: 1, alignItems: \"flex-start\", justifyContent: \"center\" }}>\r\n                        <h1>Equipos registrados</h1>\r\n                      </div>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flex: 1, flexDirection: \"column\", backgroundColor: \"#eee\", width: \"100%\" }}>\r\n                      <div style={{ display: \"flex\", flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n                        <h1 style={{ fontWeight: \"bold\" }}>{employeesRef.current}</h1>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", flex: 1, alignItems: \"flex-start\", justifyContent: \"center\" }}>\r\n                        <h1>Empleados activos</h1>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </NavPageContainer>\r\n          </>\r\n          : <></>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\perfil\\index.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"/**\r\n * @file Componente - Perfil\r\n * @author Christopher Ortiz\r\n * @namespace Perfil\r\n * @description Pantalla que gestiona las credenciales de acceso, crear nuevos usuarios y mi última actividad de autenticación\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport { useAuthState } from '../../stores/AuthStore'\r\nimport useState from 'react-usestateref'\r\n\r\n\r\nconst Perfil = () => {\r\n\r\n  const authState = useAuthState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [logs, setLogs, logsRef] = useState();\r\n  const [username, setUsername, usernameRef] = useState(\"\");\r\n  const [password, setPassword, passwordRef] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword, confirmPasswordRef] = useState(\"\");\r\n\r\n  const [usernameR, setUsernameR, usernameRefR] = useState(\"\");\r\n  const [passwordR, setPasswordR, passwordRefR] = useState(\"\");\r\n  const [confirmPasswordR, setConfirmPasswordR, confirmPasswordRefR] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getLoginsRecords();\r\n  }, [])\r\n\r\n/**\r\n * Obtiene los últimos veinte inicios de sesión o cierres de sesión\r\n * @function getMaintenanceRecords\r\n * @memberof Perfil\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getLoginsRecords = async () => {\r\n    const response = await fetch(process.env.REACT_APP_HOME + \"auth/sessions/\" + authState.me.get().username, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    const data = await response.json()\r\n    setLogs(data)\r\n    console.log(data)\r\n  }\r\n\r\n/**\r\n * Actualiza las credenciales de acceso al usuario logueado\r\n * @function updateCredentials\r\n * @memberof Perfil\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const updateCredentials = async () => {\r\n    if (password === confirmPassword) {\r\n      try {\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"auth/update/\" + authState.me.get().username, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"ContraseniaUsuario\": password })\r\n        })\r\n        const data = await response.json()\r\n        alert(\"Contraseña actualizada exitosamente\")\r\n        setPassword(\"\");\r\n        setConfirmPassword(\"\");\r\n      } catch (error) {\r\n        alert(\"Error al actualizar la contraseña \" + error)\r\n      }\r\n    } else {\r\n      alert(\"Las contraseñas no coinciden\")\r\n    }\r\n  }\r\n\r\n/**\r\n * Registra un nuevo usuario en el sistema\r\n * @function registerUser\r\n * @memberof Perfil\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const registerUser = async () => {\r\n    if (passwordR === confirmPasswordR) {\r\n      try {\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"auth/register\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"NombreUsuario\": usernameR, \"ContraseniaUsuario\": passwordR })\r\n        })\r\n        const data = await response.json()\r\n        alert(\"Usuario registrado exitosamente\")\r\n        setUsernameR(\"\");\r\n        setPasswordR(\"\");\r\n        setConfirmPasswordR(\"\");\r\n      } catch (error) {\r\n        alert(\"Error al actualizar la contraseña \" + error)\r\n      }\r\n    } else {\r\n      alert(\"Las contraseñas no coinciden\")\r\n    }\r\n  }\r\n\r\n  /**\r\n * Limpia los campos después de una actualización o un registro de usuario\r\n * @function cleanData\r\n * @memberof Perfil\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const cleanData = () => {\r\n    setPassword(\"\");\r\n    setConfirmPassword(\"\");\r\n    setPasswordR(\"\");\r\n    setConfirmPasswordR(\"\");\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // loading ?\r\n        <>\r\n          <NavigationWindow />\r\n          <NavPageContainer\r\n            hasPadding={true}\r\n            animateTransition={true}>\r\n            <h1>Perfil</h1>\r\n            <div className='app-hr'></div>\r\n            <p>Gestiona tus credenciales e inicios de sesión.</p>\r\n            <div style={{ display: \"flex\", flex: 1, marginRight: \"30px\" }}>\r\n              <div style={{ flex: 1 }}>\r\n                <h2>Mi registro de inicios de sesión</h2>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Accion</th>\r\n                      <th>Fecha</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      logsRef.current?.map((item) => {\r\n                        return (\r\n                          <tr key={item.IdBitacora}>\r\n                            <td>\r\n                              {item.Accion}\r\n                            </td>\r\n                            <td>\r\n                              {item.FechaF}\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\", padding: \"10px\", marginLeft: \"20px\" }}>\r\n                <div style={{ flex: 1 }}>\r\n                  <h2>Editar mis credenciales de acceso</h2>\r\n                  <div className='app-hr'></div>\r\n                  <div style={{ marginTop: \"20px\", marginBottom: \"20px\", display: \"flex\", alignItems: \"center\" }}>\r\n                    <label>Nombre de usuario:</label>\r\n                    <input className='app-input-text' value={authState.me.get().username} readOnly={true} style={{ marginLeft: \"10px\" }} />\r\n                  </div>\r\n                  <div style={{ marginTop: \"20px\", marginBottom: \"20px\", display: \"flex\", alignItems: \"center\" }}>\r\n                    <label>Contraseña:</label>\r\n                    <input className='app-input-text' value={password} onChange={(e) => setPassword(e.target.value)} type=\"password\" style={{ marginLeft: \"10px\" }} />\r\n                  </div>\r\n                  <div style={{ marginTop: \"20px\", marginBottom: \"20px\", display: \"flex\", alignItems: \"center\" }}>\r\n                    <label>Confirmar contraseña</label>\r\n                    <input className='app-input-text' value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} type=\"password\" style={{ marginLeft: \"10px\" }} />\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginRight: \"30px\" }}>\r\n                    <button className='app-button animate primary' style={{ margin: \"20px 15px\" }} onClick={updateCredentials}>Actualizar mis datos</button>\r\n                    <button className='app-button animate primary' style={{ margin: \"20px 15px\" }} onClick={cleanData}>Cancelar</button>\r\n                  </div>\r\n\r\n\r\n                  <h2>Nuevo Usuario</h2>\r\n                  <div className='app-hr'></div>\r\n                  <div style={{ marginTop: \"20px\", marginBottom: \"20px\", display: \"flex\", alignItems: \"center\" }}>\r\n                    <label>Nombre de usuario:</label>\r\n                    <input className='app-input-text' value={usernameR} onChange={(e) => setUsernameR(e.target.value)} style={{ marginLeft: \"10px\" }} />\r\n                  </div>\r\n                  <div style={{ marginTop: \"20px\", marginBottom: \"20px\", display: \"flex\", alignItems: \"center\" }}>\r\n                    <label>Contraseña:</label>\r\n                    <input className='app-input-text' value={passwordR} onChange={(e) => setPasswordR(e.target.value)} type=\"password\" style={{ marginLeft: \"10px\" }} />\r\n                  </div>\r\n                  <div style={{ marginTop: \"20px\", marginBottom: \"20px\", display: \"flex\", alignItems: \"center\" }}>\r\n                    <label>Confirmar contraseña</label>\r\n                    <input className='app-input-text' value={confirmPasswordR} onChange={(e) => setConfirmPasswordR(e.target.value)} type=\"password\" style={{ marginLeft: \"10px\" }} />\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginRight: \"30px\" }}>\r\n                    <button className='app-button animate primary' style={{ margin: \"20px 15px\" }} onClick={registerUser}>Crear nuevo usuario</button>\r\n                    <button className='app-button animate primary' style={{ margin: \"20px 15px\" }} onClick={cleanData}>Cancelar</button>\r\n                  </div>\r\n                </div>\r\n                <div style={{ flex: 1 }}>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </NavPageContainer>\r\n        </>\r\n        //  : <></>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Perfil","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\categorias\\index.js",["203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"/**\r\n * @file Componente - Categorías\r\n * @author Christopher Ortiz\r\n * @namespace Categorías\r\n * @description Componente que renderiza la lista de categorías\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport \"../categorias/index.css\"\r\nimport { Dialog, Button } from 'react-windows-ui'\r\nimport useState from 'react-usestateref'\r\nimport Modal from '../../components/Modal';\r\nimport Select from 'react-select'\r\nimport { useAuthState } from '../../stores/AuthStore';\r\n\r\nconst Categoria = () => {\r\n/**\r\n * Hook encargado de manejar el estado de mostrar el modal\r\n * @function setShowModal\r\n * @memberof Categorías\r\n * @return showModal {boolean}\r\n * @inner\r\n */\r\n  const [showModal, setShowModal] = useState(false);\r\n/**\r\n * Hook encargado de manejar el estado de mostrar el modal para cambiar el estado de la categoría\r\n * @function setModalCancel\r\n * @memberof Categorías\r\n * @return modalCancel {boolean}\r\n * @inner\r\n */\r\n  const [modalCancel, setModalCancel] = useState(false);\r\n/**\r\n * Hook encargado de manejar el nombre de la categoría\r\n * @function setCategoria\r\n * @memberof Categorías\r\n * @return categoria {string}\r\n * @inner\r\n */\r\n  const [categoria, setCategoria] = useState(\"\")\r\n/**\r\n * Hook encargado de manejar el listado de las categorías de la base de datos\r\n * @function setlistCat\r\n * @memberof Categorías\r\n * @return listCat {array}\r\n * @inner\r\n */\r\n  const [listCat, setlistCat, listCatRef] = useState([])\r\n/**\r\n * Hook encargado de manejar el estado de carga de la página\r\n * @function setLoading\r\n * @memberof Categorías\r\n * @return loading {boolean}\r\n * @inner\r\n */\r\n  const [loading, setLoading] = useState(true)\r\n/**\r\n * Hook encargado de manejar el código del equipo que se está actualizando actualmente\r\n * @function setKeyEdit\r\n * @memberof Categorías\r\n * @return keyEdit {Object}\r\n * @inner\r\n */\r\n  const [keyEdit, setKeyEdit, keyEditRef] = useState(null)\r\n/**\r\n * Hook encargado de manejar la visualización del modal de actualización\r\n * @function setModalActualizar\r\n * @memberof Categorías\r\n * @return modalActualizar {boolean}\r\n * @inner\r\n */\r\n  const [modalActualizar, setModalActualizar] = useState(false)\r\n/**\r\n * Hook encargado de manejar la información de la categoría que se está actualizando\r\n * @function setInfoRaw\r\n * @memberof Categorías\r\n * @return infoRaw {Object}\r\n * @inner\r\n */\r\n  const [infoRaw, setInfoRaw, infoRawRef] = useState()\r\n/**\r\n * Hook encargado de manejar el estado del modal de la categoría\r\n * @function setModalCategory\r\n * @memberof Categorías\r\n * @return modalCategory {boolean}\r\n * @inner\r\n */\r\n  const [modalCategory, setModalCategory] = useState(false)\r\n/**\r\n * Hook encargado de manejar el ingreso de un nuevo ítem\r\n * @function setNewItems\r\n * @memberof Categorías\r\n * @return newItems {string}\r\n * @inner\r\n */\r\n  const [newItems, setNewItems, newItemsRef] = useState(\"\")\r\n/**\r\n * Hook encargado de manejar el estado del modal de los nuevos items\r\n * @function setItemModal\r\n * @memberof Categorías\r\n * @return itemsModal {boolean}\r\n * @inner\r\n */\r\n  const [itemsModal, setItemsModal] = useState(false)\r\n/**\r\n * Hook encargado de manejar el estado del modal de los nuevos items\r\n * @function setItems\r\n * @memberof Categorías\r\n * @return items {Object}\r\n * @inner\r\n */\r\n  const [items, setItems, itemsRef] = useState()\r\n/**\r\n * Hook encargado de manejar el estado del modal de los items seleccionados\r\n * @function setItemsSelect\r\n * @memberof Categorías\r\n * @return itemsSelect {Array}\r\n * @inner\r\n */\r\n  const [itemsSelect, setItemsSelect, itemsSelectRef] = useState([])\r\n/**\r\n * Hook encargado de manejar el estado del modal mostrar/ocultar de los nuevos items\r\n * @function setModalNew\r\n * @memberof Categorías\r\n * @return modalNew {Object}\r\n * @inner\r\n */\r\n  const [modalNew, setModalNew] = useState(false)\r\n/**\r\n * Hook encargado de manejar el estado del modal de los nuevos items\r\n * @function setTypes\r\n * @memberof Categorías\r\n * @return types {Object}\r\n * @inner\r\n */\r\n  const [types, setTypes, typesRef] = useState()\r\n/**\r\n * Hook encargado de manejar el tipo de campo seleccionado\r\n * @function setSelectedType\r\n * @memberof Categorías\r\n * @return selectedType {Object}\r\n * @inner\r\n */\r\n  const [selectedType, setSelectedType, selectedTypeRef] = useState();\r\n/**\r\n * Hook encargado de manejar el nombre de la caracteristica\r\n * @function setNombreCaracteristica\r\n * @memberof Categorías\r\n * @return nombreCaracteristica {Object}\r\n * @inner\r\n */\r\n  const [nombreCaracteristica, setNombreCaracteristica, nombreCaracteristicaRef] = useState()\r\n/**\r\n * Hook encargado de manejar el valor del Placeholder a registrar\r\n * @function setPlaceholderR\r\n * @memberof Categorías\r\n * @return placeholderR {Object}\r\n * @inner\r\n */\r\n  const [placeholderR, setPlaceholderR, placeholderRRef] = useState()\r\n/**\r\n * Hook encargado de manejar el valor deL requerido\r\n * @function setIsRequired\r\n * @memberof Categorías\r\n * @return isRequired {int}\r\n * @inner\r\n */\r\n  const [isRequired, setIsRequired, isRequiredRef] = useState(0)\r\n/**\r\n * Hook encargado de manejar el valor de los valores seleccionados\r\n * @function setSelectValues\r\n * @memberof Categorías\r\n * @return selectValues {Object}\r\n * @inner\r\n */\r\n  const [selectValues, setSelectValues, selectValuesRef] = useState()\r\n/**\r\n * Hook encargado de manejar el valor del último nivel conseguido\r\n * @function setLastLevel\r\n * @memberof Categorías\r\n * @return lastLevel {Object}\r\n * @inner\r\n */\r\n  const [lastLevel, setLastLevel, lastLevelRef] = useState()\r\n/**\r\n * Hook encargado de manejar el valor del código que fue insertado\r\n * @function setInsertedId\r\n * @memberof Categorías\r\n * @return insertedId {Object}\r\n * @inner\r\n */\r\n  const [insertedId, setInsertedId, insertedIdRef] = useState()\r\n\r\n\r\n  const AuthStore = useAuthState();\r\n\r\n  useEffect(() => {\r\n    getAllTypes()\r\n    getItems()\r\n  }, [])\r\n\r\n/**\r\n * Se encarga de agregar una nueva categoría a la base de datos\r\n * @function addItem\r\n * @memberof Categorías\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const addItem = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ \"DescripcionCategoria\": categoria })\r\n      })\r\n      setCategoria(\"\")\r\n      await getItems()\r\n      setShowModal(false)\r\n      setLoading(false)\r\n      alert(\"La categoria se guardo exitosamente\")\r\n    } catch (error) {\r\n      alert(\"Ocurrio un error al guardar la categoria\")\r\n    }\r\n  }\r\n\r\n  /**\r\n * Se encarga de traer los datos de las categorías desde la base de datos\r\n * @function getItems\r\n * @memberof Categorías\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getItems = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/table\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setlistCat(result)\r\n      setLoading(false)\r\n      //console.log(result)\r\n      //setlistCat(response)\r\n      // console.log(result)\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al obtener las categorias \" + error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Se encarga de agregar una nueva categoría a la base de datos\r\n * @function getAllTypes\r\n * @memberof Categorías\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getAllTypes = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"machines/types\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setTypes(result)\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al obtener los tipos de datos \" + error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Maneja la búsqueda en la tabla, función que se encarga de filtrar los datos de la tabla\r\n * @name searchTableAll\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const searchTableAll = () => {\r\n    var searchBox = document.getElementById('search-input-table');\r\n    var table = document.getElementById(\"table-products\");\r\n    var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n    var filter = searchBox.value.toUpperCase();\r\n    for (var rowI = 0; rowI < trs.length; rowI++) {\r\n      var tds = trs[rowI].getElementsByTagName(\"td\");\r\n      trs[rowI].style.display = \"none\";\r\n      for (var cellI = 0; cellI < tds.length; cellI++) {\r\n        if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n          trs[rowI].style.display = \"\";\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n/**\r\n * Cambia el estado de la entidad\r\n * @name changeEntityStatus\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const changeEntityStatus = async (key, action) => {\r\n    setKeyEdit(key);\r\n    await getLastLevelByEntity();\r\n    if (action == \"UPD\") {\r\n      await getEntityInfoRaw();\r\n      setModalActualizar(true);\r\n    }\r\n    if (action == \"STA\") {\r\n      setModalCancel(true);\r\n    }\r\n  }\r\n\r\n/**\r\n * Maneja los cambios relacionados con el estado de la categoría\r\n * @name handleEntityStatus\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleEntityStatus = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/changestatus/\" + keyEditRef.current, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      await getAllTypes()\r\n      await getItems()\r\n      //window.location.reload()\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al cambiar el estado de la entidad \" + error)\r\n    }\r\n    setModalCancel(false);\r\n  }\r\n\r\n/**\r\n * Trae la información detallada de las entidades\r\n * @name getEntityInfoRaw\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getEntityInfoRaw = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/update/\" + keyEditRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setInfoRaw(result)\r\n      console.log(infoRawRef.current)\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al obtener la entidad \" + error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Gestiona el cambio en un input y lo almacena en un objeto\r\n * @name handleCaracteristicaNameChange\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleCaracteristicaNameChange = (e) => {\r\n    var auxArray = [...infoRaw];\r\n    auxArray[e.target.id].CaracteristicaDescripcion = e.target.value;\r\n    setInfoRaw(auxArray);\r\n  }\r\n/**\r\n * Gestiona el cambio en un input del valor del Placeholder y lo almacena en un objeto\r\n * @name handlePlaceholderChange\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handlePlaceholderChange = (e) => {\r\n    var auxArray = [...infoRaw];\r\n    auxArray[e.target.id].Placeholder = e.target.value;\r\n    setInfoRaw(auxArray);\r\n  }\r\n/**\r\n * Gestiona el cambio en un checkbox del valor del Requerido y lo almacena en un objeto\r\n * @name handleIsRequiredItem\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleIsRequiredItem = (e) => {\r\n    var auxArray = [...infoRaw];\r\n    var value = auxArray[e.target.id].Requerido.data[0];\r\n    //if(e.target.value == 0) value = 1; else value = 0;\r\n    if (value == 0) value = 1; else value = 0;\r\n    auxArray[e.target.id].Requerido.data[0] = value;\r\n    setInfoRaw(auxArray);\r\n    console.log(infoRawRef.current)\r\n  }\r\n/**\r\n * Almacena el item una variable y su código para luego sean utilizados por los métodos de actualización e inserción.\r\n * @name handleNewItemsChange\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleNewItemsChange = async (e) => {\r\n    setItemsSelect(e.target.id)\r\n    await getItemsByRow();\r\n    setItemsModal(true)\r\n  }\r\n/**\r\n * Trae los items de una entidad desde la base de datos\r\n * @name getItemsByRow\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getItemsByRow = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/items/\" + keyEditRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setItems(result)\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al obtener las categorias \" + error)\r\n    }\r\n  }\r\n/**\r\n * Actualiza la información de una característica (pregunta)\r\n * @name updateCaracteristicaInfo\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const updateCaracteristicaInfo = async (index) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/update/\" + keyEditRef.current, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          CaracteristicaDescripcion: infoRawRef.current[index].CaracteristicaDescripcion,\r\n          Placeholder: infoRawRef.current[index].Placeholder,\r\n          Requerido: infoRawRef.current[index].Requerido.data[0],\r\n          IdCaracteristica: infoRawRef.current[index].IdCaracteristica\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n    } catch (error) {\r\n      console.log(error)\r\n      //alert(\"Ocurrio un error al obtener la entidad \" + error)\r\n    }\r\n  }\r\n/**\r\n * Método que se encarga de actualizar la entidad en general\r\n * @name handleUpdateEntity\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleUpdateEntity = async (e) => {\r\n    setModalActualizar(false)\r\n    try {\r\n      infoRawRef.current.forEach((item, index) => {\r\n        updateCaracteristicaInfo(index);\r\n      })\r\n      alert(\"Datos actualizados exitosamente\")\r\n      await getAllTypes()\r\n      await getItems()\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al actualizar la entidad \" + error)\r\n    }\r\n  }\r\n/**\r\n * Método que guarda item por item las preguntas de la entidad\r\n * @name saveNewItem\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const saveNewItem = async (e) => {\r\n    if (newItemsRef.current.length < 1) return alert(\"El campo no puede estar vacio\");\r\n    try {\r\n      const lastLevel = parseInt(itemsRef.current?.filter(x => x.IdCaracteristica == itemsSelectRef.current)[0].MaxNivel) + 1;\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/items/\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          IdCategoria: keyEditRef.current,\r\n          IdCaracteristica: itemsSelectRef.current,\r\n          OpcionDescripcion: newItemsRef.current,\r\n          Nivel: lastLevel\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      alert(\"Item guardado exitosamente\")\r\n      await getAllTypes()\r\n      await getItems()\r\n      //window.location.reload()\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al guardar la entidad \" + error)\r\n    }\r\n  }\r\n/**\r\n * Reacciona ante el check de activo/inactivo\r\n * @name handleChangeItemsName\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleChangeItemsState = async (e) => {\r\n    var auxArray = [...items];\r\n    console.log(auxArray)\r\n    var value = auxArray[e.target.id].Estado.data[0];\r\n    console.log(value)\r\n    if (value == 0) value = 1; else value = 0;\r\n    auxArray[e.target.id].Estado.data[0] = value;\r\n    setItems(auxArray);\r\n  }\r\n/**\r\n * Guarda el nombre de los items al ser insertados/actualizados\r\n * @name handleChangeItemsName\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleChangeItemsName = async (e) => {\r\n    var auxArray = [...items];\r\n    var id = e.target.id;\r\n    auxArray.filter(x => x.IdCaracteristica == itemsSelectRef.current)[e.target.id].OpcionDescripcion = e.target.value;\r\n    setItems(auxArray);\r\n  }\r\n/**\r\n * Toma todos los items (que pertenezcan a un campo de tipo selección) y los actualiza\r\n * @name updateAllMyItems\r\n * @function\r\n * @async\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const updateAllMyItems = async (e) => {\r\n    try {\r\n      itemsRef.current.forEach((item, index) => {\r\n        updateItems(index);\r\n      })\r\n      alert(\"Datos actualizados exitosamente\")\r\n      setModalActualizar(false)\r\n      await getAllTypes()\r\n      await getItems()\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al actualizar la entidad \" + error)\r\n    }\r\n  }\r\n/**\r\n * Actualiza item por item los datos que pertenezcan a un campo de tipo selección\r\n * @name updateItems\r\n * @function\r\n * @async\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const updateItems = async (index) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"category/updateitems\", {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          Estado: itemsRef.current[index].Estado.data[0],\r\n          OpcionDescripcion: itemsRef.current[index].OpcionDescripcion,\r\n          IdCategoria: keyEditRef.current,\r\n          IdCaracteristica: itemsSelectRef.current,\r\n          IdOpcion: itemsRef.current[index].IdOpcion\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n    } catch (error) {\r\n      console.log(error)\r\n      //alert(\"Ocurrio un error al obtener la entidad \" + error)\r\n    }\r\n  }\r\n/**\r\n * Función que se encarga de actualizar el valor de si es o no requerido\r\n * @name handleRequiredNewItem\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleRequiredNewItem = (e) => {\r\n    if (e.target.value == \"on\") {\r\n      setIsRequired(1);\r\n    } else {\r\n      setIsRequired(0);\r\n    }\r\n  }\r\n/**\r\n * Obtiene cuál fue el último nivel que se insertó entre las entidades\r\n * @name getLastLevelByEntity\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getLastLevelByEntity = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/lastlevel/\" + keyEditRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setLastLevel(result[0].LastNivel)\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al obtener las categorias \" + error)\r\n    }\r\n  }\r\n/**\r\n * Función que se encarga de insertar una nueva característica\r\n * @name addCaracteristica\r\n * @function\r\n * @async\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const addCaracteristica = async () => {\r\n    try {\r\n\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          \"IdCategoria\": keyEditRef.current,\r\n          \"CaracteristicaDescripcion\": nombreCaracteristicaRef.current,\r\n          \"Estado\": 1,\r\n          \"Nivel\": parseInt(lastLevelRef.current) + 1,\r\n          \"Requerido\": isRequiredRef.current,\r\n          \"Placeholder\": placeholderRRef.current,\r\n          \"Tooltip\": nombreCaracteristicaRef.current,\r\n          \"UsuarioCreo\": AuthStore.me.get().username,\r\n          \"CaracteristicaTipo\": selectedTypeRef.current\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      setInsertedId(result.message)\r\n\r\n      if (selectedTypeRef.current != 4)\r\n        alert(\"La categoria se guardo exitosamente\")\r\n      else\r\n        await handleNewSelectionSave();\r\n\r\n    } catch (error) {\r\n      alert(\"Ocurrio un error al guardar la categoria\")\r\n    }\r\n  }\r\n/**\r\n * Registra las opciones que tendrá un nuevo campo de tipo Selección\r\n * @name addItemsOptions\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const addItemsOptions = async (description, level) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/detail\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          \"IdCategoria\": keyEditRef.current,\r\n          \"IdCaracteristica\": insertedIdRef.current,\r\n          \"Valores\": description,\r\n          \"Nivel\": level,\r\n          \"Estado\": 1\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      //window.location.reload()\r\n    } catch (error) {\r\n      alert(\"Ocurrio un error al guardar la categoria\")\r\n    }\r\n  }\r\n/**\r\n * Toma los datos insertados, hace un split de ellos (el texto en formato de barra) y los inserta como opciones de un campo de tipo selección\r\n * @name handleNewSelectionSave\r\n * @function\r\n * @memberof Categorías\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleNewSelectionSave = async () => {\r\n    try {\r\n      const stringValues = selectValuesRef.current;\r\n      const stringValuesArray = stringValues.split(\"|\");\r\n      stringValuesArray.forEach((item, index) => {\r\n        console.log(item)\r\n        addItemsOptions(item, index).then((result) => {\r\n          //console.log(result)\r\n        })\r\n      })\r\n      alert(\"La categoria se guardo exitosamente\");\r\n      await getAllTypes()\r\n      await getItems()\r\n    } catch (error) {\r\n      alert(\"Algo salió mal durante se guardaba la categoría\");\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> :\r\n          <>\r\n            <NavigationWindow />\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n\r\n\r\n              <Modal showOverlay={true} show={modalCancel} onClose={() => setModalCancel(false)}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Cambiar estado</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div style={{ display: 'flex' }}>\r\n                    <i className=\"icons10-exclamation-mark\" style={{ color: '#faca2a', fontSize: \"70px\" }} />\r\n                    <div style={{ marginLeft: 25, justifyContent: \"center\", alignItems: \"center\", display: \"flex\" }}>\r\n                      <label>Estás a punto de cambiar el estado de esta entidad, ¿estás seguro(a) que deseas continuar?</label>\r\n                    </div>\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value='Si, cambiar estado' onClick={() => { handleEntityStatus() }} />\r\n                  <Button value=\"No, mantener estado actual\" onClick={() => setModalCancel(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={modalNew} onClose={() => setModalNew(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Nueva Caracteristica</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div style={{ display: 'flex', flex: 1 }}>\r\n                    <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Elemento</th>\r\n                          <th>Valor</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>\r\n                            <p>Nombre de la Caracteristica</p>\r\n                          </td>\r\n                          <td>\r\n                            <input type=\"text\" className='app-input-text' placeholder='Nombre de la caracteristica' value={nombreCaracteristica} onChange={(e) => setNombreCaracteristica(e.target.value)} />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            <p>Placeholder</p>\r\n                          </td>\r\n                          <td>\r\n                            <input type=\"text\" className='app-input-text' placeholder='Nombre de la caracteristica' value={placeholderR} onChange={(e) => setPlaceholderR(e.target.value)} />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            <p>Tipo</p>\r\n                          </td>\r\n                          <td>\r\n                            <Select\r\n                              options={typesRef.current}\r\n                              onChange={(e) => setSelectedType(e.value)}\r\n                            />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            <p>\r\n                              Opciones (separadas por barra |)\r\n                            </p>\r\n                          </td>\r\n                          <td>\r\n                            <input type=\"text\" className='app-input-text' placeholder='Item 1|Item2|Item3' value={selectValues} onChange={(e) => setSelectValues(e.target.value)} disabled={selectedTypeRef.current == 4 ? false : true} />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            <p>\r\n                              ¿Es requerido?\r\n                            </p>\r\n                          </td>\r\n                          <td>\r\n                            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                              <input type=\"checkbox\" placeholder='Nombre de la caracteristica' onChange={handleRequiredNewItem} />\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value='Guardar nuevo campo' onClick={addCaracteristica} />\r\n                  <Button value=\"Cancelar\" onClick={() => setModalNew(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={modalActualizar} onClose={() => setModalActualizar(false)}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Actualizar entidad</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div style={{ display: 'flex' }}>\r\n                    {/* <i className=\"icons10-info\" style={{ color: '#faca2a', fontSize: \"50px\" }} /> */}\r\n                    <div style={{ marginRight: 25, flex: 1 }}>\r\n\r\n                      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\" }}>\r\n                        <button className=\"app-button animate primary\" onClick={() => setModalNew(true)}>Nuevo campo</button>\r\n                      </div>\r\n                      <div>\r\n                        <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Caracteristica</th>\r\n                              <th>Placeholder</th>\r\n                              <th>Tipo</th>\r\n                              <th>Requerido</th>\r\n                              <th>Valores</th>\r\n                              <th>Nuevos Items</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {\r\n                              infoRaw ? infoRawRef.current?.map((item, index) => {\r\n\r\n                                return (\r\n                                  <tr>\r\n                                    <td>\r\n                                      <input type=\"text\" className='app-input-text' id={index} value={infoRawRef.current[index].CaracteristicaDescripcion} onChange={handleCaracteristicaNameChange} />\r\n                                    </td>\r\n                                    <td>\r\n                                      <input type=\"text\" className='app-input-text' id={index} value={infoRawRef.current[index].Placeholder} onChange={handlePlaceholderChange} />\r\n                                    </td>\r\n                                    <td>\r\n                                      {infoRawRef.current[index].DisplayText}\r\n                                    </td>\r\n                                    <td>{\r\n                                      infoRawRef.current[index].Requerido.data[0] === 1 ?\r\n                                        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                          <input type=\"checkbox\" id={index} checked onChange={handleIsRequiredItem} />\r\n                                        </div>\r\n                                        :\r\n                                        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                          <input type=\"checkbox\" id={index} onChange={handleIsRequiredItem} />\r\n                                        </div>\r\n                                    }\r\n\r\n                                    </td>\r\n                                    <td>\r\n                                      {infoRawRef.current[index].Campos}\r\n                                    </td>\r\n                                    <td>\r\n                                      {\r\n                                        infoRawRef.current[index].DescripcionTipo === \"select\" ?\r\n                                          <button className='app-button animate primary' style={{ marginRight: \"10px\" }} id={item.IdCaracteristica} onClick={handleNewItemsChange}>Actualizar items</button>\r\n                                          :\r\n                                          <p>N/A</p>\r\n                                      }\r\n\r\n                                    </td>\r\n                                  </tr>\r\n                                )\r\n                              }) : <></>\r\n                            }\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div style={{ display: \"flex\" }}>\r\n                    <Modal showOverlay={true} show={itemsModal} onClose={() => setItemsModal(false)} size={\"lg\"}>\r\n                      <Modal.Header>\r\n                        <Modal.Title>Actualizacion de ítems</Modal.Title>\r\n                      </Modal.Header>\r\n                      <Modal.Body>\r\n                        <div style={{ display: \"flex\", flex: 1, justifyContent: \"flex-end\" }}>\r\n                          <button className=\"app-button animate primary\" onClick={() => setModalCategory(true)}>Nuevo item</button>\r\n                        </div>\r\n                        <div style={{ display: 'flex' }}>\r\n                          <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>Item</th>\r\n                                <th>Estado</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {\r\n                                itemsRef.current?.filter(x => x.IdCaracteristica == itemsSelectRef.current).map((item, index) => {\r\n                                  return (\r\n                                    <tr>\r\n                                      <td> <input className='app-input-text' type=\"text\" id={index} value={itemsRef.current.filter(x => x.IdCaracteristica == itemsSelectRef.current)[index].OpcionDescripcion} onChange={handleChangeItemsName} /></td>\r\n                                      {\r\n                                        <td style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n                                          {\r\n                                            itemsRef.current[index].Estado.data[0] == 1 ?\r\n                                              <input type=\"checkbox\" checked id={index} onChange={handleChangeItemsState} /> :\r\n                                              <input type=\"checkbox\" id={index} onChange={handleChangeItemsState} />\r\n                                          }\r\n                                        </td>\r\n                                      }\r\n                                    </tr>\r\n                                  )\r\n                                })\r\n                              }\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n\r\n\r\n                        <Modal showOverlay={true} show={modalCategory} size={\"xs\"} onClose={() => setModalCategory(false)}>\r\n                          <Modal.Header>\r\n                            <Modal.Title>Nuevo Item</Modal.Title>\r\n                          </Modal.Header>\r\n                          <Modal.Body>\r\n                            <p>Ingrese el valor del nuevo item</p>\r\n                            <input className='app-input-text' placeholder='Nuevo item' value={newItems} onChange={(e) => setNewItems(e.target.value)} />\r\n                          </Modal.Body>\r\n                          <Modal.Footer>\r\n                            <Button value='Agregar item' onClick={() => { saveNewItem() }} />\r\n                            <Button value=\"Cancelar\" onClick={() => setModalCategory(false)} />\r\n                          </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n                      </Modal.Body>\r\n                      <Modal.Footer>\r\n                        <Button value='Actualizar items' onClick={updateAllMyItems} />\r\n                        <Button value=\"Cancelar\" onClick={() => setItemsModal(false)} />\r\n                      </Modal.Footer>\r\n                    </Modal>\r\n\r\n\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => handleUpdateEntity()}>Actualizar</button>\r\n                  <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => setModalActualizar(false)} >Cancelar</button>\r\n                </Modal.Footer>\r\n              </Modal>\r\n              <h1>Entidades</h1>\r\n              <p>Añada, modifique o elimine sus entidades</p>\r\n              <div className=\"app-hr\"></div>\r\n              <div style={{ marginTop: \"15px\" }}>\r\n                <label>Buscar</label>\r\n                <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n              </div>\r\n              <div style={{ display: \"flex\", flex: 1, marginRight: \"30px\" }}>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Entidad</th>\r\n                      <th>Estado</th>\r\n                      <th>Fecha de Creación</th>\r\n                      <th>Grupo</th>\r\n                      <th>Creada por</th>\r\n                      <th>Acciones</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      listCatRef?.current?.map(item => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{item.DescripcionCategoria}</td>\r\n                            <td>{item.EstadoCategoria == \"Activo\" ? <span style={{ color: \"green\" }}>■</span> : <span style={{ color: \"red\" }}>■</span>} {item.EstadoCategoria}</td>\r\n                            <td>{item.FechaCreacion}</td>\r\n                            <td>{item.DescripcionGrupo}</td>\r\n                            <td>{item.UsuarioCreo}</td>\r\n                            <td>\r\n                              <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => changeEntityStatus(item.IdCategoria, \"STA\")}>Cambiar estado</button>\r\n                                <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => changeEntityStatus(item.IdCategoria, \"UPD\")}>Actualizar</button>\r\n                              </div>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <Dialog\r\n                isVisible={showModal}\r\n                onBackdropPress={() => setShowModal(false)}\r\n                showDropShadow={true}>\r\n                <div style={{ padding: '10px' }}>\r\n                  <h3>Nueva Categoría</h3>\r\n                  <div className=\"app-hr\"></div>\r\n                  <div >\r\n                    <p>Nombre de la categoria: </p>\r\n                    <input\r\n                      value={categoria}\r\n                      onChange={e => setCategoria(e.target.value)}\r\n                    />\r\n                    <Button\r\n                      style={{ marginLeft: '30px' }}\r\n                      value=\"Guardar\"\r\n                      onClick={addItem}\r\n                      icon={<i className=\"icons10-save\"></i>} />\r\n                  </div>\r\n                </div>\r\n              </Dialog>\r\n            </NavPageContainer>\r\n          </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Categoria","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\asignar\\index.js",["228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],"/**\r\n * @file Componente - Asignación\r\n * @author Christopher Ortiz\r\n * @namespace Asignación\r\n * @description Los equipos deben ser asignados a los empleados, esta pantalla es la encargada de realizar las asignaciones a cada uno de ellos.\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link, InputText, NavPageContainerRight, LinkCompound, Button, RadioButton } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport RightMenu from '../../components/RightMenu'\r\nimport Select from 'react-select';\r\nimport { useMasterState } from '../../stores/MasterStore'\r\nimport { useAuthState } from '../../stores/AuthStore';\r\nimport useState from 'react-usestateref'\r\nimport Modal from '../../components/Modal';\r\nimport '@trendmicro/react-modal/dist/react-modal.css';\r\nimport { triggerBase64Download } from 'react-base64-downloader'\r\n\r\nconst Asignar = () => {\r\n\r\n/**\r\n * useMasterState Manejador de estado del color del sistema\r\n * @function useMasterState\r\n * @memberof MasterState\r\n * @return masterState {Object}\r\n * @inner\r\n */\r\n  const masterState = useMasterState();\r\n/**\r\n * setShowModal Manejador de estados de las credenciales del usuario\r\n * @function useAuthState\r\n * @memberof AuthState\r\n * @return authState {Object}\r\n * @inner\r\n */\r\n  const authState = useAuthState();\r\n  const dValue = {\r\n    value: 0,\r\n    label: \"\"\r\n  }\r\n\r\n/**\r\n * setControls Hook encargado de traer los controles o los campos de cada entidad\r\n * @function setControls\r\n * @memberof Asignación\r\n * @return controls {Array}\r\n * @inner\r\n */\r\n  const [controls, setControls] = React.useState([]);\r\n/**\r\n * setLoading Hook encargado de controlar el estado de carga de los controles o los campos de cada entidad\r\n * @function setLoading\r\n * @memberof Asignación\r\n * @return loading {boolean}\r\n * @inner\r\n */\r\n  const [loading, setLoading] = React.useState(true)\r\n/**\r\n * setComputadoras Hook encargado de traer las computadoras registradas en la base de datos\r\n * @function setComputadoras\r\n * @memberof Asignación\r\n * @return computadoras {Array}\r\n * @inner\r\n */\r\n  const [computadoras, setComputadoras] = React.useState([]);\r\n/**\r\n * setEmployeeDatos Hook encargado de traer los datos de los empleados en la base de datos\r\n * @function setEmployeeDatos\r\n * @memberof Asignación\r\n * @return employeeDatos {Array}\r\n * @inner\r\n */\r\n  const [employeeDatos, setEmployeeDatos] = React.useState([])\r\n/**\r\n * setEmployee Hook encargado de almacenar los datos del empleado seleccionado en el select\r\n * @function employee\r\n * @memberof Asignación\r\n * @return employee {Object}\r\n * @inner\r\n */\r\n  const [employee, setEmployee] = React.useState(null);\r\n/**\r\n * setSelectedComputadora Hook encargado de almacenar los datos de la computadora seleccionada en el select\r\n * @function selectedComputadora\r\n * @memberof Asignación\r\n * @return selectedComputadora {Object}\r\n * @inner\r\n */\r\n  const [selectedComputadora, setSelectedComputadora, selectedComputadoraRef] = useState(null);\r\n/**\r\n * setSelectedDataPC Hook encargado de almacenar los datos de la computadora seleccionada en el select\r\n * @function selectedDataPC\r\n * @memberof Asignación\r\n * @return selectedDataPC {Object}\r\n * @inner\r\n */\r\n  const [selectedDataPC, setSelectedDataPC, selectedDataPCRef] = useState(null);\r\n/**\r\n * setStatusComputadora Hook encargado de conocer el estado de la computadora (Sin asignar, asignada, en mantenimiento, no disponible)\r\n * @function setStatusComputadora\r\n * @memberof Asignación\r\n * @return statusComputadora {Array}\r\n * @inner\r\n */\r\n  const [statusComputadora, setStatusComputadora, statusComputadoraRef] = useState(null);\r\n/**\r\n * setSelectedEmployee Hook encargado de almacenar los datos del empleado seleccionado en el select\r\n * @function setSelectedEmployee\r\n * @memberof Asignación\r\n * @return selectedEmployee {Array}\r\n * @inner\r\n */\r\n  const [selectedEmployee, setSelectedEmployee, selectedEmployeeRef] = useState(null);\r\n/**\r\n * setFilteredComputer Hook encargado de almacenar los datos de la computadora filtrada en el select\r\n * @function setFilteredComputer\r\n * @memberof Asignación\r\n * @return filteredComputer {Array}\r\n * @inner\r\n */\r\n  const [filteredComputer, setFilteredComputer, filteredComputerRef] = useState(null);\r\n/**\r\n * setFilteredEmployee Hook encargado de traer los datos del empleado filtrado en el selected\r\n * @function setFilteredEmployee\r\n * @memberof Asignación\r\n * @return filteredEmployee {Object}\r\n * @inner\r\n */\r\n  const [filteredEmployee, setFilteredEmployee, filteredEmployeeRef] = useState(null);\r\n/**\r\n * setDisableEmployee Hook que maneja si los botones de asignar están deshabilitados\r\n * @function setDisableEmployee\r\n * @memberof Asignación\r\n * @return disableEmployee {boolean}\r\n * @inner\r\n */\r\n  const [disableEmployee, setDisableEmployee, disableEmployeeRef] = useState(true);\r\n/**\r\n * setModalAsi Hook encargado de manejar el estado de la ventana modal de asignación\r\n * @function setModalAsi\r\n * @memberof Asignación\r\n * @return modalAsi {boolean}\r\n * @inner\r\n */\r\n  const [modalAsi, setModalAsi] = React.useState(false);\r\n/**\r\n * setModalAsi Hook encargado de manejar el estado de la ventana modal de mantenimiento\r\n * @function setModalMante\r\n * @memberof Asignación\r\n * @return modalMante {boolean}\r\n * @inner\r\n */\r\n  const [modalMante, setModalMante] = React.useState(false);\r\n/**\r\n * setModalCancel Hook encargado de manejar el estado de la ventana modal de cambio de estado\r\n * @function setModalCancel\r\n * @memberof Asignación\r\n * @return modalCancel {boolean}\r\n * @inner\r\n */\r\n  const [modalCancel, setModalCancel] = React.useState(false);\r\n/**\r\n * setMantenimientoTipo Hook encargado de manejar el tipo de mantenimiento que ha seleccionado el usuario\r\n * @function setMantenimientoTipo\r\n * @memberof Asignación\r\n * @return mantenimientoTipo {Object}\r\n * @inner\r\n */\r\n  const [mantenimientoTipo, setMantenimientoTipo, mantenimientoTipoRef] = useState(null);\r\n/**\r\n * setObservacionesMantenimiento Hook encargado de manejar las observaciones del mantenimiento\r\n * @function setObservacionesMantenimiento\r\n * @memberof Asignación\r\n * @return observacionesMantenimiento {string}\r\n * @inner\r\n */\r\n  const [observacionesMantenimiento, setObservacionesMantenimiento, observacionesMantenimientoRef] = useState(null);\r\n/**\r\n * setModalImg Hook encargado de manejar el modal de Imagen\r\n * @function setModalImg\r\n * @memberof Asignación\r\n * @return modalImg {boolean}\r\n * @inner\r\n */\r\n  const [modalImg, setModalImg] = useState(false);\r\n/**\r\n * setCurrentImage Hook encargado de setear la imagen que se va a mostrar en el modal\r\n * @function setCurrentImage\r\n * @memberof Asignación\r\n * @return currentImage {boolean}\r\n * @inner\r\n */\r\n  const [currentImage, setCurrentImage, currentImageRef] = useState(null);\r\n/**\r\n * setDetallesAsi Hook encargado de manejar los detalles de la asignación\r\n * @function setDetallesAsi\r\n * @memberof Asignación\r\n * @return detallesAsi {string}\r\n * @inner\r\n */\r\n  const [detallesAsi, setDetallesAsi, detallesAsiRef] = useState(\"\");\r\n/**\r\n * setIncluyeMochila Hook encargado de manejar si durante la asignación se le dará mochila\r\n * @function setIncluyeMochila\r\n * @memberof Asignación\r\n * @return incluyeMochila {boolean}\r\n * @inner\r\n */\r\n  const [incluyeMochila, setIncluyeMochila, incluyeMochilaRef] = useState(false);\r\n/**\r\n * setIncluyeMouse Hook encargado de manejar si durante la asignación se le dará mouse\r\n * @function setIncluyeMouse\r\n * @memberof Asignación\r\n * @return incluyeMouse {boolean}\r\n * @inner\r\n */\r\n  const [incluyeMouse, setIncluyeMouse, incluyeMouseRef] = useState(false);\r\n/**\r\n * setIncluyeTeclado Hook encargado de manejar si durante la asignación se le dará teclado\r\n * @function setIncluyeTeclado\r\n * @memberof Asignación\r\n * @return incluyeTeclado {boolean}\r\n * @inner\r\n */\r\n  const [incluyeTeclado, setIncluyeTeclado, incluyeTecladoRef] = useState(false);\r\n/**\r\n * setIncluyeCargador Hook encargado de manejar si durante la asignación se le dará cargador\r\n * @function setIncluyeCargador\r\n * @memberof Asignación\r\n * @return incluyeCargador {boolean}\r\n * @inner\r\n */\r\n  const [incluyeCargador, setIncluyeCargador, incluyeCargadorRef] = useState(false);\r\n/**\r\n * setIncluyeWebcam Hook encargado de manejar si durante la asignación se le dará webcam\r\n * @function setIncluyeWebcam\r\n * @memberof Asignación\r\n * @return incluyeWebcam {boolean}\r\n * @inner\r\n */\r\n  const [incluyeWebcam, setIncluyeWebcam, incluyeWebcamRef] = useState(false);\r\n/**\r\n * setDefaultValue Hook encargado de asignar un valor para limpiar los selects luego de una operación de actualización o registro\r\n * @function setDefaultValue\r\n * @memberof Asignación\r\n * @return defaultValue {Object}\r\n * @inner\r\n */\r\n  const [defaultValue, setDefaultValue, defaultValueRef] = useState(dValue);\r\n/**\r\n * setSelectEq Hook encargado limpiar los inputs luego de una operación de actualización o registro\r\n * @function setSelectEq\r\n * @memberof Asignación\r\n * @return selectEq {Object}\r\n * @inner\r\n */\r\n  const [selectEq, setSelectEq, selectEqRef] = useState(null);\r\n/**\r\n * setSelectEm Hook encargado limpiar los inputs luego de una operación de actualización o registro\r\n * @function setSelectEm\r\n * @memberof Asignación\r\n * @return selectEm {Object}\r\n * @inner\r\n */\r\n  const [selectEm, setSelectEm, selectEmRef] = useState(null);\r\n/**\r\n * setDummy Hook encargado de renderizar un componente para actualizar sus datos\r\n * @function setDummy\r\n * @memberof Asignación\r\n * @return dummy {boolean}\r\n * @inner\r\n */\r\n  const [dummy, setDummy] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    getAllComputersRegistered()\r\n    getAllEmployeeDetails()\r\n  }, [dummy])\r\n\r\n  const getControls = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME +\"control\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          label: ele.CaracteristicaDescripcion,\r\n          type: ele.DescripcionTipo,\r\n          placeholder: \"Ingrese \" + ele.CaracteristicaDescripcion,\r\n          tooltip: ele.CaracteristicaDescripcion\r\n        }\r\n        arre.push(obj)\r\n      })\r\n      console.log(arre)\r\n      setControls(arre)\r\n      setLoading(false)\r\n\r\n      console.log(controls)\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * getAllComputersRegistered Función encargada de obtener todos los equipos registrados\r\n * @function getAllComputersRegistered\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getAllComputersRegistered = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"control/equipos\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arrayComputadoras = []\r\n      result.forEach(ele => {\r\n        var objComputadora = {\r\n          label: \"\",\r\n          value: \"\"\r\n        }\r\n        objComputadora.value = ele.IdEquipo;\r\n        switch (ele.DescripcionEstado) {\r\n          case \"Asignada\":\r\n            objComputadora.label = ele.Equipo + \" 🟢\";\r\n            break;\r\n          case \"En mantenimiento\":\r\n            objComputadora.label = ele.Equipo + \" 🟡\";\r\n            break;\r\n          case \"No disponible\":\r\n            objComputadora.label = ele.Equipo + \" 🔴\";\r\n            break;\r\n          case \"Sin asignar\":\r\n            objComputadora.label = ele.Equipo + \" 🔵\";\r\n            break;\r\n        }\r\n        arrayComputadoras.push(objComputadora)\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    setComputadoras(arrayComputadoras)\r\n    // setLoading(false)\r\n  }\r\n/**\r\n * handleChangeComputadora Función encargada de gestionar el cambio del select de las computadoras\r\n * @function getAllComputersRegistered\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleChangeComputadora = async (e) => {\r\n    //var auxArray = [];\r\n    //auxArray = computadoras.filter(ele => ele.value == e.value)\r\n    setSelectedComputadora(e.value)\r\n    setSelectEq(e)\r\n    console.log(e)\r\n    var label = e.label\r\n    var label2 = label.substring(0, label.length - 1);\r\n    setSelectedDataPC(label.slice(0, -2))\r\n    await getComputerDetails(e.value)\r\n    await checkComputerStatus()\r\n\r\n  }\r\n/**\r\n * handleChangeEmployee Función encargada de gestionar el cambio del select de los empleados\r\n * @function handleChangeEmployee\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleChangeEmployee = async (e) => {\r\n    var label = e.label\r\n    setSelectEm(e)\r\n    setFilteredEmployee(label)\r\n    setSelectedEmployee(e.value)\r\n  }\r\n/**\r\n * getAllEmployeeDetails Función encargada de traer datos espcíficos de los empleados\r\n * @function getAllEmployeeDetails\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getAllEmployeeDetails = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"employee/details\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arrayEmpleados = []\r\n      var arraySelect = []\r\n      result.forEach(ele => {\r\n        var objEmpleados = {\r\n          label: ele.NombreEmpleado,\r\n          value: ele.IdEmpleado,\r\n          area: ele.DescripcionArea,\r\n          sucursal: ele.NombreSucursal,\r\n          ciudad: ele.NombreCiudad\r\n        }\r\n        //  objEmpleados.value = ele.IdEquipo;\r\n        var obj = {\r\n          label: ele.NombreEmpleado,\r\n          value: ele.IdEmpleado\r\n        }\r\n        arrayEmpleados.push(objEmpleados)\r\n        arraySelect.push(obj)\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    setEmployeeDatos(arraySelect)\r\n    setEmployee(arrayEmpleados)\r\n    setLoading(false)\r\n  }\r\n/**\r\n * getComputerDetails Función encargada de traer los datos de las computadoras\r\n * @function getComputerDetails\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getComputerDetails = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"machines/\" + selectedComputadoraRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      setFilteredComputer(result);\r\n      console.log(result)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * checkComputerStatus Función encargada de consultar el estado actual de la computadora\r\n * @function checkComputerStatus\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const checkComputerStatus = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"assignment/status/\" + selectedComputadoraRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      console.warn(result)\r\n      setStatusComputadora(result[0]);\r\n      if (result[0].TipoEstado == 1) {\r\n        setDisableEmployee(false)\r\n      } else {\r\n        setDisableEmployee(true)\r\n      }\r\n      //console.log(result)\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * changeComputerStatus Función encargada de cambiar el estado de la computadora\r\n * @function changeComputerStatus\r\n * @memberof Asignación\r\n * @async\r\n * @param {int} status\r\n * @return void\r\n * @inner\r\n */\r\n  const changeComputerStatus = async (status) => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"machines/status/\" + selectedComputadoraRef.current, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          TipoEstado: status\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      setSelectEm(dValue);\r\n      setSelectEq(dValue);\r\n      setFilteredComputer(null)\r\n      if (status == 1 || status == 4)\r\n        alert(\"Cambio de estado exitoso\")\r\n      if (status == 4 || status == 2) {\r\n        getAllComputersRegistered()\r\n        getAllEmployeeDetails()\r\n      }\r\n      //window.location.reload()\r\n      setDummy(!dummy)\r\n      setDefaultValue(dValue);\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * handleSaveAssignment Función encargada de gestionar el proceso de guardar una asignación\r\n * @function handleSaveAssignment\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleSaveAssignment = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"assignment\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          IdEmpleado: selectedEmployee,\r\n          IdEquipo: selectedComputadoraRef.current,\r\n          DetalleAsignacion: detallesAsi,\r\n          IncluyeMochila: incluyeMochila,\r\n          IncluyeMouse: incluyeMouse,\r\n          IncluyeCargador: incluyeCargador,\r\n          IncluyeTeclado: incluyeTeclado,\r\n          IncluyeWebCam: incluyeWebcam,\r\n          UsuarioAsigna: authState.me.get().username\r\n        })\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      changeComputerStatus(2)\r\n      getAllComputersRegistered()\r\n      setSelectEm(dValue);\r\n      setSelectEq(dValue);\r\n      setFilteredComputer(null)\r\n      alert(\"Asignación exitosa\")\r\n      setModalAsi(false)\r\n      setDetallesAsi(\"\")\r\n      setIncluyeCargador(false)\r\n      setIncluyeMochila(false)\r\n      setIncluyeMouse(false)\r\n      setIncluyeTeclado(false)\r\n      setIncluyeWebcam(false)\r\n\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n/**\r\n * handleShowAsiModal Función encargada de gestionar el proceso de mostrar el modal de asignación\r\n * @function handleShowAsiModal\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleShowAsiModal = () => {\r\n    if (filteredEmployeeRef.current) {\r\n      setModalAsi(true)\r\n    } else {\r\n      return alert(\"Debes seleccionar un empleado para asignar el equipo\")\r\n    }\r\n  }\r\n/**\r\n * handleRemoveAssignment Función encargada de gestionar el proceso de remover una asignación\r\n * @function handleRemoveAssignment\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleRemoveAssignment = async () => {\r\n    try {\r\n      await changeComputerStatus(1)\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"assignment/remove/\" + selectedComputadoraRef.current, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      //alert(\"Desasignación exitosa\")\r\n      //changeComputerStatus(1)\r\n      await deleteAssignmentRow()\r\n      getAllComputersRegistered()\r\n      // setModalDes(false)\r\n\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n    setDummy(!dummy)\r\n    setDefaultValue(dValue)\r\n    //window.location.reload()\r\n  }\r\n/**\r\n * handleSaveMaintenance Función encargada de guardar los detalles de un mantenimiento\r\n * @function handleSaveMaintenance\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleSaveMaintenance = async () => {\r\n    if (observacionesMantenimientoRef.current) {\r\n      if (mantenimientoTipoRef.current) {\r\n        try {\r\n          const response = await fetch(process.env.REACT_APP_HOME + \"maintenance\", {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              IdEquipo: selectedComputadoraRef.current,\r\n              ObservacionesMantenimiento: observacionesMantenimiento,\r\n              IdTipoMantenimiento: mantenimientoTipoRef.current\r\n            })\r\n          })\r\n          const result = await response.json()\r\n          console.log(result)\r\n          changeComputerStatus(3)\r\n          setSelectEm(dValue);\r\n          setSelectEq(dValue);\r\n          getAllComputersRegistered()\r\n          alert(\"Mantenimiento registrados exitosamente\")\r\n          setModalMante(false)\r\n          setStatusComputadora(3);\r\n          setMantenimientoTipo(null)\r\n          setObservacionesMantenimiento(\"\")\r\n          setDummy(!dummy)\r\n          setDefaultValue(dValue)\r\n          //window.location.reload()\r\n        } catch (error) {\r\n          alert(error)\r\n        }\r\n      } else {\r\n        alert(\"Debes escoger el tipo de mantenimiento\")\r\n      }\r\n    } else {\r\n      alert(\"Debes escribir la razón del mantenimiento\")\r\n    }\r\n  }\r\n/**\r\n * deleteAssignmentRow Función encargada de gestionar el proceso de eliminar una asignación\r\n * @function deleteAssignmentRow\r\n * @memberof Asignación\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const deleteAssignmentRow = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"assignment/\" + selectedComputadoraRef.current, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      console.log(result)\r\n      // alert(\"Asignación eliminada exitosamente\")\r\n      //getAllComputersRegistered()\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> :\r\n          <>\r\n            <NavigationWindow />\r\n            <Modal showOverlay={true} show={modalAsi} onClose={() => setModalAsi(false)} size=\"lg\">\r\n              <Modal.Header>\r\n                <Modal.Title>Asignación de Computadora</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div style={{ display: 'flex' }}>\r\n                  {/* <i className=\"icons10-info\" style={{ color: '#faca2a', fontSize: \"50px\" }} /> */}\r\n                  <div style={{ marginRight: 25, flex: 1 }}>\r\n                    <p>Datos Generales de Asignación</p>\r\n                    <div className='app-hr' />\r\n                    <p>COMPUTADORA: {selectedDataPCRef.current} </p>\r\n                    <p>EMPLEADO: {filteredEmployeeRef.current}</p>\r\n                    <p>FECHA DE ASIGNACIÓN: {new Date().toLocaleDateString()}</p>\r\n                    <p>ASIGNADO POR: {authState.me.get().username}</p>\r\n                  </div>\r\n                  <div style={{ flex: 1, justifyContent: \"center\", display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ margin: \"10px 0px\", justifyContent: \"center\" }}>\r\n                      <label className='app-checkbox'>\r\n                        <input type=\"checkbox\" style={{ marginRight: \"10px\" }} checked={incluyeMochila} onChange={(e) => setIncluyeMochila(e.target.checked)} />\r\n                        Incluye Mochila\r\n                      </label>\r\n                    </div>\r\n                    <div style={{ margin: \"10px 0px\" }}>\r\n                      <label className='app-checkbox'>\r\n                        <input type=\"checkbox\" style={{ marginRight: \"10px\" }} checked={incluyeCargador} onChange={(e) => setIncluyeCargador(e.target.checked)} />\r\n                        Incluye Cargador\r\n                      </label>\r\n                    </div>\r\n                    <div style={{ margin: \"10px 0px\" }}>\r\n                      <label className='app-checkbox'>\r\n                        <input type=\"checkbox\" style={{ marginRight: \"10px\" }} checked={incluyeMouse} onChange={(e) => setIncluyeMouse(e.target.checked)} />\r\n                        Incluye Mouse\r\n                      </label>\r\n                    </div>\r\n                    <div style={{ margin: \"10px 0px\" }}>\r\n                      <label className='app-checkbox'>\r\n                        <input type=\"checkbox\" style={{ marginRight: \"10px\" }} checked={incluyeTeclado} onChange={(e) => setIncluyeTeclado(e.target.checked)} />\r\n                        Incluye Teclado Numérico\r\n                      </label>\r\n                    </div>\r\n                    <div style={{ margin: \"10px 0px\" }}>\r\n                      <label className='app-checkbox'>\r\n                        <input type=\"checkbox\" style={{ marginRight: \"10px\" }} checked={incluyeWebcam} onChange={(e) => setIncluyeWebcam(e.target.checked)} />\r\n                        Incluye WebCam\r\n                      </label>\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                </div>\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div style={{ flex: 1, width: \"100%\" }}>\r\n                    <p>Detalles de la asignacion</p>\r\n                    <div className='app-hr' />\r\n                    <textarea className=\"app-textarea\" style={{ width: \"100%\", resize: \"none\" }} onChange={(e) => setDetallesAsi(e.target.value)} />\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button id=\"btn-asi\" className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={handleSaveAssignment}>Asignar</button>\r\n                <button id=\"btn-cnl\" className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => setModalAsi(false)}>Cancelar</button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n            <Modal showOverlay={true} show={modalMante} onClose={() => setModalMante(false)} size=\"lg\">\r\n              <Modal.Header>\r\n                <Modal.Title>Enviar a mantenimiento</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div style={{ display: 'flex' }}>\r\n                  {/* <i className=\"icons10-info\" style={{ color: '#faca2a', fontSize: \"50px\" }} /> */}\r\n                  <div style={{ marginRight: 25, flex: 1 }}>\r\n                    <p>Datos del Mantenimiento</p>\r\n                    <div className='app-hr' />\r\n                    <p>COMPUTADORA: {selectedDataPCRef.current} </p>\r\n                    <p>FECHA DE ENVIO A MANTENIMIENTO: {new Date().toLocaleDateString()}</p>\r\n                  </div>\r\n                </div>\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div style={{ flex: 1 }}>\r\n                    <div>\r\n                      <p>TIPO DE MANTENIMIENTO</p>\r\n                      <div className='app-hr' />\r\n                    </div>\r\n                    <div style={{ flex: 1, flexDirection: \"row\", display: \"flex\", margin: \"10px 0px\" }}>\r\n                      <div style={{ marginRight: \"15px\" }}>\r\n                        <RadioButton name='mantenimiento' value={1} label='Preventivo' onChange={(e) => setMantenimientoTipo(1)} />\r\n                      </div>\r\n                      <div style={{ marginRight: \"15px\" }}>\r\n                        <RadioButton name='mantenimiento' value={2} label='Correctivo' onChange={(e) => setMantenimientoTipo(2)} />\r\n                      </div>\r\n                      <div style={{ marginRight: \"15px\" }}>\r\n                        <RadioButton name='mantenimiento' value={3} label='Predictivo' onChange={(e) => setMantenimientoTipo(3)} />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div style={{ flex: 1, width: \"100%\" }}>\r\n                    <p>Escriba las razones del mantenimiento</p>\r\n                    <div className='app-hr' />\r\n                    <textarea className=\"app-textarea\" style={{ width: \"100%\", resize: \"none\" }} value={observacionesMantenimiento} onChange={(e) => setObservacionesMantenimiento(e.target.value)} placeholder=\"Detalles del mantenimiento\" />\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={handleSaveMaintenance}>Enviar a mantenimiento</button>\r\n                <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => setModalMante(false)}>Cancelar</button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal showOverlay={true} show={modalCancel}>\r\n              <Modal.Header>\r\n                <Modal.Title>Dar de baja</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div style={{ display: 'flex' }}>\r\n                  <i className=\"icons10-exclamation-mark\" style={{ color: '#faca2a', fontSize: \"70px\" }} />\r\n                  <div style={{ marginLeft: 25, justifyContent: \"center\", alignItems: \"center\", display: \"flex\" }}>\r\n                    <label>Estás a punto de dar de baja esta computadora, ¿estás seguro(a) que deseas continuar?</label>\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button value='Si, quiero dar de baja' onClick={() => { changeComputerStatus(4); setModalCancel(false) }} />\r\n                <Button value=\"No, mantener estado actual\" onClick={() => setModalCancel(false)} />\r\n              </Modal.Footer>\r\n            </Modal>\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n\r\n              <h1>Asignar</h1>\r\n              <p>Asigna equipos a colaboradores.</p>\r\n              <div className=\"app-hr\"></div>\r\n              <div style={{ display: \"flex\", width: \"100%\", marginRight: \"30px\" }}>\r\n                <div style={{ display: \"flex\", width: \"60%\", flexDirection: \"column\" }}>\r\n                  <div style={{ marginTop: \"30px\" }}>\r\n                    <label>Seleccione el equipo: </label>\r\n                    <div style={{ width: \"450px\", marginTop: \"10px\" }}>\r\n                      <Select\r\n                        options={computadoras}\r\n                        onChange={handleChangeComputadora}\r\n                        defaultValue={defaultValueRef.current}\r\n                        value={selectEqRef.current}\r\n                        theme={(theme) => ({\r\n                          ...theme,\r\n                          borderRadius: 0,\r\n                          colors: {\r\n                            ...theme.colors,\r\n                            primary: masterState.get().color,\r\n                            primary25: masterState.get().color\r\n                          },\r\n                        })}\r\n                        inputId=\"select-equipos\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div style={{ marginTop: \"30px\" }}>\r\n                    <label>Seleccione el empleado: </label>\r\n                    <div style={{ width: \"450px\", marginTop: \"10px\" }}>\r\n                      <Select\r\n                        inputId=\"select-empleados\"\r\n                        options={employeeDatos}\r\n                        isDisabled={disableEmployeeRef.current}\r\n                        onChange={handleChangeEmployee}\r\n                        value={selectEmRef.current}\r\n                        theme={(theme) => ({\r\n                          ...theme,\r\n                          borderRadius: 0,\r\n                          colors: {\r\n                            ...theme.colors,\r\n                            primary: masterState.get().color,\r\n                            primary25: masterState.get().color\r\n                          },\r\n                        })}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div style={{ marginTop: \"20px\" }}>\r\n                    <button className='app-button animate primary' id=\"asi-asi\" style={{ marginRight: \"10px\" }} disabled={disableEmployeeRef.current} onClick={handleShowAsiModal}>Asignar</button>\r\n                    <button className='app-button animate primary' id=\"asi-rem\" style={{ marginRight: \"10px\" }} disabled={statusComputadoraRef.current?.TipoEstado != 2 ? true : false} onClick={handleRemoveAssignment}>Remover asignación</button>\r\n                    <button className='app-button animate primary' id=\"asi-mnt\" style={{ marginRight: \"10px\" }} disabled={statusComputadoraRef.current?.TipoEstado == 3 ? true : false} onClick={() => setModalMante(true)}>Enviar a mantenimiento</button>\r\n                    <button className='app-button animate primary' id=\"asi-baj\" style={{ marginRight: \"10px\" }} disabled={statusComputadoraRef.current?.TipoEstado != 1 ? true : false} onClick={() => setModalCancel(true)}>Dar de baja</button>\r\n                  </div>\r\n\r\n                  <div style={{ backgroundColor: \"#eee\", marginTop: \"30px\", padding: \"10px\" }}>\r\n                    {\r\n                      !selectedComputadora ?\r\n                        <>\r\n                          <p>Seleccione una computadora o un empleado para ver información</p>\r\n                        </> : <>\r\n                          {\r\n                            filteredComputerRef.current ?\r\n                              <>\r\n                                {\r\n                                  filteredComputerRef.current.map(ele => {\r\n                                    if (ele.CaracteristicaTipo == 3) {\r\n                                      return (<>\r\n                                        {\r\n                                          ele.Respuesta.length > 1000 ?\r\n                                            <p><span style={{ fontWeight: \"bold\" }}>{ele.CaracteristicaDescripcion}</span>: <a style={{ textDecoration: \"underline\", color: \"blue\" }} onClick={() => { setModalImg(true); setCurrentImage(ele.Respuesta) }}>Ver imagen</a></p>\r\n                                            : <p><span style={{ fontWeight: \"bold\" }}>{ele.CaracteristicaDescripcion}</span>: ---</p>\r\n                                        }\r\n                                        <Modal showOverlay={true} id=\"mdl-img\" show={modalImg} onClose={() => setModalImg(false)}>\r\n                                          <Modal.Header>\r\n                                            <Modal.Title>Visualizador de imágenes</Modal.Title>\r\n                                          </Modal.Header>\r\n                                          <Modal.Body>\r\n                                            <img src={currentImageRef.current} width=\"700px\" height=\"auto\" />\r\n                                          </Modal.Body>\r\n                                          <Modal.Footer>\r\n                                            <Button value='Guardar imagen' onClick={() => { triggerBase64Download(currentImageRef.current, \"IMG-\" + Date.now()) }} />\r\n                                            <Button value=\"Cerrar\" onClick={() => setModalImg(false)} />\r\n                                          </Modal.Footer>\r\n                                        </Modal>\r\n                                      </>)\r\n                                    }\r\n                                    return (\r\n                                      <>\r\n                                        <p><span style={{ fontWeight: \"bold\" }}>{ele.CaracteristicaDescripcion}</span>: {ele.Respuesta}</p>\r\n                                      </>\r\n                                    )\r\n                                  })\r\n                                }\r\n                              </>\r\n                              :\r\n                              <>\r\n                              </>\r\n                          }\r\n                        </>\r\n                    }\r\n                  </div>\r\n\r\n                </div>\r\n                <div style={{ display: \"flex\", width: \"40%\", marginRight: \"40px\" }}>\r\n                  <RightMenu />\r\n                </div>\r\n              </div>\r\n            </NavPageContainer>\r\n          </>\r\n      }\r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default Asignar","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\empleados\\index.js",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288"],"/**\r\n * @file Componente - Configuraciones\r\n * @author Christopher Ortiz\r\n * @namespace Empleados\r\n * @description Pantalla que gestiona los datos relacionados con los empleados\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport { Dialog, Button } from 'react-windows-ui'\r\nimport MaterialTable from 'material-table'\r\nimport \"../empleados/index.css\"\r\nimport Select from 'react-select'\r\nimport Modal from '../../components/Modal';\r\nimport useState from 'react-usestateref'\r\n\r\n\r\nconst Empleado = () => {\r\n\r\n\r\n\r\n  const [listEmployee, setListEmployees, listEmployeeRef] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [modalCancel, setModalCancel] = useState(false)\r\n  const [modalActualizar, setModalActualizar] = useState(false)\r\n  const [keyEdit, setKeyEdit, keyEditRef] = useState()\r\n  const [areas, setAreas] = useState();\r\n  const [cities, setCities] = useState();\r\n  const [selectedCity, setSelectedCity, selectedCityRef] = useState();\r\n  const [selectedArea, setSelectedArea, selectedAreaRef] = useState();\r\n  const [selectedSucursal, setSelectedSucursal, selectedSucursalRef] = useState();\r\n  const [defaultArea, setDefaultArea, defaultAreaRef] = useState();\r\n  const [defaultCity, setDefaultCity, defaultCityRef] = useState();\r\n  const [defaultSucursal, setDefaultSucursal, defaultSucursalRef] = useState();\r\n  const [allSucursales, setAllSucursales, allSucursalesRef] = useState();\r\n  const [sucursales, setSucursales, sucursalesRef] = useState()\r\n  const [modalAdd, setModalAdd] = useState(false)\r\n  const [employeeName, setEmployeeName, employeeRefName] = useState()\r\n  const [employeeEmail, setEmployeeEmail, employeeRefEmail] = useState()\r\n\r\n  useEffect(() => {\r\n    getEmployeesData()\r\n    getCities()\r\n    getAllSucursales()\r\n    getAreas()\r\n  }, [])\r\n\r\n  \r\n/**\r\n * Maneja el cambio para añadir un nuevo empleado.\r\n * @name addItem\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const addItem = async () => {\r\n      if (employeeName && selectedArea && selectedSucursal) {\r\n        if (validarEmail(employeeEmail)) {\r\n        try {\r\n          setLoading(true)\r\n          const response = await fetch(process.env.REACT_APP_HOME + \"employee\", {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ \"NombreEmpleado\": employeeRefName.current, \"IdArea\": selectedArea, \"Email\": employeeRefEmail.current, \"IdSucursal\": selectedSucursal })\r\n          })\r\n          alert(\"El empleado se guardó exitosamente\")\r\n          await getEmployeesData()\r\n          setModalAdd(false)\r\n        } catch (error) {\r\n          alert(\"Ocurrio un error al guardar el empleado\")\r\n        }\r\n      } \r\n    }else {\r\n      alert(\"Asegúrate de llenar todos los datos.\")\r\n    }\r\n  }\r\n\r\n/**\r\n * Función que valida que el correo electrónico sea una entrada válida.\r\n * @name validarEmail\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const validarEmail = (valor) => {\r\n    if (/^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i.test(valor)) {\r\n      return true;\r\n    } else {\r\n      alert(\"La dirección de email es incorrecta.\");\r\n      return false;\r\n    }\r\n  }\r\n\r\n/**\r\n * Maneja los datos de los empleados que se encuentran en la base de datos.\r\n * @name getEmployeesData\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getEmployeesData = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"employee\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setListEmployees(result)\r\n      /*setLoading(false)*/\r\n      // setLoading(true)\r\n      //console.log(result)\r\n      //setListEmployees(response)\r\n    setLoading(true);\r\n    setLoading(false);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * Maneja un listado de las áreas registradas en la base de datos.\r\n * @name getAreas\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getAreas = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"area\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          value: ele.IdArea,\r\n          label: ele.DescripcionArea\r\n        }\r\n        arre.push(obj)\r\n        console.log(obj)\r\n      })\r\n      setAreas(arre)\r\n      setLoading(false)\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * Maneja los datos de las sucursales que se encuentran en la base de datos.\r\n * @name getAllSucursales\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getAllSucursales = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"sucursales/all\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          value: ele.IdSucursal,\r\n          label: ele.NombreSucursal\r\n        }\r\n        arre.push(obj)\r\n        console.log(obj)\r\n      })\r\n      setAllSucursales(arre)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * Tabla que se encarga de filtrar los datos de la tabla\r\n * @name searchTableAll\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const searchTableAll = () => {\r\n    var searchBox = document.getElementById('search-input-table');\r\n    var table = document.getElementById(\"table-products\");\r\n    var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n    var filter = searchBox.value.toUpperCase();\r\n    for (var rowI = 0; rowI < trs.length; rowI++) {\r\n      var tds = trs[rowI].getElementsByTagName(\"td\");\r\n      trs[rowI].style.display = \"none\";\r\n      for (var cellI = 0; cellI < tds.length; cellI++) {\r\n        if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n          trs[rowI].style.display = \"\";\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n/**\r\n * Maneja y cambia el estado de los empleados\r\n * @name handleEntityStatus\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleEntityStatus = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"employee/changestatus/\" + keyEditRef.current, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n      setModalCancel(false)\r\n      await getEmployeesData()\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al cambiar el estado de la entidad \" + error)\r\n    }\r\n  }\r\n/**\r\n * Maneja el modal para dar de baja el empleado\r\n * @name handleChangeStatus\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleChangeStatus = async (e) => {\r\n    setModalCancel(true);\r\n    setKeyEdit(e.target.id);\r\n  }\r\n/**\r\n * Maneja los procesos necesarios para actualizar los datos del empleado\r\n * @name handleActualizarStatus\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleActualizarStatus = async (e) => {\r\n    setModalActualizar(true);\r\n    setKeyEdit(e.target.id);\r\n    var objArea = {\r\n      value: listEmployeeRef.current.filter(x => x.IdEmpleado == e.target.id)[0].IdArea,\r\n      label: listEmployeeRef.current.filter(x => x.IdEmpleado == e.target.id)[0].DescripcionArea\r\n    }\r\n    setDefaultArea(objArea);\r\n    setSelectedArea(objArea.value);\r\n    var objCity = {\r\n      value: listEmployeeRef.current.filter(x => x.IdEmpleado == e.target.id)[0].IdCiudad,\r\n      label: listEmployeeRef.current.filter(x => x.IdEmpleado == e.target.id)[0].NombreCiudad\r\n    }\r\n    setDefaultCity(objCity);\r\n    setSelectedCity(objCity.value);\r\n    var objSucursal = {\r\n      value: listEmployeeRef.current.filter(x => x.IdEmpleado == e.target.id)[0].IdSucursal,\r\n      label: listEmployeeRef.current.filter(x => x.IdEmpleado == e.target.id)[0].NombreSucursal\r\n    }\r\n    setDefaultSucursal(objSucursal);\r\n    setSelectedSucursal(objSucursal.value);\r\n  }\r\n/**\r\n * Maneja los datos de las ciudades registradas en la base de datos\r\n * @name getCities\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getCities = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"city\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          value: ele.IdCiudad,\r\n          label: ele.NombreCiudad\r\n        }\r\n        arre.push(obj)\r\n      })\r\n      setCities(arre)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * Maneja las sucursales filtradas por la ciudad seleccionada\r\n * @name getSucursalesByCity\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getSucursalesByCity = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"sucursales/\" + selectedCityRef.current, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const result = await response.json()\r\n      var arre = []\r\n      result.forEach(ele => {\r\n        var obj = {\r\n          value: ele.IdSucursal,\r\n          label: ele.NombreSucursal\r\n        }\r\n        arre.push(obj)\r\n      })\r\n      setSucursales(arre)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * Actualiza los datos del empleado\r\n * @name handleUpdateEmployee\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleUpdateEmployee = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"employee/\" + keyEditRef.current, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          NombreEmpleado: listEmployeeRef.current.filter(x => x.IdEmpleado == keyEditRef.current)[0].NombreEmpleado,\r\n          Email: listEmployeeRef.current.filter(x => x.IdEmpleado == keyEditRef.current)[0].Email,\r\n          IdArea: selectedAreaRef.current,\r\n          IdCiudad: selectedCityRef.current,\r\n          IdSucursal: selectedSucursalRef.current,\r\n          EstadoEmpleado: listEmployeeRef.current.filter(x => x.IdEmpleado == keyEditRef.current)[0].EstadoEmpleado.data[0]\r\n        })\r\n      })\r\n\r\n      const result = await response.json()\r\n      console.log(result)\r\n      alert(\"Empleado actualizado exitosamente\")\r\n      setModalActualizar(false);\r\n      await getEmployeesData()\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert(\"Ocurrio un error al actualizar el empleado \" + error)\r\n    }\r\n  }\r\n/**\r\n * Maneja el cambio en el input del nombre del empleado\r\n * @name handleInputNameChange\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleInputNameChange = async (e) => {\r\n    var auxArray = [...listEmployee];\r\n    auxArray[e.target.id].NombreEmpleado = e.target.value;\r\n    setListEmployees(auxArray);\r\n  }\r\n/**\r\n * Manejo de cambio en el input del email del empleado\r\n * @name handleInputEmailChange\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleInputEmailChange = async (e) => {\r\n    var auxArray = [...listEmployee];\r\n    auxArray[e.target.id].Email = e.target.value;\r\n    setListEmployees(auxArray);\r\n  }\r\n/**\r\n * Maneja el cambio de estado en el empleado\r\n * @name handleInputEstadoChange\r\n * @function\r\n * @memberof Empleados\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleInputEstadoChange = async (e) => {\r\n    var auxArray = [...listEmployee];\r\n    var value = listEmployeeRef.current[e.target.id]?.EstadoEmpleado?.data[0];\r\n    if (value == 0) value = 1; else value = 0;\r\n    auxArray[e.target.id].EstadoEmpleado.data[0] = value;\r\n    setListEmployees(auxArray);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> :\r\n          <>\r\n            <NavigationWindow />\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n\r\n              <Modal showOverlay={true} show={modalCancel} onClose={() => setModalCancel(false)}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Cambiar estado</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div style={{ display: 'flex' }}>\r\n                    <i className=\"icons10-exclamation-mark\" style={{ color: '#faca2a', fontSize: \"70px\" }} />\r\n                    <div style={{ marginLeft: 25, justifyContent: \"center\", alignItems: \"center\", display: \"flex\" }}>\r\n                      <label>Estás a punto de cambiar el estado de este empleado, ¿estás seguro(a) que deseas continuar?</label>\r\n                    </div>\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value='Si, cambiar estado' onClick={handleEntityStatus} />\r\n                  <Button value=\"No, mantener estado actual\" onClick={() => setModalCancel(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={modalActualizar} onClose={() => setModalActualizar(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Actualizar Empleado</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div style={{ display: 'flex', flex: 1 }}>\r\n                    <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Caracteristica</th>\r\n                          <th>Valor</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {\r\n                          listEmployeeRef.current.map((item, index) => {\r\n                            if (item.IdEmpleado == keyEditRef.current) {\r\n                              return (\r\n                                <>\r\n                                  <tr>\r\n                                    <td>Nombre del Empleado</td>\r\n                                    <td>\r\n                                      <input className='app-input-text' onChange={handleInputNameChange} type=\"text\" id={index} value={listEmployeeRef.current[index].NombreEmpleado} />\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td>Correo electrónico</td>\r\n                                    <td>\r\n                                      <input className='app-input-text' onChange={handleInputEmailChange} type=\"email\" id={index} value={listEmployeeRef.current[index].Email} />\r\n                                    </td>\r\n                                  </tr><tr>\r\n                                    <td>Área</td>\r\n                                    <td>\r\n                                      <Select\r\n                                        options={areas}\r\n                                        defaultValue={defaultAreaRef.current}\r\n                                        onChange={(e) => setSelectedArea(e.value)}\r\n                                      />\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td>Ciudad</td>\r\n                                    <td>\r\n                                      <Select\r\n                                        options={cities}\r\n                                        defaultValue={defaultCityRef.current}\r\n                                        onChange={(e) => { setSelectedCity(e.value); getSucursalesByCity(); }}\r\n                                      />\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td>Sucursal</td>\r\n                                    <td>\r\n                                      <Select\r\n                                        options={sucursalesRef.current}\r\n                                        defaultValue={defaultSucursalRef.current}\r\n                                        // value={sucursalesRef.current[0]}\r\n                                        onChange={(e) => setSelectedSucursal(e.value)}\r\n                                      />\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td>Estado</td>\r\n                                    <td>\r\n                                      {\r\n                                        listEmployeeRef.current[index].EstadoEmpleado.data[0] === 1 ?\r\n                                          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                            <input type=\"checkbox\" id={index} checked style={{ marginRight: \"10px\" }} onChange={handleInputEstadoChange} />\r\n                                            <span> ACTIVO</span>\r\n                                          </div>\r\n                                          :\r\n                                          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                            <input type=\"checkbox\" id={index} style={{ marginRight: \"10px\" }} onChange={handleInputEstadoChange} />\r\n                                            <span> INACTIVO</span>\r\n                                          </div>\r\n                                      }\r\n                                    </td>\r\n                                  </tr>\r\n                                </>\r\n                              )\r\n                            }\r\n                          })\r\n                        }\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value='Actualizar' onClick={handleUpdateEmployee} />\r\n                  <Button value=\"Cancelar\" onClick={() => setModalActualizar(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={modalAdd} onClose={() => setModalAdd(false)} size={\"sm\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Nuevo Empleado</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div style={{ display: 'flex', flex: 1 }}>\r\n                    <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Caracteristica</th>\r\n                          <th>Valor</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>\r\n                            Nombre del Empleado\r\n                          </td>\r\n                          <td>\r\n                            <input className='app-input-text' type=\"text\" value={employeeName} onChange={(e) => setEmployeeName(e.target.value)} required />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            Email\r\n                          </td>\r\n                          <td>\r\n                            <input className='app-input-text' type=\"email\" value={employeeEmail} onChange={(e) => setEmployeeEmail(e.target.value)} />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            Área\r\n                          </td>\r\n                          <td>\r\n                            <Select\r\n                              options={areas}\r\n                              onChange={(e) => setSelectedArea(e.value)}\r\n                            />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            Sucursal\r\n                          </td>\r\n                          <td>\r\n                            <Select\r\n                              options={allSucursales}\r\n                              onChange={(e) => setSelectedSucursal(e.value)}\r\n                            />\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value='Agregar' onClick={addItem} />\r\n                  <Button value=\"Cancelar\" onClick={() => setModalAdd(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <h1>Empleados</h1>\r\n              <p>Añada, modifique o elimine registros de empleados.</p>\r\n              <div className=\"app-hr\"></div>\r\n\r\n              <div style={{ margin: '20px 0' }}>\r\n              </div>\r\n              <div style={{ display: \"flex\", flex: 1, marginRight: \"30px\", flexDirection: \"column\" }}>\r\n                <div style={{ marginTop: \"15px\", display: \"flex\", flex: 1 }}>\r\n                  <div style={{ flex: 1 }}>\r\n                    <label>Buscar</label>\r\n                    <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                  </div>\r\n                  <div style={{ flex: 1, justifyContent: \"flex-end\", display: \"flex\" }}>\r\n                    <button className=\"app-button animate primary\" onClick={() => setModalAdd(true)}>Nuevo empleado</button>\r\n                  </div>\r\n                </div>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Nombre del Empleado</th>\r\n                      <th>Correo electrónico</th>\r\n                      <th>Área</th>\r\n                      <th>Sucursal</th>\r\n                      <th>Ciudad</th>\r\n                      <th>Estado</th>\r\n                      <th>Acciones</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      listEmployee ?\r\n                        listEmployeeRef.current.map((ele, index) => {\r\n                          return (\r\n                            <tr>\r\n                              <td>{ele.NombreEmpleado}</td>\r\n                              <td>{ele.Email}</td>\r\n                              <td>{ele.DescripcionArea}</td>\r\n                              <td>{ele.NombreSucursal}</td>\r\n                              <td>{ele.NombreCiudad}</td>\r\n                              <td>{ele.EstadoEmpleado.data[0] == 1 ? <><span style={{ color: \"green\" }}>■ </span><span>ACTIVO</span></> : <><span style={{ color: \"red\" }}>■ </span><span>INACTIVO</span></>}</td>\r\n                              <td style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                <button className='app-button animate primary' id={ele.IdEmpleado} style={{ marginRight: \"10px\" }} onClick={handleChangeStatus}>Cambiar estado</button>\r\n                                <button className='app-button animate primary' id={ele.IdEmpleado} style={{ marginRight: \"10px\" }} onClick={handleActualizarStatus}>Actualizar</button>\r\n                              </td>\r\n                            </tr>\r\n                          )\r\n                        }) : <></>\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n            </NavPageContainer>\r\n          </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Empleado","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\sucursales\\index.js",["289","290","291","292","293","294","295","296"],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\configuraciones\\index.js",["297","298","299","300","301","302"],"/**\r\n * @file Componente - Configuraciones\r\n * @author Christopher Ortiz\r\n * @namespace Configuraciones\r\n * @description Pantalla que muestra algunas configuraciones del sistema\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, NavPageContainerRight, ColorPickerItem, ColorPickerPalette, LinkCompound } from 'react-windows-ui'\r\nimport React, { useEffect, createContext } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\n\r\nimport MasterPage from '../../components/MasterPage'\r\nimport { Link } from 'react-router-dom'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useMasterState, setThemeColor } from '../../stores/MasterStore'\r\nimport { useAuthState } from '../../stores/AuthStore'\r\n\r\n\r\nconst Configuracion = () => {\r\n\r\n\r\n  const history = useHistory();\r\n  const masterState = useMasterState();\r\n  const authState = useAuthState();\r\n\r\n/**\r\n * Maneja el cambio de color de la aplicación\r\n * @name handleColorHasChanged\r\n * @function\r\n * @memberof Configuraciones\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleColorHasChanged = (color) => {\r\n    setThemeColor(color);\r\n    updateUserPreference(color);\r\n  }\r\n/**\r\n * Actualiza la preferencia de color del usuario\r\n * @name updateUserPreference\r\n * @function\r\n * @memberof Configuraciones\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const updateUserPreference = (color) => {\r\n    try {\r\n      fetch(process.env.REACT_APP_HOME + \"auth/color/\" + authState.me.get().username, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          Color: color\r\n        })\r\n      })\r\n    } catch (error) {\r\n      alert(\"Error al actualizar la configuración\");\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <NavigationWindow />\r\n      <NavPageContainer\r\n        hasPadding={true}\r\n        animateTransition={true}>\r\n\r\n        <h1>Configuraciones del Sistema</h1>\r\n        <p>Configure sus preferencias del sistema.</p>\r\n        <div className=\"app-hr\"></div>\r\n        <div className=\"home-color-picker\">\r\n          <h2>Color del sistema</h2>\r\n          <ColorPickerItem\r\n            //defaultChecked\r\n            name=\"1\"\r\n            color=\"#0078D7\"\r\n            onChange={(color) => handleColorHasChanged(color.target.value)} />\r\n          <ColorPickerItem\r\n            name=\"1\"\r\n            color=\"#6632a8\"\r\n            onChange={(color) => handleColorHasChanged(color.target.value)} />\r\n          <ColorPickerItem\r\n            name=\"1\"\r\n            color=\"#881798\"\r\n            onChange={(color) => handleColorHasChanged(color.target.value)} />\r\n\r\n          <ColorPickerItem\r\n            name=\"1\"\r\n            color=\"#00B294\"\r\n            onChange={(color) => handleColorHasChanged(color.target.value)} />\r\n          <ColorPickerItem\r\n            name=\"1\"\r\n            color=\"#69797E\"\r\n            onChange={(color) => handleColorHasChanged(color.target.value)} />\r\n          <ColorPickerPalette\r\n            name=\"1\"\r\n            color=\"#5ebd06\"\r\n            onChange={(color) => handleColorHasChanged(color.target.value)} />\r\n        </div>\r\n        <div>\r\n          <h2>Más configuraciones</h2>\r\n          <LinkCompound\r\n            style={{ margin: '5px 5px 0 0', width: 300 }}\r\n            to=\"/sucursal\"\r\n            title=\"Sucursales\"\r\n            subtitle=\"Administrar registros de sucursales\"\r\n            icon={<i className=\"icons10-location\"></i>}\r\n            focused={true}\r\n            margin=\"5px 5px 0 0\"\r\n\r\n          />\r\n\r\n          <LinkCompound\r\n            style={{ margin: '5px 5px 0 0', width: 300 }}\r\n            to=\"/ciudades\"\r\n            title=\"Ciudades\"\r\n            subtitle=\"Administrar registros de ciudades\"\r\n            icon={<i className=\"icons10-location-point\"></i>}\r\n            focused={true} />\r\n\r\n          <LinkCompound\r\n            style={{ margin: '5px 5px 0 0', width: 300 }}\r\n            to=\"/areas\"\r\n            title=\"Áreas\"\r\n            subtitle=\"Administrar áreas y departamentos\"\r\n            icon={<i className=\"icons10-fax\"></i>}\r\n            focused={true}\r\n            onClick={() => {\r\n              masterState.set({\r\n                name: \"Area\",\r\n                description: \"Description\"\r\n              })\r\n            }}\r\n          >\r\n\r\n          </LinkCompound>\r\n\r\n          <LinkCompound\r\n            to=\"/mantenimientos\"\r\n            title=\"Mantenimientos\"\r\n            subtitle=\"Registrar mantenimientos de equipos\"\r\n            icon={<i className=\"icons10-services\"></i>}\r\n            focused={true}\r\n            style={{ margin: '5px 5px 0 0', width: 300 }} />\r\n\r\n          <LinkCompound\r\n            to=\"/campos\"\r\n            title=\"Campos\"\r\n            subtitle=\"Añade una nueva entidad al sistema\"\r\n            icon={<i className=\"icons10-puzzle\"></i>}\r\n            focused={true}\r\n            style={{ margin: '5px 5px 0 0', width: 300 }} />\r\n\r\n          <LinkCompound\r\n            to=\"/grupos\"\r\n            title=\"Grupos\"\r\n            subtitle=\"Añade nuevo grupo de productos\"\r\n            icon={<i className=\"icons10-file-explorer\"></i>}\r\n            focused={true}\r\n            style={{ margin: '5px 5px 0 0', width: 300 }} />\r\n        </div>\r\n      </NavPageContainer>\r\n    </>\r\n  );\r\n}\r\nexport default Configuracion;","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\areas\\index.js",["303","304","305","306"],"/**\r\n * @file Componente - Área\r\n * @author Christopher Ortiz\r\n * @namespace Area\r\n * @description Las áreas de la empresa son los departamentos con las que esta cuenta, administra las áreas de la empresa en esta pantalla.\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport { Dialog, Button } from 'react-windows-ui'\r\nimport MaterialTable from 'material-table'\r\nimport Modal from '../../components/Modal';\r\nimport useState from 'react-usestateref'\r\n\r\nconst Area = () => {\r\n\r\n/**\r\n * setShowModal Hook que maneja el modal para actualizar los datos\r\n * @function setShowModal\r\n * @memberof Area\r\n * @return showModal {boolean}\r\n * @inner\r\n */\r\n  const [showModal, setShowModal] = useState(false);\r\n/**\r\n * setListAreas Hook que maneja un listado de áreas registradas en la base de datos\r\n * @function setListAreas\r\n * @memberof Area\r\n * @return listAreas {Object}\r\n * @inner\r\n */\r\n  const [listAreas, setListAreas] = useState()\r\n/**\r\n * setLoading Hook encargado de manejar el loading de la pantalla\r\n * @function setLoading\r\n * @memberof Area\r\n * @return loading {boolean}\r\n * @inner\r\n */\r\n  const [loading, setLoading] = useState(true)\r\n/**\r\n * setDefaultName Hook que maneja el nombre que se está ingresando/actualizando en el modal\r\n * @function setDefaultName\r\n * @memberof Area\r\n * @return defaultName {string}\r\n * @inner\r\n */\r\n  const [defaultName, setDefaultName, defaultNameRef] = useState()\r\n/**\r\n * setSelectedIndex Hook que maneja el índice seleccionado en el select de las áreas\r\n * @function setSelectedIndex\r\n * @memberof Area\r\n * @return selectedIndex {int}\r\n * @inner\r\n */\r\n  const [selectedIndex, setSelectedIndex, selectedIndexRef] = useState()\r\n/**\r\n * setAddModal Hook que maneja el estado del modal para agregar los ítems\r\n * @function setAddModal\r\n * @memberof Area\r\n * @return addModal {boolean}\r\n * @inner\r\n */\r\n  const [addModal, setAddModal] = useState(false)\r\n\r\n  useEffect(() => {\r\n    getAreasData()\r\n  }, [])\r\n\r\n/**\r\n * Agrega una nueva área al sistema\r\n * @name addNewArea\r\n * @function\r\n * @async\r\n * @memberof Area\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const addNewArea = async () => {\r\n    if (defaultName) {\r\n      try {\r\n        setLoading(true)\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"area\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"DescripcionArea\": defaultNameRef.current })\r\n        })\r\n        const result = await response.json()\r\n        console.log(result)\r\n        await getAreasData()\r\n        setAddModal(false)\r\n        setLoading(false)\r\n        setDefaultName()\r\n        alert(\"El area se guardo exitosamente\")\r\n      } catch (error) {\r\n        alert(\"Ocurrio un error al guardar el area\")\r\n      }\r\n    } else {\r\n      alert(\"El nombre del area no puede ir vacio\")\r\n    }\r\n  }\r\n\r\n/**\r\n * Maneja la API para actualizar el área que se ha mostrado en el modal\r\n * @name updateCityRow\r\n * @function\r\n * @async\r\n * @memberof Area\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const updateCityRow = async () => {\r\n    if(defaultName){\r\n      try {\r\n        setLoading(true)\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"area/\"+selectedIndexRef.current, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"DescripcionArea\": defaultNameRef.current })\r\n        })\r\n        const result = await response.json();\r\n        console.log(result)\r\n        await getAreasData()\r\n        setShowModal(false)\r\n        setLoading(false)\r\n        setDefaultName()\r\n        alert(\"El area se actualizó exitosamente\")\r\n      } catch (error) {\r\n        alert(\"Ocurrio un error al actualizar la categoria\")\r\n      }\r\n    }else{\r\n      alert(\"El nombre del area no puede ir vacio\")\r\n    }\r\n  }\r\n\r\n/**\r\n * Función que trae los datos de las áreas registradas en la base de datos\r\n * @name getAreasData\r\n * @function\r\n * @async\r\n * @memberof Area\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const getAreasData = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"area\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n\r\n      setListAreas(result)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Maneja la búsqueda en la tabla, función que se encarga de filtrar los datos de la tabla\r\n * @name searchTableAll\r\n * @function\r\n * @memberof Area\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const searchTableAll = () => {\r\n    var searchBox = document.getElementById('search-input-table');\r\n    var table = document.getElementById(\"table-products\");\r\n    var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n    var filter = searchBox.value.toUpperCase();\r\n    for (var rowI = 0; rowI < trs.length; rowI++) {\r\n      var tds = trs[rowI].getElementsByTagName(\"td\");\r\n      trs[rowI].style.display = \"none\";\r\n      for (var cellI = 0; cellI < tds.length; cellI++) {\r\n        if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n          trs[rowI].style.display = \"\";\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n/**\r\n * Al momento de actualizar, se deben gestionar varios procesos, primero debe setear el nombre del área en el modal, el código de la selección y mostrar el modal\r\n * @name handleUpdateCity\r\n * @function\r\n * @async\r\n * @memberof Area\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleUpdateCity = async(nombre, codigo) => {\r\n    setDefaultName(nombre); \r\n    setSelectedIndex(codigo); \r\n    setShowModal(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> :\r\n          <>\r\n            <NavigationWindow />\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n\r\n              <Modal showOverlay={true} show={showModal} onClose={() => setShowModal(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Actualizar Sucursal</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                  <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Caracteristica</th>\r\n                        <th>Valor</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nombre de la Sucursal</td>\r\n                        <td>\r\n                          <input type=\"text\" className='app-input-text' value={defaultName} onChange={(e) => setDefaultName(e.target.value)} />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value=\"Aceptar\" onClick={updateCityRow} />\r\n                  <Button value=\"Cerrar\" onClick={() => setShowModal(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={addModal} onClose={() => setAddModal(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Nueva Sucursal</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                  <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Caracteristica</th>\r\n                        <th>Valor</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nombre de la Sucursal</td>\r\n                        <td>\r\n                          <input type=\"text\" className='app-input-text' value={defaultName} onChange={(e) => setDefaultName(e.target.value)} />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value=\"Aceptar\" onClick={addNewArea} />\r\n                  <Button value=\"Cerrar\" onClick={() => setAddModal(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n\r\n              <h1>Áreas</h1>\r\n              <p>Añada, modifique o elimine registro de áreas de su empresa</p>\r\n              <div className=\"app-hr\"></div>\r\n              <div style={{ marginTop: \"20px\", marginRight: \"30px\", display: \"flex\", flex: 1, flexDirection: \"column\" }}>\r\n              <div style={{ marginTop: \"15px\", display: \"flex\" }}>\r\n                  <div style={{flex: 1}}>\r\n                  <label>Buscar</label>\r\n                  <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                  </div>\r\n                  <div style={{flex: 1, justifyContent: \"flex-end\", display: \"flex\"}}>\r\n                  <button className='app-button primary animate' onClick={()=> setAddModal(true)}>Nueva Sucursal</button>\r\n                  </div>\r\n                </div>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Ciudad</th>\r\n                      <th>Acciones</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      listAreas?.map((item, index) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{item.DescripcionArea}</td>\r\n                            <td style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                              <button className='app-button primary animate' onClick={() => handleUpdateCity(item.DescripcionArea, item.IdArea)}>Actualizar</button>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n            </NavPageContainer>\r\n          </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Area","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\grupos\\index.js",["307","308","309","310"],"/**\r\n * @file Componente - Grupos\r\n * @author Christopher Ortiz\r\n * @namespace Grupos\r\n * @description Grupos de productos\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport { Dialog, Button } from 'react-windows-ui'\r\nimport MaterialTable from 'material-table'\r\nimport Modal from '../../components/Modal';\r\nimport useState from 'react-usestateref'\r\n\r\nconst Grupo = () => {\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [listAreas, setListAreas] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n  const [defaultName, setDefaultName, defaultNameRef] = useState()\r\n  const [selectedIndex, setSelectedIndex, selectedIndexRef] = useState()\r\n  const [addModal, setAddModal] = useState(false)\r\n\r\n  useEffect(() => {\r\n    getGroupsData()\r\n  }, [])\r\n/**\r\n * Filtra en la tabla buscando por todos los campos\r\n * @function addNewGroup\r\n * @memberof Grupos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const addNewGroup = async () => {\r\n    if (defaultName) {\r\n      try {\r\n        setLoading(true)\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"groups\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"DescripcionGrupo\": defaultNameRef.current })\r\n        })\r\n        const result = await response.json()\r\n        console.log(result)\r\n        await getGroupsData()\r\n        setAddModal(false)\r\n        setLoading(false)\r\n        setDefaultName()\r\n        alert(\"El area se guardo exitosamente\")\r\n      } catch (error) {\r\n        alert(\"Ocurrio un error al guardar el area\")\r\n      }\r\n    } else {\r\n      alert(\"El nombre del area no puede ir vacio\")\r\n    }\r\n  }\r\n/**\r\n * Actualiza los datos de un grupo\r\n * @function updateGroupRow\r\n * @memberof Grupos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const updateGroupRow = async () => {\r\n    if(defaultName){\r\n      try {\r\n        setLoading(true)\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"groups/\"+selectedIndexRef.current, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"DescripcionGrupo\": defaultNameRef.current })\r\n        })\r\n        const result = await response.json();\r\n        console.log(result)\r\n        await getGroupsData()\r\n        setShowModal(false)\r\n        setLoading(false)\r\n        setDefaultName()\r\n        alert(\"El area se actualizó exitosamente\")\r\n      } catch (error) {\r\n        alert(\"Ocurrio un error al actualizar la categoria\")\r\n      }\r\n    }else{\r\n      alert(\"El nombre del area no puede ir vacio\")\r\n    }\r\n  }\r\n\r\n/**\r\n * Obtiene los datos de los grupos\r\n * @function getGroupsData\r\n * @memberof Grupos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const getGroupsData = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"groups\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n\r\n      setListAreas(result)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n/**\r\n * Filtra en la tabla por todos los campos\r\n * @function searchTableAll\r\n * @memberof Grupos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const searchTableAll = () => {\r\n    var searchBox = document.getElementById('search-input-table');\r\n    var table = document.getElementById(\"table-products\");\r\n    var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n    var filter = searchBox.value.toUpperCase();\r\n    for (var rowI = 0; rowI < trs.length; rowI++) {\r\n      var tds = trs[rowI].getElementsByTagName(\"td\");\r\n      trs[rowI].style.display = \"none\";\r\n      for (var cellI = 0; cellI < tds.length; cellI++) {\r\n        if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n          trs[rowI].style.display = \"\";\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n/**\r\n * Función encargada de los procesos que realizan la actualización de un grupo\r\n * @function handleUpdateGroup\r\n * @memberof Grupos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n  const handleUpdateGroup = async(nombre, codigo) => {\r\n    setDefaultName(nombre); \r\n    setSelectedIndex(codigo); \r\n    setShowModal(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> :\r\n          <>\r\n            <NavigationWindow />\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n\r\n              <Modal showOverlay={true} show={showModal} onClose={() => setShowModal(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Actualizar Grupo</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                  <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Caracteristica</th>\r\n                        <th>Valor</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nombre del Grupo</td>\r\n                        <td>\r\n                          <input type=\"text\" className='app-input-text' value={defaultName} onChange={(e) => setDefaultName(e.target.value)} />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value=\"Aceptar\" onClick={updateGroupRow} />\r\n                  <Button value=\"Cerrar\" onClick={() => setShowModal(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={addModal} onClose={() => setAddModal(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Nuevo Grupo</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                  <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Caracteristica</th>\r\n                        <th>Valor</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nombre del Grupo</td>\r\n                        <td>\r\n                          <input type=\"text\" className='app-input-text' value={defaultName} onChange={(e) => setDefaultName(e.target.value)} />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value=\"Aceptar\" onClick={addNewGroup} />\r\n                  <Button value=\"Cerrar\" onClick={() => setAddModal(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n\r\n              <h1>Grupos</h1>\r\n              <p>Añada, modifique o elimine registro de grupos de productos</p>\r\n              <div className=\"app-hr\"></div>\r\n              <div style={{ marginTop: \"20px\", marginRight: \"30px\", display: \"flex\", flex: 1, flexDirection: \"column\" }}>\r\n              <div style={{ marginTop: \"15px\", display: \"flex\" }}>\r\n                  <div style={{flex: 1}}>\r\n                  <label>Buscar</label>\r\n                  <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                  </div>\r\n                  <div style={{flex: 1, justifyContent: \"flex-end\", display: \"flex\"}}>\r\n                  <button className='app-button primary animate' onClick={()=> setAddModal(true)}>Nuevo Grupo</button>\r\n                  </div>\r\n                </div>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Ciudad</th>\r\n                      <th>Acciones</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      listAreas?.map((item, index) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{item.DescripcionGrupo}</td>\r\n                            <td style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                              <button className='app-button primary animate' onClick={() => handleUpdateGroup(item.DescripcionGrupo, item.IdGrupo)}>Actualizar</button>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n            </NavPageContainer>\r\n          </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Grupo","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\ciudades\\index.js",["311","312","313","314"],"/**\r\n * @file Componente - Ciudades\r\n * @author Christopher Ortiz\r\n * @namespace Ciudades\r\n * @description Pantalla que permite la creación de los registros de las ciudades donde la empresa tenga sucursales.\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport { Dialog, Button } from 'react-windows-ui'\r\nimport MaterialTable from 'material-table'\r\nimport Modal from '../../components/Modal';\r\nimport useState from 'react-usestateref'\r\n\r\nconst Ciudad = () => {\r\n\r\n/**\r\n * Hook encargado de mostrar/ocultar el modal para añadir una nueva ciudad\r\n * @function setShowModal\r\n * @memberof Ciudades\r\n * @return types {boolean}\r\n * @inner\r\n */\r\n  const [showModal, setShowModal] = useState(false);\r\n  //const [ciudad, setCiudad] = useState(\"\")\r\n/**\r\n * Hook encargado de traer el listado de ciudades desde la base de datos \r\n * @function setListCities\r\n * @memberof Ciudades\r\n * @return types {Object}\r\n * @inner\r\n */\r\n  const [listCities, setListCities] = useState(\"\")\r\n/**\r\n * Hook encargado de manejar el estado de si está cargando o no el componente\r\n * @function setLoading\r\n * @memberof Ciudades\r\n * @return loading {boolean}\r\n * @inner\r\n */\r\n  const [loading, setLoading] = useState(true)\r\n/**\r\n * Hook encargado de manejar el valor del nombre de la ciudad a añadir/actualizar\r\n * @function setDefaultName\r\n * @memberof Ciudades\r\n * @return defaultName {Object}\r\n * @inner\r\n */\r\n  const [defaultName, setDefaultName, defaultNameRef] = useState()\r\n/**\r\n * Hook encargado de manejar el código de la ciudad a modificar\r\n * @function setSelectedIndex\r\n * @memberof Ciudades\r\n * @return selectedIndex {Object}\r\n * @inner\r\n */\r\n  const [selectedIndex, setSelectedIndex, selectedIndexRef] = useState()\r\n/**\r\n * Hook encargado de manejar el valor del modal de añadir una nueva ciudad\r\n * @function setAddModal\r\n * @memberof Ciudades\r\n * @return addModal {boolean}\r\n * @inner\r\n */\r\n  const [addModal, setAddModal] = useState(false)\r\n\r\n  useEffect(() => {\r\n    getCitiesData()\r\n  }, [])\r\n/**\r\n * Función encargada de insertar una nueva ciudad a la base de datos\r\n * @function addNewCity\r\n * @memberof Ciudades\r\n * @return void\r\n * @inner\r\n */\r\n  const addNewCity = async () => {\r\n    if (defaultName) {\r\n      try {\r\n        setLoading(true)\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"city\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"NombreCiudad\": defaultNameRef.current })\r\n        })\r\n        const result = await response.json()\r\n        console.log(result)\r\n        await getCitiesData()\r\n        setAddModal(false)\r\n        setLoading(false)\r\n        setDefaultName()\r\n        alert(\"La categoria se guardo exitosamente\")\r\n      } catch (error) {\r\n        alert(\"Ocurrio un error al guardar la categoria\")\r\n      }\r\n    } else {\r\n      alert(\"El nombre de la ciudad no puede ir vacio\")\r\n    }\r\n  }\r\n/**\r\n * Función encargada de actualizar una ciudad en la base de datos\r\n * @function updateCityRow\r\n * @memberof Ciudades\r\n * @return void\r\n * @inner\r\n */\r\n  const updateCityRow = async () => {\r\n    if(defaultName){\r\n      try {\r\n        setLoading(true)\r\n        const response = await fetch(process.env.REACT_APP_HOME + \"city/\"+selectedIndexRef.current, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \"NombreCiudad\": defaultNameRef.current })\r\n        })\r\n        const result = await response.json();\r\n        console.log(result)\r\n        await getCitiesData()\r\n        setShowModal(false)\r\n        setLoading(false)\r\n        setDefaultName()\r\n        alert(\"La categoria se actualizó exitosamente\")\r\n      } catch (error) {\r\n        alert(\"Ocurrio un error al actualizar la categoria\")\r\n      }\r\n    }else{\r\n      alert(\"El nombre de la ciudad no puede ir vacio\")\r\n    }\r\n  }\r\n/**\r\n * Función encargada de listar las ciudades registradas en la base de datos\r\n * @function getCitiesData\r\n * @memberof Ciudades\r\n * @return void\r\n * @inner\r\n */\r\n  const getCitiesData = async () => {\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_HOME + \"city\", {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      const result = await response.json()\r\n\r\n      setListCities(result)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n/**\r\n * Maneja la búsqueda en la tabla, función que se encarga de filtrar los datos de la tabla\r\n * @name searchTableAll\r\n * @function\r\n * @memberof Ciudades\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const searchTableAll = () => {\r\n    var searchBox = document.getElementById('search-input-table');\r\n    var table = document.getElementById(\"table-products\");\r\n    var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n    var filter = searchBox.value.toUpperCase();\r\n    for (var rowI = 0; rowI < trs.length; rowI++) {\r\n      var tds = trs[rowI].getElementsByTagName(\"td\");\r\n      trs[rowI].style.display = \"none\";\r\n      for (var cellI = 0; cellI < tds.length; cellI++) {\r\n        if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n          trs[rowI].style.display = \"\";\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n/**\r\n * Función manejadora de los procesos necesarios para actualizar una ciudad\r\n * @name handleUpdateCity\r\n * @function\r\n * @memberof Ciudades\r\n * @inner\r\n * @return {void}\r\n*/\r\n  const handleUpdateCity = async(nombre, codigo) => {\r\n    setDefaultName(nombre); \r\n    setSelectedIndex(codigo); \r\n    setShowModal(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <></> :\r\n          <>\r\n            <NavigationWindow />\r\n            <NavPageContainer\r\n              hasPadding={true}\r\n              animateTransition={true}>\r\n\r\n              <Modal showOverlay={true} show={showModal} onClose={() => setShowModal(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Actualizar Sucursal</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                  <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Caracteristica</th>\r\n                        <th>Valor</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nombre de la Sucursal</td>\r\n                        <td>\r\n                          <input type=\"text\" className='app-input-text' value={defaultName} onChange={(e) => setDefaultName(e.target.value)} />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value=\"Aceptar\" onClick={updateCityRow} />\r\n                  <Button value=\"Cerrar\" onClick={() => setShowModal(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n              <Modal showOverlay={true} show={addModal} onClose={() => setAddModal(false)} size={\"md\"}>\r\n                <Modal.Header>\r\n                  <Modal.Title>Nueva Sucursal</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                  <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Caracteristica</th>\r\n                        <th>Valor</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nombre de la Sucursal</td>\r\n                        <td>\r\n                          <input type=\"text\" className='app-input-text' value={defaultName} onChange={(e) => setDefaultName(e.target.value)} />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button value=\"Aceptar\" onClick={addNewCity} />\r\n                  <Button value=\"Cerrar\" onClick={() => setAddModal(false)} />\r\n                </Modal.Footer>\r\n              </Modal>\r\n\r\n\r\n              <h1>Ciudades</h1>\r\n              <p>Añada, modifique o elimine registro de ciudades</p>\r\n              <div className=\"app-hr\"></div>\r\n              <div style={{ marginTop: \"20px\", marginRight: \"30px\", display: \"flex\", flex: 1, flexDirection: \"column\" }}>\r\n              <div style={{ marginTop: \"15px\", display: \"flex\" }}>\r\n                  <div style={{flex: 1}}>\r\n                  <label>Buscar</label>\r\n                  <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                  </div>\r\n                  <div style={{flex: 1, justifyContent: \"flex-end\", display: \"flex\"}}>\r\n                  <button className='app-button primary animate' onClick={()=> setAddModal(true)}>Nueva Sucursal</button>\r\n                  </div>\r\n                </div>\r\n                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Ciudad</th>\r\n                      <th>Acciones</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      listCities?.map((item, index) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{item.NombreCiudad}</td>\r\n                            <td style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                              <button className='app-button primary animate' onClick={() => handleUpdateCity(item.NombreCiudad, item.IdCiudad)}>Actualizar</button>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n            </NavPageContainer>\r\n          </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Ciudad","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\campos\\index.js",["315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334"],"/**\r\n * @file Componente - Campos\r\n * @author Christopher Ortiz\r\n * @namespace Campos\r\n * @description Pantalla que permite la creación de las entidades, escogiendo el tipo que utilizará.\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, LinkCompound, View, ButtonIcon, InputText, Switch, Dialog, Link, Button } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport \"./styles.css\"\r\nimport { useMasterState } from '../../stores/MasterStore'\r\nimport { useAuthState } from '../../stores/AuthStore'\r\nimport Select from 'react-select'\r\nimport useState from 'react-usestateref'\r\n\r\n\r\nconst Campos = () => {\r\n\r\n    const MAX_FIELDS = 20\r\n    const ITEMS_PER_FIELDS = 5\r\n    const initialArr = new Array(MAX_FIELDS);\r\n    for (var i = 0; i < MAX_FIELDS; i++) {\r\n        initialArr[i] = new Array(ITEMS_PER_FIELDS);\r\n    }\r\n\r\n    const visibleDialogs = new Array(MAX_FIELDS).fill(false);\r\n\r\n/**\r\n * setTypes Hook encargado de traer los controles o los campos de cada entidad\r\n * @function setTypes\r\n * @memberof Campos\r\n * @return types {Array}\r\n * @inner\r\n */\r\n    const [types, setTypes] = React.useState([])\r\n/**\r\n * setLoading Hook encargado de manejar el estado de carga de los controles o los campos de cada entidad\r\n * @function setLoading\r\n * @memberof Campos\r\n * @return types {boolean}\r\n * @inner\r\n */\r\n    const [loading, setLoading] = React.useState(false)\r\n/**\r\n * Hook encargado de traer almacenar los campos que se están creando para la entidad\r\n * @function setCampos\r\n * @memberof Campos\r\n * @return types {Array}\r\n * @inner\r\n */\r\n    const [campos, setCampos] = React.useState([])\r\n/**\r\n * setDialog Hook encargado de traer almacenar los campos que se están creando para la entidad\r\n * @function setDialog\r\n * @deprecated\r\n * @memberof Campos\r\n * @return types {Array}\r\n * @inner\r\n */\r\n    const [dialog, setDialog] = React.useState(visibleDialogs)\r\n/**\r\n * setPropsCampos Hook encargado de almacenar las propiedades que tendrá cada campo\r\n * @function setPropsCampos\r\n * @memberof Campos\r\n * @return types {Array}\r\n * @inner\r\n */\r\n    const [propsCampos, setPropsCampos] = React.useState(initialArr)\r\n/**\r\n * Hook encargado de almacenar el item que mostrará en el modal\r\n * @function setItemModal\r\n * @memberof Campos\r\n * @return itemModal {Object}\r\n * @inner\r\n */\r\n    const [itemModal, setItemModal] = React.useState()\r\n/**\r\n * Hook encargado de almacenar el índice/código del item/elemento que mostrará en el modal\r\n * @function setIndexModal\r\n * @memberof Campos\r\n * @return indexModal {Object}\r\n * @inner\r\n */\r\n    const [indexModal, setIndexModal] = React.useState()\r\n/**\r\n * Hook encargado de almacenar el item que mostrará en el modal\r\n * @function setCategorias\r\n * @memberof Campos\r\n * @return itemModal {Object}\r\n * @inner\r\n */\r\n    const [categorias, setCategorias] = React.useState()\r\n/**\r\n * Hook encargado de almacenar el nombre de la entidad a registrar\r\n * @function setEntityName\r\n * @memberof Campos\r\n * @return entityName {Object}\r\n * @inner\r\n */\r\n    const [entityName, setEntityName] = React.useState()\r\n/**\r\n * Hook encargado de almacenar el id que se acaba de insertar en la base de datos, esto para luego usarlo en la creación de los detalles de esa entidad\r\n * @function setInsertedId\r\n * @memberof insertedId\r\n * @return itemModal {Object}\r\n * @inner\r\n */\r\n    const [insertedId, setInsertedId, insertedIdRef] = useState()\r\n/**\r\n * Hook encargado de almacenar todos los campos a registrar\r\n * @function setAllCampos\r\n * @memberof Campos\r\n * @return allCampos {Object}\r\n * @inner\r\n */\r\n    const [allCampos, setAllCampos] = React.useState()\r\n/**\r\n * Hook encargado de almacena la categoría/grupo a la que pertenece la entidad\r\n * @function setSelectedCategory\r\n * @memberof Campos\r\n * @return selectedCategory {Object}\r\n * @inner\r\n */\r\n    const [selectedCategory, setSelectedCategory] = React.useState()\r\n/**\r\n * Hook encargado de manejar el estado del Dialog de previsualización\r\n * @function setFlag\r\n * @memberof Campos\r\n * @return flag {boolean}\r\n * @inner\r\n */\r\n    const [flag, setFlag] = React.useState(false)\r\n    const masterState = useMasterState()\r\n    const authState = useAuthState()\r\n\r\n/**\r\n * Maneja el evento onChange de los controles o campos de cada entidad para almacenarlos posteriormente\r\n * @function onChangeHandler\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const onChangeHandler = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        let key = event.target.getAttribute('a_key');\r\n        //console.log(name + \"-\"+value+\"-\"+key)\r\n        let allData = [...propsCampos];\r\n        allData[name][key] = value;\r\n        //allData[name].splice(key, 0, value)\r\n        setPropsCampos(allData)\r\n        console.log(propsCampos)\r\n    }\r\n\r\n/**\r\n * Obtiene todos los tipos de datos con los que se pueden crear las entidades\r\n * @function getAllTypes\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const getAllTypes = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"control/types\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            var arre = []\r\n            result.forEach(ele => {\r\n                var obj = {\r\n                    id: ele.IdTipoCampo,\r\n                    type: ele.DescripcionTipo,\r\n                    display: ele.DisplayText,\r\n                    icon: ele.Icono\r\n                }\r\n                arre.push(obj)\r\n                console.log(obj)\r\n            })\r\n            setTypes(arre)\r\n            // setLoading(false)\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Obtiene un listado con los grupos de productos existentes\r\n * @function onChangeHandler\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const getAllCategories = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"groups\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            var arre = []\r\n            result.forEach(ele => {\r\n                var obj = {\r\n                    value: ele.IdGrupo,\r\n                    label: ele.DescripcionGrupo\r\n                }\r\n                arre.push(obj)\r\n                console.log(obj)\r\n            })\r\n            setCategorias(arre)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllTypes()\r\n        getAllCategories()\r\n    }, [])\r\n\r\n/**\r\n * Almacena un nuevo item al arreglo de los campos para luego almacenarlos\r\n * @function addItemCampo\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const addItemCampo = (campoObj) => {\r\n        let oldArray = [...campos]\r\n        oldArray.push(campoObj);\r\n        setCampos([...campos, campoObj])\r\n        let camposP = [...propsCampos];\r\n        let lastIndex = campos.length;\r\n        camposP[lastIndex][4] = campoObj.id;\r\n        setPropsCampos(camposP)\r\n    }\r\n\r\n/**\r\n * Maneja el dialog para la previsualización de los campos a registrar\r\n * @function handleToggleVisible\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const handleToggleVisible = (item, indice) => {\r\n        setFlag(true)\r\n        setItemModal(item)\r\n        setIndexModal(indice)\r\n    }\r\n\r\n/**\r\n * Maneja los valores del campo de requerido\r\n * @function handleToggleSwitch\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const handleToggleSwitch = (indice) => {\r\n        let value = propsCampos[indice]?.[2] ?? false;\r\n        let allData = [...propsCampos];\r\n        if (value) {\r\n            allData[indice][2] = false;\r\n        } else {\r\n            allData[indice][2] = true;\r\n        }\r\n        setPropsCampos(allData);\r\n    }\r\n\r\n/**\r\n * Se encarga de mostrar el control indicado (input text, number, date, long text, select) en la previsualización\r\n * @function showPrevisualization\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const showPrevisualization = (item, index) => {\r\n        if (item?.type != undefined) {\r\n            switch (item.type) {\r\n                case 'text': case 'date':\r\n                    return (<InputText type={item.type} placeholder={propsCampos[index][0]} tooltip={propsCampos[index][1]} />)\r\n                case 'number':\r\n                    return (<InputText type={item.type} placeholder={propsCampos[index][0]} tooltip={propsCampos[index][1]} min={0} />)\r\n                case 'file':\r\n                    return (\r\n                        <>\r\n                            <label htmlFor=\"filePicker\" style={{ background: \"lightgray\", padding: \"5px 10px\" }}>\r\n                                {propsCampos[index][0] ?? \"Escoge un archivo\"}\r\n                            </label>\r\n                            <input id=\"filePicker\" style={{ visibility: \"hidden\" }} type={\"file\"} />\r\n                        </>)\r\n                case 'select':\r\n                    var data = propsCampos[index]?.[3] ?? \"Item1 | Item2 | Item3\"\r\n                    var arrayData = data.split('|')\r\n                    var objData = []\r\n                    arrayData.forEach((ele, indice) => {\r\n                        let obj = {\r\n                            value: indice,\r\n                            label: ele\r\n                        }\r\n                        objData.push(obj);\r\n                    })\r\n                    return (\r\n                        <Select\r\n                            menuPortalTarget={document.body}\r\n                            styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                            options={objData}\r\n                            defaultValue={objData[0]}\r\n                        />\r\n\r\n                    )\r\n                case 'textarea':\r\n                    return (\r\n                        <textarea className='app-textarea' style={{ resize: 'none', width: '350px', height: '150px' }} placeholder={propsCampos[index][0]} tooltip={propsCampos[index][1]} />\r\n                    )\r\n            }\r\n        }\r\n    }\r\n\r\n/**\r\n * Elimina el campo en cuestión de los ítems seleccionados\r\n * @function deleteCampo\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const deleteCampo = (index) => {\r\n        var datosAgregados = [...campos];\r\n        datosAgregados.splice(index, 1)\r\n        setCampos(datosAgregados);\r\n    }\r\n\r\n /**\r\n * Controla la función de subir/bajar nivel de los campos\r\n * @function changeLevelCampo\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const changeLevelCampo = (index, move) => {\r\n        if ((index == 0 && move == -1) || (index == campos.length - 1 && move == 1)) return;\r\n        let newIndex = index + move;\r\n        let camposArray = [...campos]\r\n        let objIndex = camposArray[index];\r\n        let objMoved = camposArray[newIndex];\r\n        camposArray.splice(index, 1, objMoved);\r\n        camposArray.splice(newIndex, 1, objIndex)\r\n        setCampos(camposArray)\r\n    }\r\n\r\n/**\r\n * Función encargada de manejar el guardado de la nueva entidad\r\n * @function handleSaveEntity\r\n * @memberof Campos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n    const handleSaveEntity = async () => {\r\n        try {\r\n            setLoading(true)\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"category\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ \"DescripcionCategoria\": entityName, \"EstadoCategoria\": 1, \"UsuarioCreo\": authState.me.get().username, \"IdGrupo\": selectedCategory })\r\n            })\r\n            /* setEntityName(\"\")\r\n            await getItems()\r\n            setShowModal(false) */\r\n            let res = await response.json();\r\n            console.log(res)\r\n            setInsertedId(res.insertId)\r\n            setLoading(false)\r\n            alert(\"El empleado se guardó exitosamente\")\r\n        } catch (error) {\r\n            alert(\"Ocurrio un error al guardar el empleado\" + error)\r\n        }\r\n    }\r\n/**\r\n * Valida que todos los campos tengan valores antes de guardar la entidad\r\n * @function validateAllFieldsHasName\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const validateAllFieldsHasName = () => {\r\n        let camposArrayAux = [...propsCampos]\r\n        let arrayFiltered = []\r\n        let flag = false;\r\n        camposArrayAux.map((el, index) => {\r\n            if (el[4]) arrayFiltered.push(el)\r\n            //console.log(el)\r\n        })\r\n\r\n        arrayFiltered.map((item) => {\r\n            if (!item[1]) flag = true\r\n        })\r\n        return flag;\r\n    }\r\n/**\r\n * Luego de guardar la entidad, se deben guardar los campos por separado, esta función se encarga de hacerlo\r\n * @function handleSaveAllCampos\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const handleSaveAllCampos = async () => {\r\n        let camposArrayAux = [...propsCampos]\r\n        let arrayFiltered = []\r\n        camposArrayAux.map((el, index) => {\r\n            if (el[4]) arrayFiltered.push(el)\r\n        })\r\n        setAllCampos(arrayFiltered);\r\n\r\n\r\n        arrayFiltered.map((item, index) => {\r\n            try {\r\n                //setLoading(true)\r\n                const response = fetch(process.env.REACT_APP_HOME + \"control\", {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({ \"IdCategoria\": insertedIdRef.current, \"CaracteristicaDescripcion\": item[1], \"Nivel\": index, \"Requerido\": Number(item[2]) ? 1 : 0, \"Placeholder\": item[0], \"Tooltip\": item[1], \"UsuarioCreo\": authState.me.get().username, \"CaracteristicaTipo\": item[4] })\r\n                }).then((res) => {\r\n                    res.json().then((res) => {\r\n                        if (item[4] == 4) {\r\n                            var arrayValues = item[3].split('|');\r\n                            arrayValues.forEach((ele, indice) => {\r\n                                let responseOptions = fetch(process.env.REACT_APP_HOME + \"control/detail\", {\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json'\r\n                                    },\r\n                                    body: JSON.stringify({ \"IdCategoria\": insertedIdRef.current, \"IdCaracteristica\": res.message, \"Valores\": ele, \"Nivel\": indice })\r\n                                }).then((res) => {\r\n                                    console.log(\"Campo añadido\")\r\n                                }).catch((err) => {\r\n                                    console.log(\"Algo salió mal al agregar el campo\" + err)\r\n                                })\r\n                            })\r\n\r\n                        }\r\n                    })\r\n                    /*  */\r\n                }).catch((err) => {\r\n                    console.log(\"Algo salió mal al agregar el campo\" + err)\r\n                })\r\n\r\n\r\n\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        })\r\n\r\n        // alert(\"Campos añadidos exitosamente\")\r\n\r\n    }\r\n/**\r\n * AFunción encargada de limpiar los campos luegos de ser guardados\r\n * @function cleanFields\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const cleanFields = () => {\r\n        setEntityName(\"\")\r\n        setPropsCampos(initialArr)\r\n        setCampos([])\r\n    }\r\n/**\r\n * Función que funciona como manejador de otros métodos de guardado de todos los campos pertenecientes a la entidad\r\n * @function saveAllFields\r\n * @memberof Campos\r\n * @return void\r\n * @inner\r\n */\r\n    const saveAllFields = async () => {\r\n        if (!campos[0]) {\r\n            return alert(\"Debes añadir los campos a tu entidad antes de proseguir\")\r\n        } else {\r\n            if (validateAllFieldsHasName()) {\r\n                return alert(\"El campo del nombre es obligatorio\")\r\n            } else {\r\n                if (!selectedCategory) {\r\n                    return alert(\"Debes seleccionar un grupo de categoría para tu entidad\")\r\n                } else {\r\n                    await handleSaveEntity();\r\n                    await handleSaveAllCampos();\r\n                    cleanFields();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                loading ? <></> : <>\r\n                    <NavigationWindow />\r\n                    <NavPageContainer\r\n                        hasPadding={true}\r\n                        animateTransition={true}>\r\n                        <h1>Entidades</h1>\r\n                        <p>Añade campos y característica para tus entidades.</p>\r\n                        <div className=\"app-hr\"></div>\r\n                        <div style={{ display: 'flex', alignItems: 'center', backgroundColor: '#eee', height: '60px', flexDirection: 'row', marginRight: '50px' }}>\r\n                            <div>\r\n                                <label style={{ margin: ' 0 20px' }}>Nombre de la entidad:</label>\r\n                                <InputText placeholder='Nueva entidad' tooltip='Nueva entidad' onChange={(e) => setEntityName(e.target.value)} />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ margin: ' 0 20px' }}>Categoría:</label>\r\n                            </div>\r\n                            <div style={{ width: '300px' }}>\r\n                                <Select options={categorias}\r\n                                    placeholder=\"Selecciona una categoría\"\r\n                                    onChange={(e) => setSelectedCategory(e.value)}\r\n                                    //styles={{ width: '250px' }} \r\n                                    theme={(theme) => ({\r\n                                        ...theme,\r\n                                        borderRadius: 0,\r\n                                        colors: {\r\n                                            ...theme.colors,\r\n                                            primary: masterState.get().color,\r\n                                            primary25: masterState.get().color\r\n                                        },\r\n                                    })}\r\n                                    menuPortalTarget={document.body}\r\n                                    styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }} />\r\n                            </div>\r\n                            <div style={{ marginLeft: '20px' }}>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    value=\"Guardar entidad\"\r\n                                    //onClick={handleSaveEntity}\r\n                                    onClick={saveAllFields}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div style={{ display: 'flex', height: '100%', padding: '15px', gap: '5px' }}>\r\n                            <div style={{ width: '30%' }}>\r\n                                {\r\n                                    types.map((item, index) => {\r\n                                        return (\r\n                                            <>\r\n                                                <LinkCompound\r\n                                                    to=\"#\"\r\n                                                    focused\r\n                                                    title={item.display}\r\n                                                    onClick={() => addItemCampo(item)}\r\n                                                    style={{ width: '100%', margin: '10px 0px' }}\r\n                                                    icon={<i className={item.icon}></i>}\r\n                                                />\r\n\r\n                                            </>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <div style={{ width: '70%' }}>\r\n                                {\r\n                                    campos.map((item, index) => {\r\n                                        return (\r\n                                            <>\r\n                                                <View\r\n                                                    isVisible={true}\r\n                                                    zIndex={1}\r\n                                                    animationType=\"fade\"\r\n                                                    style={{ height: 180, width: '95%', margin: '10px 0px', backgroundColor: '#EEE', padding: '10px', position: 'relative' }}>\r\n                                                    <div className='view-container'>\r\n                                                        <div style={{ width: \"100%\" }}>\r\n                                                            <span style={{ fontWeight: 'bold' }}>Campo de tipo {item.display.toLowerCase()}</span>\r\n                                                            <ButtonIcon\r\n                                                                icon={<i className=\"icons10-cross\" style={{ color: masterState.get().color }}></i>}\r\n                                                                onClick={() => deleteCampo(index)}\r\n                                                                tooltip=\"Eliminar\"\r\n                                                            />\r\n                                                            <ButtonIcon\r\n                                                                icon={<i className=\"icons10-eye\" style={{ color: masterState.get().color }}></i>}\r\n                                                                onClick={() => handleToggleVisible(item, index)}\r\n                                                                tooltip=\"Previsualizar\"\r\n                                                            />\r\n                                                            <ButtonIcon\r\n                                                                icon={<i className=\"icons10-angle-down\" style={{ color: masterState.get().color }}></i>}\r\n                                                                onClick={() => changeLevelCampo(index, 1)}\r\n                                                                tooltip=\"Bajar nivel\"\r\n                                                            />\r\n                                                            <ButtonIcon\r\n                                                                icon={<i className=\"icons10-angle-up\" style={{ color: masterState.get().color }}></i>}\r\n                                                                onClick={() => changeLevelCampo(index, -1)}\r\n                                                                tooltip=\"Subir nivel\"\r\n                                                            />\r\n\r\n                                                            <br />\r\n                                                        </div>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'nowrap', justifyContent: 'flex-start', alignItems: 'stretch', alignItems: 'flex-start' }}>\r\n                                                            <div style={{ flex: '1 0 auto', alignSelf: 'auto', marginTop: '20px' }}>\r\n                                                                <span style={{ margin: '0px 10px' }}>Nombre: </span>\r\n                                                                <input className='app-input-text' placeholder='Nombre' name={index} a_key={1} onChange={onChangeHandler} value={propsCampos[index]?.[1] ?? \"\"} />\r\n                                                            </div>\r\n                                                            <div style={{ flex: '1 0 auto', alignSelf: 'auto', marginTop: '20px' }}>\r\n                                                                <span style={{ margin: '0 10px' }}>Placeholder: </span>\r\n                                                                <input className='app-input-text' placeholder='Placeholder' name={index} a_key={0} onChange={onChangeHandler} value={propsCampos[index]?.[0] ?? \"\"} />\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'nowrap', alignItems: 'center', marginTop: '10px' }}>\r\n                                                            <div style={{ display: 'flex', marginTop: '20px', alignItems: 'center' }}>\r\n                                                                <span style={{ marginRight: '10px' }}>Requerido: </span>\r\n                                                                <Switch\r\n                                                                    style={{ color: masterState.get().color }}\r\n                                                                    defaultChecked={false}\r\n                                                                    labelOff=\"No\"\r\n                                                                    labelOn='Sí'\r\n                                                                    onChange={() => handleToggleSwitch(index)}\r\n                                                                />\r\n                                                            </div>\r\n\r\n                                                        </div>\r\n\r\n                                                        <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'nowrap', justifyContent: 'flex-start', alignItems: 'center' }}>\r\n                                                            {\r\n                                                                item.type == \"select\" ?\r\n                                                                    <>\r\n                                                                        <span style={{ marginTop: '10px', marginRight: '10px' }}>Valores (separe por barra cada valor): </span>\r\n                                                                        <input className='app-input-text' placeholder='Ej. Item1 | Item2 | Item3' name={index} a_key={3} onChange={onChangeHandler} value={propsCampos[index]?.[3] ?? \"\"} style={{ marginTop: '10px' }} />\r\n                                                                    </> :\r\n                                                                    <></>\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <Dialog\r\n                                                        isVisible={flag}\r\n                                                        onBackdropPress={() => setFlag(false)}\r\n                                                        style={{ height: '300px' }}\r\n                                                        showDropShadow={true}>\r\n                                                        <div style={{ padding: '10px' }}>\r\n                                                            <h3>Previsualización</h3>\r\n                                                            <div className=\"app-hr\"></div>\r\n                                                            <div>\r\n                                                                {\r\n                                                                    showPrevisualization(itemModal, indexModal)\r\n                                                                }\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Dialog>\r\n                                                </View>\r\n\r\n                                            </>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </NavPageContainer>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Campos;","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\Navigation.js",["335","336"],"import React, { useEffect } from 'react'\r\nimport { AppTheme, NavBar, NavBarLink, NavSearchSuggestion } from 'react-windows-ui'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useMasterState } from '../stores/MasterStore'\r\nimport { useAuthState, logout } from '../stores/AuthStore'\r\nimport useState from 'react-usestateref'\r\n\r\nconst NavigationWindow = () => {\r\n\r\n  const [color, setColor, colorRef] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  const masterState = useMasterState();\r\n  const authState = useAuthState();\r\n\r\n  const handlerSignOut = async () => {\r\n    logout();\r\n    history.push(\"/\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    getColorPreference();\r\n  },[])\r\n\r\n  const getColorPreference = async()=> {\r\n    const response = await fetch(process.env.REACT_APP_HOME + \"auth/color/\" + authState.me.get().username, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    const data = await response.json()\r\n    setColor(data[0].Color);\r\n    masterState.set({color : colorRef.current});\r\n    console.log(data)\r\n}\r\n\r\n  return (\r\n    <>\r\n      <AppTheme\r\n        color={color}\r\n        scheme={'light'}\r\n        onColorChange={() => { }}\r\n        onSchemeChange={() => { }}\r\n      />\r\n      <NavBar\r\n        title=\"Kassa\"\r\n        shadowOnScroll={true}>\r\n\r\n        <NavSearchSuggestion\r\n          placeholder=\"Buscar en las páginas..\"\r\n          tooltip=\"Búsqueda\"\r\n          data={[\r\n            { label: 'home', link: '/', icon: <i className=\"icons10-home\"></i> },\r\n            { label: 'asignar', link: '/asignar', icon: <i className=\"icons10-link\"></i> }\r\n          ]}\r\n        />\r\n\r\n        <h1>Módulos</h1>\r\n        <div className=\"app-hr\"></div>\r\n\r\n        <NavBarLink\r\n          to=\"/home\"\r\n          exact={true}\r\n          text=\"Home\"\r\n          icon={<i className='icons10-home'></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/asignar\"\r\n          text=\"Asignar\"\r\n          icon={<i className=\"icons10-link\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/empleado\"\r\n          text=\"Empleado\"\r\n          icon={<i className=\"icons10-user\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/equipo\"\r\n          text=\"Equipos\"\r\n          icon={<i className=\"icons10-notebook\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/computadoras\"\r\n          text=\"Equipo informático\"\r\n          icon={<i className=\"icons10-fax\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/categoria\"\r\n          text=\"Entidades\"\r\n          icon={<i className=\"icons10-parallel-tasks\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/bitacora\"\r\n          text=\"Bitácora\"\r\n          icon={<i className=\"icons10-tasks\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/perfil\"\r\n          text=\"Mi Perfil\"\r\n          icon={<i className=\"icons10-user-settings\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/historial\"\r\n          text=\"Historial de Asignaciones\"\r\n          icon={<i className=\"icons10-clock\"></i>}\r\n        />\r\n\r\n        <NavBarLink\r\n          to=\"/configuraciones\"\r\n          text=\"Configuraciones\"\r\n          icon={<i className=\"icons10-settings\"></i>}\r\n        />\r\n\r\n        <div>\r\n          <li className='app-nav-list-item' onClick={handlerSignOut} >\r\n            <a aria-current=\"page\">\r\n              <i class=\"icons10-shutdown\">\r\n              </i>\r\n              <span>Cerrar sesión</span></a>\r\n          </li>\r\n        </div>\r\n\r\n      </NavBar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NavigationWindow;","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\stores\\MasterStore.js",["337"],"import { createState, useState } from '@hookstate/core';\r\n\r\n\r\nlet colorValue;\r\nconst initialState = {\r\n    color: \"#16ab9c\"\r\n}\r\n\r\n/* const getColorPreference = async()=> {\r\n    const response = await fetch(process.env.REACT_APP_HOME + \"auth/color/\" + authState.me.get().username, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    const data = await response.json()\r\n    colorValue = data.Color;\r\n    console.log(data)\r\n    return data\r\n} */\r\n\r\n\r\nconst masterState = createState(initialState);\r\n\r\nexport const setThemeColor = (color) => {\r\n    masterState.set({\r\n        color: color\r\n    }) \r\n}\r\n\r\n\r\nexport const useMasterState = () => {\r\n    return useState(masterState);\r\n}","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\stores\\AuthStore.js",[],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\hooks\\useInput.js",[],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\RightMenu.js",[],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\MaterialTable.js",[],["338","339"],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\computadoras\\index.js",["340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378"],"/**\r\n * @file Componente - Ciudades\r\n * @author Christopher Ortiz\r\n * @namespace Computadoras\r\n * @description Pantalla exclusiva para manejar los registros de las computadoras registradas en el sistema\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link, InputText, NavPageContainerRight, LinkCompound, RadioButton, Button } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport RightMenu from '../../components/RightMenu'\r\nimport { useInput } from '../../hooks/useInput'\r\nimport useState from 'react-usestateref'\r\nimport { useMasterState } from '../../stores/MasterStore'\r\nimport MaterialTable from 'material-table'\r\nimport { Table } from 'react-bootstrap'\r\nimport \"../computadoras/index.css\"\r\nimport Modal from '../../components/Modal';\r\nimport { triggerBase64Download } from 'react-base64-downloader'\r\nimport Select from 'react-select'\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Computadora = () => {\r\n\r\n    var initialArr = [20][7];\r\n\r\n    const [controls, setControls] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(true)\r\n    const [tableData, setTableData] = React.useState();\r\n    const [assignmentData, setAssignmentData] = React.useState();\r\n    const [respuesta, setRespuesta, respuestaRef] = useState([])\r\n    const [mode, setMode] = React.useState('T')\r\n    const [showModal, setShowModal] = React.useState(false)\r\n    const [factura, setFactura] = React.useState(false)\r\n    const [id, setId, idRef] = useState()\r\n    const [modalCancel, setModalCancel] = React.useState(false)\r\n    const [modalInfo, setModalInfo] = React.useState(false)\r\n    const [filteredComputer, setFilteredComputer, filteredComputerRef] = useState()\r\n    const [modalImg, setModalImg] = React.useState(false)\r\n    const [currentImage, setCurrentImage] = useState()\r\n    const [modalActualizar, setModalActualizar] = React.useState(false)\r\n    const [infoRaw, setInfoRaw, infoRawRef] = useState()\r\n    const [computerObject, setComputerObject, computerObjectRef] = useState()\r\n    const [options, setOptions, optionsRef] = useState()\r\n\r\n    const columnas = [\r\n        {\r\n            title: 'Id',\r\n            field: 'id',\r\n            hidden: true\r\n        },\r\n        {\r\n            title: 'Equipo',\r\n            field: 'equipo'\r\n        },\r\n        {\r\n            title: 'Estado',\r\n            field: 'estado'\r\n        }\r\n    ]\r\n\r\n    const masterState = useMasterState();\r\n\r\n    useEffect(() => {\r\n        getTableData()\r\n        getAllAssignmentData()\r\n    }, [])\r\n/**\r\n * Obtiene los datos de las computadoras para desplegarla en la tabla\r\n * @name getTableData\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const getTableData = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"control/equipos\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n\r\n            const result = await response.json()\r\n            var arre = []\r\n            result.forEach(ele => {\r\n                var obj = {\r\n                    id: ele.IdEquipo,\r\n                    equipo: ele.Equipo,\r\n                    estado: ele.DescripcionEstado\r\n                }\r\n                arre.push(obj)\r\n            })\r\n            setTableData(arre)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n/**\r\n * Obtiene todos los datos relacionado con las asignaciones de las computadoras\r\n * @name getAllAssignmentData\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const getAllAssignmentData = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"assignment/\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n\r\n            const result = await response.json()\r\n            setAssignmentData(result)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n/**\r\n * Muestra el estado de la computadora \r\n * @name showStateSpan\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const showStateSpan = (state) => {\r\n        switch (state) {\r\n            case \"Sin asignar\":\r\n                return (\r\n                    /*<div style={{ padding: \"5px\", backgroundColor: \"#17A2B8\", width: \"100px\", borderRadius: \"20px\", color: \"white\", fontWeight: \"bold\", justifyContent: \"center\", alignItems: \"items\", display: \"flex\" }}>\r\n                        <span>{state}</span>\r\n                    </div>*/\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        <div style={{ height: \"10px\", width: \"10px\", background: \"red\", borderRadius: \"10px\", marginRight: \"10px\" }}>\r\n                        </div>\r\n                        <span>{state}</span>\r\n                    </div>\r\n                )\r\n            case \"Asignada\":\r\n                return (\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        <div style={{ height: \"10px\", width: \"10px\", background: \"green\", borderRadius: \"10px\", marginRight: \"10px\" }}>\r\n                        </div>\r\n                        <span>{state}</span>\r\n                    </div>\r\n                )\r\n            case \"En mantenimiento\":\r\n                return (\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        <div style={{ height: \"10px\", width: \"10px\", background: \"yellow\", borderRadius: \"10px\", marginRight: \"10px\" }}>\r\n                        </div>\r\n                        <span>{state}</span>\r\n                    </div>\r\n                )\r\n            case \"No disponible\":\r\n                return (\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        <div style={{ height: \"10px\", width: \"10px\", background: \"blue\", borderRadius: \"10px\", marginRight: \"10px\" }}>\r\n                        </div>\r\n                        <span>{state}</span>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n/**\r\n * Maneja la búsqueda en la tabla, función que se encarga de filtrar los datos de la tabla\r\n * @name searchTableAll\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const searchTableAll = () => {\r\n        var searchBox = document.getElementById('search-input-table');\r\n        var table = document.getElementById(\"table-products\");\r\n        var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n        var filter = searchBox.value.toUpperCase();\r\n        for (var rowI = 0; rowI < trs.length; rowI++) {\r\n            var tds = trs[rowI].getElementsByTagName(\"td\");\r\n            trs[rowI].style.display = \"none\";\r\n            for (var cellI = 0; cellI < tds.length; cellI++) {\r\n                if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n                    trs[rowI].style.display = \"\";\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n/**\r\n * Función encargada de convertir el archivo a base64\r\n * @name convertToBase64\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const convertToBase64 = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n    }\r\n/**\r\n * Maneja el cambio de los controles de input (text, number, date, textarea)\r\n * @name handleInputControlValue\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleInputControlValue = async (e) => {\r\n        const file = e.target.files[0];\r\n        const base64 = await convertToBase64(file);\r\n        console.log(base64)\r\n        setFactura(base64)\r\n    }\r\n/**\r\n * Actualiza el estado del mantenimiento de la computadora\r\n * @name updateMaintenanceStatus\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const updateMaintenanceStatus = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"assignment/receive/\" + id, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ FacturaMantenimiento: factura })\r\n            })\r\n\r\n            const result = await response.json()\r\n            //setAssignmentData(result)\r\n            // setLoading(false)\r\n            await updateReceivedFromMaitenance();\r\n            //alert(\"Se ha actualizado el estado del equipo\")\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n            alert(\"Ha ocurrido un error\")\r\n        }\r\n        setShowModal(false)\r\n        await getTableData()\r\n        await getAllAssignmentData()\r\n    }\r\n/**\r\n * Cambia el estado de la computadora según le sea indicado\r\n * @name changeComputerStatus\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const changeComputerStatus = async (status) => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"machines/status/\" + idRef.current, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    TipoEstado: status\r\n                })\r\n            })\r\n            const result = await response.json()\r\n            console.log(result)\r\n            alert(\"Se ha actualizado el estado del equipo\")\r\n            if (status == 4 || status == 1) {\r\n                await deleteAssignmentRow()\r\n                setModalCancel(false);\r\n                await getAllAssignmentData()\r\n                await getTableData()\r\n                // window.location.reload()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Función que se encarga de actualizar el estado del equipo cuando se recibe de mantenimiento\r\n * @name updateReceivedFromMaitenance\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const updateReceivedFromMaitenance = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"machines/receivedcheck/\" + idRef.current, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            console.log(result)\r\n            alert(\"Se ha actualizado el estado del equipo\")\r\n            await getAllAssignmentData()\r\n            await getTableData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Función encargada de eliminar la asignación de la computadora\r\n * @name deleteAssignmentRow\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const deleteAssignmentRow = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"assignment/\" + idRef.current, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            console.log(result)\r\n            // alert(\"Asignación eliminada exitosamente\")\r\n            //getAllComputersRegistered()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Función encargada de obtener los detalles de una computadora según su código\r\n * @name getComputerDetails\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const getComputerDetails = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"machines/\" + idRef.current, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            setFilteredComputer(result);\r\n            console.log(result)\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Función que se encarga de invocar los procesos para obtener los datos necesarios para la visualización de los datos\r\n * @name handleDetailsVisualization\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleDetailsVisualization = async (id) => {\r\n        setId(id)\r\n        await getComputerDetails()\r\n        setModalInfo(true)\r\n    }\r\n/**\r\n * Función que se encarga de actualizar los datos de una computadora\r\n * @name updateComputerInfo\r\n * @function\r\n * @async\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const updateComputerInfo = async (answer, caracteristica) => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"machines/\" + caracteristica, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    Respuesta: answer,\r\n                    IdEquipoIngresado: idRef.current\r\n                })\r\n            })\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Función encargada de gestionar los procesos que se llevan a cabo al actualizar un dato de una computadoras\r\n * @name handleUpdateProcess\r\n * @function\r\n * @async\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleUpdateProcess = async () => {\r\n        try {\r\n            infoRawRef.current.map((elemento) => {\r\n                updateComputerInfo(elemento.Respuesta, elemento.IdCaracteristica)\r\n            })\r\n        } catch (error) {\r\n            return alert(error)\r\n        }\r\n        alert(\"Se ha actualizado la información del equipo\");\r\n        await getAllAssignmentData()\r\n        await getTableData()\r\n        setModalActualizar(false)\r\n    }\r\n/**\r\n * Obtiene la información de una computadora según su código\r\n * @name getComputerInfoRaw\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const getComputerInfoRaw = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"machines/update/\" + idRef.current, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            setInfoRaw(result);\r\n            //console.log(result)\r\n            var arrayObj = [];\r\n            result.map((item) => {\r\n                var indice = item.IdCaracteristica\r\n                var auxArray = []\r\n                for (const [key, value] of Object.entries(item)) {\r\n                    auxArray[key] = value;\r\n                }\r\n                arrayObj.push(auxArray);\r\n            })\r\n            setComputerObject(arrayObj)\r\n            console.log(computerObjectRef.current)\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n/**\r\n * Maneja los procesos que se realizan durante la actualización de una computadora\r\n * @name handleUpdateCity\r\n * @function\r\n * @async\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleUpdateClick = async (id) => {\r\n        setId(id)\r\n        setModalActualizar(true);\r\n        await getOptions()\r\n        await getComputerInfoRaw();\r\n        // console.log(infoRawRef.current)\r\n    }\r\n/**\r\n * Función encargada de manejar los cambios en un input de tipo text, date, number o textarea\r\n * @name handleChangeInputValue\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleChangeInputValue = (e) => {\r\n        var auxArray = [...infoRaw]\r\n        auxArray[e.target.id][\"Respuesta\"] = e.target.value;\r\n        setInfoRaw(auxArray);\r\n        console.log(computerObjectRef.current)\r\n    }\r\n/**\r\n * Maneja los estados de los controles en el modal de actualzación de datos\r\n * @name handleInputControlValueAct\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleInputControlValueAct = async (e) => {\r\n        const file = e.target.files[0];\r\n        const base64 = await convertToBase64(file);\r\n        var auxArray = [...infoRaw]\r\n        auxArray[e.target.id][\"Respuesta\"] = base64;\r\n        setInfoRaw(auxArray);\r\n        console.log(computerObjectRef.current)\r\n        console.log(e)\r\n    }\r\n/**\r\n * Función encargada de responder a los cambios cuando el select cambia de opción\r\n * @name handleSelectHasChanged\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const handleSelectHasChanged = (e) => {\r\n        var auxArray = [...infoRaw]\r\n        auxArray[e.key][\"Respuesta\"] = e.value;\r\n        setInfoRaw(auxArray);\r\n        console.log(infoRawRef.current[e.key])\r\n        console.log(e)\r\n        //console.log(e)\r\n    }\r\n/**\r\n * Función encargada de desplegar el control adecuado según sea el tipo en la base de datos\r\n * @name showControls\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const showControls = (item, index) => {\r\n        var req = item.Requerido.data[0];\r\n        if (req == 1) req = true; else req = false;\r\n        switch (item.caracteristicatipo) {\r\n            case 1: //El elemento es un campo texto\r\n                return (\r\n                    <div>\r\n                        <p>{item.CaracteristicaDescripcion}{req ? <label style={{ color: \"red\" }}>*</label> : <></>}</p>\r\n                        <input className='app-input-text' value={infoRawRef.current[index].Respuesta} id={index} onChange={handleChangeInputValue} required={req} />\r\n                    </div>\r\n                )\r\n            case 2: //El elemento es un campo numérico\r\n                return (\r\n                    <div>\r\n                        <p>{item.CaracteristicaDescripcion}{req ? <label style={{ color: \"red\" }}>*</label> : <></>}</p>\r\n                        <input className='app-input-text' type=\"number\" step={0.01} value={infoRawRef.current[index].Respuesta} onChange={handleChangeInputValue} id={item.IdCaracteristica} required={req} />\r\n                    </div>\r\n                )\r\n            case 5: //El elemento es un campo de fecha\r\n                return (\r\n                    <div>\r\n                        <p>{item.CaracteristicaDescripcion}{req ? <label style={{ color: \"red\" }}>*</label> : <></>}</p>\r\n                        <input className='app-input-text' type=\"date\" value={infoRawRef.current[index].Respuesta} onChange={handleChangeInputValue} id={item.IdCaracteristica} required={req} />\r\n                    </div>\r\n                )\r\n            case 6: //El elemento es un campo de texto largo\r\n                return (\r\n                    <div>\r\n                        <p>{item.CaracteristicaDescripcion}{req ? <label style={{ color: \"red\" }}>*</label> : <></>}</p>\r\n                        <textarea className='app-textarea' type=\"date\" value={infoRawRef.current[index].Respuesta} onChange={handleChangeInputValue} id={item.IdCaracteristica} required={req} />\r\n                    </div>\r\n                )\r\n            case 3: //El elemento es un campo de imagen\r\n                return (\r\n                    <div style={{ margin: \"20px 0px\" }}>\r\n                        <p>{item.CaracteristicaDescripcion}{req ? <label style={{ color: \"red\" }}>*</label> : <></>}</p>\r\n                        <input type=\"file\" id={index} required={req} onChange={handleInputControlValueAct} accept=\"image/*\" />\r\n                        {\r\n                            infoRawRef.current[index].Respuesta.length > 1 ?\r\n                                <img src={infoRawRef.current[index].Respuesta} width=\"100px\" height=\"auto\" style={{ marginLeft: \"20px\" }} /> :\r\n                                <p>Sin información</p>\r\n                        }\r\n\r\n                    </div>\r\n                )\r\n            case 4: //El elemento es un campo de seleccion\r\n                var arrayAux = options.filter(ele => ele.key == item.IdCaracteristica)\r\n                //ar value = \r\n                var dvalue = {\r\n                    value: parseInt(infoRawRef.current[index].Respuesta),\r\n                    label: infoRawRef.current[index].OpcionDescripcion\r\n                }\r\n                return (\r\n                    <div style={{ margin: \"15px 0px\" }}>\r\n                        <p>{item.CaracteristicaDescripcion}{req ? <label style={{ color: \"red\" }}>*</label> : <></>}</p>\r\n                        <div style={{ margin: \"10px 0\" }}>\r\n                            <Select\r\n                                id={item.IdCaracteristica}\r\n                                defaultValue={dvalue}\r\n                                menuPortalTarget={document.body}\r\n                                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                                options={arrayAux}\r\n                                onChange={handleSelectHasChanged}\r\n                                theme={(theme) => ({\r\n                                    ...theme,\r\n                                    borderRadius: 0,\r\n                                    colors: {\r\n                                        ...theme.colors,\r\n                                        primary: masterState.get().color,\r\n                                        primary25: masterState.get().color\r\n                                    },\r\n                                })}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n/**\r\n * Función encargada de traer los tipos de datos de la base de datos\r\n * @name getOptions\r\n * @function\r\n * @memberof Computadoras\r\n * @inner\r\n * @return {void}\r\n*/\r\n    const getOptions = async (id) => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"control/options/\" + 1, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const result = await response.json()\r\n            var arre = []\r\n            result.forEach(ele => {\r\n                var obj = {\r\n                    value: ele.IdOpcion,\r\n                    label: ele.OpcionDescripcion,\r\n                    key: ele.IdCaracteristica\r\n                }\r\n                arre.push(obj)\r\n                //console.log(obj)\r\n            })\r\n            setOptions(arre)\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                loading ? <></> :\r\n                    <>\r\n                        <NavigationWindow />\r\n                        <NavPageContainer\r\n                            hasPadding={true}\r\n                            animateTransition={true}>\r\n                            <Modal showOverlay={true} show={showModal} onClose={() => setShowModal(false)}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Recibir de Mantenimiento</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                                    <p>DETALLES DE RECIBIMIENTO</p>\r\n                                    <div className='app-hr' />\r\n                                    <p>FECHA DE RECIBIMIENTO: {new Date().toLocaleDateString()}</p>\r\n                                    <p>FACTURA: </p>\r\n                                    <input type={\"file\"} onChange={handleInputControlValue} />\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button value=\"Aceptar\" onClick={() => updateMaintenanceStatus()} />\r\n                                    <Button value=\"Cerrar\" onClick={() => setShowModal(false)} />\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n\r\n                            <Modal showOverlay={true} show={modalInfo} onClose={() => setModalInfo(false)} size={\"lg\"}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Datos del equipo</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    {/* <img src={currentImageRef.current} width=\"700px\" height=\"auto\" /> */}\r\n                                    <p>DETALLES DEL EQUIPO</p>\r\n                                    <div className='app-hr' />\r\n                                    {\r\n                                        filteredComputerRef.current?.map(ele => {\r\n                                            if (ele.CaracteristicaTipo == 3) {\r\n                                                return (<>\r\n                                                    {\r\n                                                        ele.Respuesta.length > 1000 ?\r\n                                                            <p><span style={{ fontWeight: \"bold\" }}>{ele.CaracteristicaDescripcion}</span>: <a style={{ textDecoration: \"underline\", color: \"blue\" }} onClick={() => { setModalImg(true); setCurrentImage(ele.Respuesta) }}>Ver imagen</a></p>\r\n                                                            : <p><span style={{ fontWeight: \"bold\" }}>{ele.CaracteristicaDescripcion}</span>: ---</p>\r\n                                                    }\r\n                                                    <Modal showOverlay={true} show={modalImg} onClose={() => setModalImg(false)}>\r\n                                                        <Modal.Header>\r\n                                                            <Modal.Title>Visualizador de imágenes</Modal.Title>\r\n                                                        </Modal.Header>\r\n                                                        <Modal.Body>\r\n                                                            <img src={currentImage} width=\"700px\" height=\"auto\" />\r\n                                                        </Modal.Body>\r\n                                                        <Modal.Footer>\r\n                                                            <Button value='Guardar imagen' onClick={() => { triggerBase64Download(currentImage, \"IMG-\" + Date.now()) }} />\r\n                                                            <Button value=\"Cerrar\" onClick={() => setModalImg(false)} />\r\n                                                        </Modal.Footer>\r\n                                                    </Modal>\r\n                                                </>)\r\n                                            }\r\n                                            return (\r\n                                                <>\r\n                                                    <p><span style={{ fontWeight: \"bold\" }}>{ele.CaracteristicaDescripcion}</span>: {ele.Respuesta}</p>\r\n                                                </>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button value=\"Ok\" onClick={() => setModalInfo(false)} />\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n\r\n                            <Modal showOverlay={true} show={modalCancel} onClose={() => setModalCancel(false)}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Dar de baja</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <div style={{ display: 'flex' }}>\r\n                                        <i className=\"icons10-exclamation-mark\" style={{ color: '#faca2a', fontSize: \"70px\" }} />\r\n                                        <div style={{ marginLeft: 25, justifyContent: \"center\", alignItems: \"center\", display: \"flex\" }}>\r\n                                            <label>Estás a punto de dar de baja esta computadora, ¿estás seguro(a) que deseas continuar?</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button value='Si, quiero dar de baja' onClick={() => { changeComputerStatus(4); }} />\r\n                                    <Button value=\"No, mantener estado actual\" onClick={() => setModalCancel(false)} />\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n\r\n                            <Modal showOverlay={true} show={modalActualizar} onClose={() => setModalActualizar(false)} size={\"lg\"}>\r\n                                <Modal.Header>\r\n                                    <Modal.Title>Actualizar equipo</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <div style={{ display: 'flex', flexDirection: \"column\" }}>\r\n                                        <p>DATOS DEL EQUIPO</p>\r\n                                        <div className='app-hr' />\r\n                                        {\r\n                                            infoRawRef.current?.map((item, index) => {\r\n                                                return showControls(item, index)\r\n                                                //  if(item.Respuesta.length > 1000) return;\r\n                                                // return (\r\n                                                //     <>\r\n                                                //         {/* <p><span style={{ fontWeight: \"bold\" }}>{item.CaracteristicaDescripcion}</span>: {item.Respuesta}</p> */}\r\n                                                //         {\r\n                                                //             showControls(item)\r\n                                                //         }\r\n                                                //     </>\r\n                                                // )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button value=\"Actualizar\" onClick={handleUpdateProcess} />\r\n                                    <Button value=\"Cancelar\" onClick={() => setModalActualizar(false)} />\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n\r\n                            <h1>Computadoras</h1>\r\n                            <p>Asigna equipos a colaboradores.</p>\r\n                            <div className=\"app-hr\"></div>\r\n                            <div>\r\n                                <span style={{ fontWeight: \"bold\" }}>Modo</span>\r\n                                <br />\r\n                                <div style={{ display: \"flex\", margin: \"15px 0px\" }}>\r\n                                    <div style={{ marginRight: \"15px\" }}>\r\n                                        <RadioButton name=\"radio\" label='Todos los equipos' onChange={() => setMode('T')} defaultChecked />\r\n                                    </div>\r\n                                    <div>\r\n                                        <RadioButton name=\"radio\" label='Equipos asignados' onChange={() => setMode('A')} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {\r\n                                mode === 'T' ?\r\n                                    <div style={{ marginTop: \"15px\" }}>\r\n                                        <div style={{ marginRight: \"30px\", marginTop: \"15px\" }}>\r\n                                            <div style={{ marginTop: \"15px\" }}>\r\n                                                <label>Buscar</label>\r\n                                                <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                                            </div>\r\n                                            <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Id</th>\r\n                                                        <th>Equipo</th>\r\n                                                        <th>Estado</th>\r\n                                                        <th>Acciones</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        tableData ? tableData.map(ele => {\r\n                                                            return (\r\n                                                                <tr>\r\n                                                                    <td>\r\n                                                                        {ele.id}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {ele.equipo}\r\n                                                                    </td>\r\n                                                                    <td style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                                                        {\r\n                                                                            showStateSpan(ele.estado)\r\n                                                                        }\r\n                                                                    </td>\r\n                                                                    <td style={{ justifyContent: \"center\" }}>\r\n                                                                        {\r\n                                                                            //  ele.estado === \"En mantenimiento\" ?\r\n                                                                            <div style={{ display: \"flex\", justifyContent: 'center' }}>\r\n                                                                                <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => handleDetailsVisualization(ele.id)}>Ver detalles</button>\r\n                                                                                <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => handleUpdateClick(ele.id)}>Actualizar</button>\r\n                                                                                {ele.estado === \"En mantenimiento\" ?\r\n                                                                                    <>\r\n                                                                                        <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => { setShowModal(true); setId(ele.id) }}>Recibir de Mantenimiento</button>\r\n                                                                                    </> : <></>}\r\n                                                                                {\r\n                                                                                    ele.estado != \"No disponible\" ?\r\n                                                                                        <>\r\n                                                                                            <button className='app-button animate primary' style={{ marginRight: \"10px\" }} onClick={() => setModalCancel(true)}>Dar de baja</button>\r\n                                                                                        </> : <></>\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        }\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            )\r\n                                                        })\r\n                                                            : <></>\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div> :\r\n                                    <div>\r\n                                        <div style={{ marginTop: \"15px\" }}>\r\n                                            <label>Buscar</label>\r\n                                            <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                                        </div>\r\n                                        <div style={{ marginRight: \"30px\" }}>\r\n                                            <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Equipo</th>\r\n                                                        <th>Nombre Empleado</th>\r\n                                                        <th>Detalle</th>\r\n                                                        <th>Fecha de Asignación</th>\r\n                                                        <th>Incluye Mochila</th>\r\n                                                        <th>Incluye Mouse</th>\r\n                                                        <th>Incluye Cargador</th>\r\n                                                        <th>Incluye Teclado</th>\r\n                                                        <th>Incluye WebCam</th>\r\n                                                        <th>Área</th>\r\n                                                        <th>Ciudad</th>\r\n                                                        <th>Sucursal</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        assignmentData.map(ele => {\r\n                                                            return (\r\n                                                                <tr>\r\n                                                                    <td>\r\n                                                                        {ele.Equipo}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {ele.NombreEmpleado}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {ele.DetalleAsignacion}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {ele.FechaAsignacion}\r\n                                                                    </td>\r\n                                                                    {\r\n                                                                        ele.IncluyeMochila.data == \"1\" ?\r\n                                                                            <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                            :\r\n                                                                            <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        ele.IncluyeMouse.data == \"1\" ?\r\n                                                                            <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                            :\r\n                                                                            <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        ele.IncluyeCargador.data == \"1\" ?\r\n                                                                            <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                            :\r\n                                                                            <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        ele.IncluyeTeclado.data == \"1\" ?\r\n                                                                            <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                            :\r\n                                                                            <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        ele.IncluyeWebCam.data == \"1\" ?\r\n                                                                            <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                            :\r\n                                                                            <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                                    }\r\n                                                                    <td>\r\n                                                                        {ele.DescripcionArea}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {ele.NombreCiudad}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {ele.NombreSucursal}\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                            }\r\n\r\n                        </NavPageContainer>\r\n                    </>\r\n            }\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Computadora","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\shared\\arrayToPivot.js",["379","380"],"function getPivotArray(dataArray, rowIndex, colIndex, dataIndex) {\r\n    //Code from https://techbrij.com\r\n    var result = {}, ret = [];\r\n    var newCols = [];\r\n    for (var i = 0; i < dataArray.length; i++) {\r\n\r\n        if (!result[dataArray[i][rowIndex]]) {\r\n            result[dataArray[i][rowIndex]] = {};\r\n        }\r\n        result[dataArray[i][rowIndex]][dataArray[i][colIndex]] = dataArray[i][dataIndex];\r\n\r\n        //To get column names\r\n        if (newCols.indexOf(dataArray[i][colIndex]) == -1) {\r\n            newCols.push(dataArray[i][colIndex]);\r\n        }\r\n    }\r\n\r\n   // comente esto newCols.sort();\r\n    var item = [];\r\n\r\n    //Add Header Row\r\n    item.push('Item');\r\n    item.push.apply(item, newCols);\r\n    ret.push(item);\r\n\r\n    //Add content \r\n    for (var key in result) {\r\n        item = [];\r\n        item.push(key);\r\n        for (var i = 0; i < newCols.length; i++) {\r\n            item.push(result[key][newCols[i]] || \"-\");\r\n        }\r\n        ret.push(item);\r\n    }\r\n    console.log(ret);\r\n    return ret;\r\n\r\n}\r\n\r\nexport default getPivotArray;","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\components\\Modal.js",[],"C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\historial\\index.js",["381","382","383","384","385","386"],"/**\r\n * @file Componente - Historial de Asignaciones\r\n * @author Christopher Ortiz\r\n * @namespace Historial\r\n * @description Las asignaciones que se remuevan, pasarán a formar parte de este historial\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link } from 'react-windows-ui'\r\nimport React, { useState, useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport \"../historial/index.css\"\r\n\r\nconst Historial = () => {\r\n\r\n    const [assignmentData, setAssignmentData] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        getAllAssignmentData()\r\n    }, []);\r\n\r\n/**\r\n * Obtiene los datos del histórico de asignaciones\r\n * @function getAllAssignmentData\r\n * @memberof Historial\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n    const getAllAssignmentData = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"assignment/history\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n\r\n            const result = await response.json()\r\n            setAssignmentData(result)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n/**\r\n * Filtra en la tabla por todos los campos\r\n * @function searchTableAll\r\n * @memberof Historial\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n    const searchTableAll = () => {\r\n        var searchBox = document.getElementById('search-input-table');\r\n        var table = document.getElementById(\"table-products\");\r\n        var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n        var filter = searchBox.value.toUpperCase();\r\n        for (var rowI = 0; rowI < trs.length; rowI++) {\r\n            var tds = trs[rowI].getElementsByTagName(\"td\");\r\n            trs[rowI].style.display = \"none\";\r\n            for (var cellI = 0; cellI < tds.length; cellI++) {\r\n                if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n                    trs[rowI].style.display = \"\";\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                loading ? <></> :\r\n                    <>\r\n                        <NavigationWindow />\r\n                        <NavPageContainer\r\n                            hasPadding={true}\r\n                            animateTransition={true}>\r\n\r\n                            <h1>Historial de Asignaciones</h1>\r\n                            <p>Revisa y analiza las asignaciones de los equipos.</p>\r\n                            <div className='app-hr' />\r\n                            <div style={{ display: \"flex\", flex: 1, marginRight: \"30px\", flexDirection: \"column\" }}>\r\n                                <div style={{ marginTop: \"15px\" }}>\r\n                                    <label>Buscar</label>\r\n                                    <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                                </div>\r\n                                <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Equipo</th>\r\n                                            <th>Nombre Empleado</th>\r\n                                            <th>Detalle</th>\r\n                                            <th>Fecha de Asignación</th>\r\n                                            <th>Fecha de Remoción</th>\r\n                                            <th>Incluye Mochila</th>\r\n                                            <th>Incluye Mouse</th>\r\n                                            <th>Incluye Cargador</th>\r\n                                            <th>Incluye Teclado</th>\r\n                                            <th>Incluye WebCam</th>\r\n                                            <th>Área</th>\r\n                                            <th>Ciudad</th>\r\n                                            <th>Sucursal</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            assignmentData.map(ele => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            {ele.Equipo}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {ele.NombreEmpleado}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {ele.DetalleAsignacion}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {ele.FechaAsignacion}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {ele.FechaRemocion}\r\n                                                        </td>\r\n                                                        {\r\n                                                            ele.IncluyeMochila.data == \"1\" ?\r\n                                                                <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                :\r\n                                                                <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                        }\r\n                                                        {\r\n                                                            ele.IncluyeMouse.data == \"1\" ?\r\n                                                                <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                :\r\n                                                                <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                        }\r\n                                                        {\r\n                                                            ele.IncluyeCargador.data == \"1\" ?\r\n                                                                <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                :\r\n                                                                <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                        }\r\n                                                        {\r\n                                                            ele.IncluyeTeclado.data == \"1\" ?\r\n                                                                <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                :\r\n                                                                <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                        }\r\n                                                        {\r\n                                                            ele.IncluyeWebCam.data == \"1\" ?\r\n                                                                <td style={{ color: \"green\", fontWeight: \"bold\", fontSize: \"20px\" }}>✓</td>\r\n                                                                :\r\n                                                                <td style={{ color: \"red\", fontWeight: \"bold\", fontSize: \"20px\" }}>x</td>\r\n                                                        }\r\n                                                        <td>\r\n                                                            {ele.DescripcionArea}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {ele.NombreCiudad}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {ele.NombreSucursal}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </NavPageContainer>\r\n                    </>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Historial","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\pages\\mantenimientos\\index.js",["387","388","389","390","391","392"],"/**\r\n * @file Componente - Mantenimientos\r\n * @author Christopher Ortiz\r\n * @namespace Mantenimientos\r\n * @description Pantalla que gestiona los registros de los mantenimientos a los equipos\r\n * @version 1.0.0\r\n */\r\nimport { NavPageContainer, Link, Button } from 'react-windows-ui'\r\nimport React, { useEffect } from 'react'\r\nimport NavigationWindow from '../../components/Navigation'\r\nimport useState from 'react-usestateref'\r\nimport Modal from '../../components/Modal';\r\nimport { triggerBase64Download } from 'react-base64-downloader'\r\n\r\nconst Mantenimiento = () => {\r\n\r\n    const [maintenances, setMaintenances, maintenancesRef] = useState()\r\n    const [modalImg, setModalImg] = useState(false)\r\n    const [currentImage, setCurrentImage, currentImageRef] = useState()\r\n\r\n    useEffect(() => {\r\n        getMaintenanceRecords();\r\n    }, [])\r\n\r\n/**\r\n * Obtiene los datos obtenidos de los mantenimientos registrados en la base de datos\r\n * @function getMaintenanceRecords\r\n * @memberof Mantenimientos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n    const getMaintenanceRecords = async () => {\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_HOME + \"maintenance\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const data = await response.json()\r\n            setMaintenances(data)\r\n        } catch (error) {\r\n            alert(\"Ha ocurrido un error al obtener los datos \" + error)\r\n        }\r\n    }\r\n\r\n/**\r\n * Filtra los valores de la tabla por el texto ingresado en el input de búsqueda\r\n * @function searchTableAll\r\n * @memberof Mantenimientos\r\n * @async\r\n * @return void\r\n * @inner\r\n */\r\n    const searchTableAll = () => {\r\n        var searchBox = document.getElementById('search-input-table');\r\n        var table = document.getElementById(\"table-products\");\r\n        var trs = table.tBodies[0].getElementsByTagName(\"tr\");\r\n        var filter = searchBox.value.toUpperCase();\r\n        for (var rowI = 0; rowI < trs.length; rowI++) {\r\n            var tds = trs[rowI].getElementsByTagName(\"td\");\r\n            trs[rowI].style.display = \"none\";\r\n            for (var cellI = 0; cellI < tds.length; cellI++) {\r\n                if (tds[cellI].innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n                    trs[rowI].style.display = \"\";\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavigationWindow />\r\n            <NavPageContainer\r\n                hasPadding={true}\r\n                animateTransition={true}>\r\n                <Modal showOverlay={true} show={modalImg} onClose={() => setModalImg(false)}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Visualizador de imágenes</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <img src={currentImageRef.current} width=\"700px\" height=\"auto\" />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button value='Guardar imagen' onClick={() => { triggerBase64Download(currentImageRef.current, \"IMG-\" + Date.now()) }} />\r\n                        <Button value=\"Cerrar\" onClick={() => setModalImg(false)} />\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <h1>Mantenimientos</h1>\r\n                <p>Analiza los últimos movimientos realizados en el sistema.</p>\r\n                <div style={{ display: \"flex\", flex: 1, marginRight: \"30px\", flexDirection: \"column\" }}>\r\n                    <div style={{ marginTop: \"15px\", display: \"flex\", flex: 1 }}>\r\n                        <div style={{ flex: 1 }}>\r\n                            <label>Buscar</label>\r\n                            <input className='app-input-text' id=\"search-input-table\" placeholder='Buscar...' style={{ marginLeft: \"20px\" }} onKeyUp={searchTableAll} />\r\n                        </div>\r\n                    </div>\r\n                    <table style={{ width: '100%' }} className=\"styled-table\" id=\"table-products\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Equipo</th>\r\n                                <th>Tipo de Mantenimiento</th>\r\n                                <th>Fecha de Mantenimiento</th>\r\n                                <th>Fecha de Recibimiento</th>\r\n                                <th>Factura</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                maintenancesRef.current?.map(item => {\r\n                                    return (\r\n                                        <tr key={item.IdMantenimiento}>\r\n                                            <td>{item.Equipo}</td>\r\n                                            <td>{item.DescripcionTipoMantenimiento}</td>\r\n                                            <td>{item.FechaMantenimiento}</td>\r\n                                            <td>{item.FechaRecibida}</td>\r\n                                            <td><a style={{textDecoration: \"underline\", color: \"blue\"}} onClick={()=> {setCurrentImage(item.FacturaMantenimiento); setModalImg(true)}}>Ver imagen</a></td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </NavPageContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Mantenimiento","C:\\Users\\Familia-1\\Documents\\GitHub\\rvInventory\\src\\react\\hooks\\useIsAuth.js",[],{"ruleId":"393","replacedBy":"394"},{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","severity":1,"message":"398","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":31},{"ruleId":"397","severity":1,"message":"401","line":2,"column":17,"nodeType":"399","messageId":"400","endLine":2,"endColumn":25},{"ruleId":"397","severity":1,"message":"402","line":2,"column":27,"nodeType":"399","messageId":"400","endLine":2,"endColumn":36},{"ruleId":"397","severity":1,"message":"403","line":8,"column":16,"nodeType":"399","messageId":"400","endLine":8,"endColumn":21},{"ruleId":"397","severity":1,"message":"404","line":10,"column":22,"nodeType":"399","messageId":"400","endLine":10,"endColumn":31},{"ruleId":"397","severity":1,"message":"405","line":10,"column":33,"nodeType":"399","messageId":"400","endLine":10,"endColumn":39},{"ruleId":"406","severity":1,"message":"407","line":45,"column":21,"nodeType":"408","messageId":"409","endLine":45,"endColumn":23},{"ruleId":"406","severity":1,"message":"407","line":50,"column":21,"nodeType":"408","messageId":"409","endLine":50,"endColumn":23},{"ruleId":"410","severity":1,"message":"411","line":100,"column":101,"nodeType":"412","messageId":"409","endLine":100,"endColumn":105},{"ruleId":"397","severity":1,"message":"398","line":8,"column":27,"nodeType":"399","messageId":"400","endLine":8,"endColumn":31},{"ruleId":"397","severity":1,"message":"404","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":37},{"ruleId":"397","severity":1,"message":"413","line":8,"column":60,"nodeType":"399","messageId":"400","endLine":8,"endColumn":81},{"ruleId":"397","severity":1,"message":"414","line":8,"column":83,"nodeType":"399","messageId":"400","endLine":8,"endColumn":95},{"ruleId":"397","severity":1,"message":"415","line":26,"column":10,"nodeType":"399","messageId":"400","endLine":26,"endColumn":18},{"ruleId":"397","severity":1,"message":"416","line":26,"column":20,"nodeType":"399","messageId":"400","endLine":26,"endColumn":31},{"ruleId":"397","severity":1,"message":"417","line":29,"column":10,"nodeType":"399","messageId":"400","endLine":29,"endColumn":20},{"ruleId":"397","severity":1,"message":"418","line":31,"column":10,"nodeType":"399","messageId":"400","endLine":31,"endColumn":21},{"ruleId":"397","severity":1,"message":"419","line":31,"column":39,"nodeType":"399","messageId":"400","endLine":31,"endColumn":53},{"ruleId":"397","severity":1,"message":"420","line":32,"column":10,"nodeType":"399","messageId":"400","endLine":32,"endColumn":17},{"ruleId":"397","severity":1,"message":"421","line":33,"column":31,"nodeType":"399","messageId":"400","endLine":33,"endColumn":41},{"ruleId":"397","severity":1,"message":"422","line":34,"column":10,"nodeType":"399","messageId":"400","endLine":34,"endColumn":14},{"ruleId":"397","severity":1,"message":"423","line":36,"column":10,"nodeType":"399","messageId":"400","endLine":36,"endColumn":22},{"ruleId":"397","severity":1,"message":"424","line":44,"column":9,"nodeType":"399","messageId":"400","endLine":44,"endColumn":17},{"ruleId":"406","severity":1,"message":"425","line":270,"column":22,"nodeType":"408","messageId":"409","endLine":270,"endColumn":24},{"ruleId":"406","severity":1,"message":"407","line":273,"column":17,"nodeType":"408","messageId":"409","endLine":273,"endColumn":19},{"ruleId":"426","severity":1,"message":"427","line":275,"column":9,"nodeType":"428","messageId":"429","endLine":352,"endColumn":10},{"ruleId":"406","severity":1,"message":"407","line":328,"column":58,"nodeType":"408","messageId":"409","endLine":328,"endColumn":60},{"ruleId":"397","severity":1,"message":"430","line":482,"column":13,"nodeType":"399","messageId":"400","endLine":482,"endColumn":19},{"ruleId":"406","severity":1,"message":"407","line":505,"column":22,"nodeType":"408","messageId":"409","endLine":505,"endColumn":24},{"ruleId":"397","severity":1,"message":"431","line":515,"column":15,"nodeType":"399","messageId":"400","endLine":515,"endColumn":23},{"ruleId":"406","severity":1,"message":"407","line":650,"column":20,"nodeType":"408","messageId":"409","endLine":650,"endColumn":22},{"ruleId":"406","severity":1,"message":"407","line":690,"column":42,"nodeType":"408","messageId":"409","endLine":690,"endColumn":44},{"ruleId":"432","severity":1,"message":"433","line":690,"column":48,"nodeType":"434","messageId":"435","endLine":690,"endColumn":55},{"ruleId":"406","severity":1,"message":"407","line":695,"column":54,"nodeType":"408","messageId":"409","endLine":695,"endColumn":56},{"ruleId":"432","severity":1,"message":"433","line":695,"column":60,"nodeType":"434","messageId":"435","endLine":695,"endColumn":67},{"ruleId":"436","severity":1,"message":"437","line":700,"column":49,"nodeType":"438","endLine":700,"endColumn":169},{"ruleId":"439","severity":1,"message":"440","line":706,"column":49,"nodeType":"438","endLine":706,"endColumn":114},{"ruleId":"397","severity":1,"message":"441","line":14,"column":22,"nodeType":"399","messageId":"400","endLine":14,"endColumn":38},{"ruleId":"397","severity":1,"message":"442","line":23,"column":9,"nodeType":"399","messageId":"400","endLine":23,"endColumn":20},{"ruleId":"397","severity":1,"message":"443","line":25,"column":10,"nodeType":"399","messageId":"400","endLine":25,"endColumn":19},{"ruleId":"397","severity":1,"message":"444","line":26,"column":10,"nodeType":"399","messageId":"400","endLine":26,"endColumn":16},{"ruleId":"397","severity":1,"message":"445","line":27,"column":10,"nodeType":"399","messageId":"400","endLine":27,"endColumn":19},{"ruleId":"397","severity":1,"message":"446","line":28,"column":10,"nodeType":"399","messageId":"400","endLine":28,"endColumn":19},{"ruleId":"447","severity":1,"message":"448","line":34,"column":6,"nodeType":"449","endLine":34,"endColumn":8,"suggestions":"450"},{"ruleId":"439","severity":1,"message":"440","line":85,"column":21,"nodeType":"438","endLine":85,"endColumn":57},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"451","line":18,"column":10,"nodeType":"399","messageId":"400","endLine":18,"endColumn":17},{"ruleId":"397","severity":1,"message":"452","line":18,"column":19,"nodeType":"399","messageId":"400","endLine":18,"endColumn":29},{"ruleId":"397","severity":1,"message":"453","line":19,"column":10,"nodeType":"399","messageId":"400","endLine":19,"endColumn":14},{"ruleId":"397","severity":1,"message":"454","line":20,"column":10,"nodeType":"399","messageId":"400","endLine":20,"endColumn":18},{"ruleId":"397","severity":1,"message":"455","line":20,"column":20,"nodeType":"399","messageId":"400","endLine":20,"endColumn":31},{"ruleId":"397","severity":1,"message":"456","line":20,"column":33,"nodeType":"399","messageId":"400","endLine":20,"endColumn":44},{"ruleId":"397","severity":1,"message":"457","line":21,"column":33,"nodeType":"399","messageId":"400","endLine":21,"endColumn":44},{"ruleId":"397","severity":1,"message":"458","line":22,"column":47,"nodeType":"399","messageId":"400","endLine":22,"endColumn":65},{"ruleId":"397","severity":1,"message":"459","line":24,"column":35,"nodeType":"399","messageId":"400","endLine":24,"endColumn":47},{"ruleId":"397","severity":1,"message":"460","line":25,"column":35,"nodeType":"399","messageId":"400","endLine":25,"endColumn":47},{"ruleId":"397","severity":1,"message":"461","line":26,"column":49,"nodeType":"399","messageId":"400","endLine":26,"endColumn":68},{"ruleId":"447","severity":1,"message":"462","line":30,"column":6,"nodeType":"449","endLine":30,"endColumn":8,"suggestions":"463"},{"ruleId":"397","severity":1,"message":"464","line":72,"column":15,"nodeType":"399","messageId":"400","endLine":72,"endColumn":19},{"ruleId":"397","severity":1,"message":"464","line":103,"column":15,"nodeType":"399","messageId":"400","endLine":103,"endColumn":19},{"ruleId":"397","severity":1,"message":"465","line":50,"column":10,"nodeType":"399","messageId":"400","endLine":50,"endColumn":17},{"ruleId":"397","severity":1,"message":"466","line":66,"column":10,"nodeType":"399","messageId":"400","endLine":66,"endColumn":17},{"ruleId":"397","severity":1,"message":"467","line":122,"column":10,"nodeType":"399","messageId":"400","endLine":122,"endColumn":21},{"ruleId":"397","severity":1,"message":"468","line":138,"column":10,"nodeType":"399","messageId":"400","endLine":138,"endColumn":15},{"ruleId":"397","severity":1,"message":"469","line":146,"column":10,"nodeType":"399","messageId":"400","endLine":146,"endColumn":22},{"ruleId":"397","severity":1,"message":"470","line":170,"column":10,"nodeType":"399","messageId":"400","endLine":170,"endColumn":20},{"ruleId":"397","severity":1,"message":"471","line":186,"column":10,"nodeType":"399","messageId":"400","endLine":186,"endColumn":19},{"ruleId":"397","severity":1,"message":"472","line":194,"column":10,"nodeType":"399","messageId":"400","endLine":194,"endColumn":20},{"ruleId":"447","severity":1,"message":"473","line":202,"column":6,"nodeType":"449","endLine":202,"endColumn":8,"suggestions":"474"},{"ruleId":"397","severity":1,"message":"431","line":215,"column":13,"nodeType":"399","messageId":"400","endLine":215,"endColumn":21},{"ruleId":"406","severity":1,"message":"407","line":322,"column":16,"nodeType":"408","messageId":"409","endLine":322,"endColumn":18},{"ruleId":"406","severity":1,"message":"407","line":326,"column":16,"nodeType":"408","messageId":"409","endLine":326,"endColumn":18},{"ruleId":"397","severity":1,"message":"430","line":348,"column":13,"nodeType":"399","messageId":"400","endLine":348,"endColumn":19},{"ruleId":"406","severity":1,"message":"407","line":423,"column":15,"nodeType":"408","messageId":"409","endLine":423,"endColumn":17},{"ruleId":"406","severity":1,"message":"407","line":527,"column":83,"nodeType":"408","messageId":"409","endLine":527,"endColumn":85},{"ruleId":"406","severity":1,"message":"407","line":564,"column":15,"nodeType":"408","messageId":"409","endLine":564,"endColumn":17},{"ruleId":"397","severity":1,"message":"475","line":578,"column":9,"nodeType":"399","messageId":"400","endLine":578,"endColumn":11},{"ruleId":"406","severity":1,"message":"407","line":579,"column":45,"nodeType":"408","messageId":"409","endLine":579,"endColumn":47},{"ruleId":"406","severity":1,"message":"407","line":645,"column":24,"nodeType":"408","messageId":"409","endLine":645,"endColumn":26},{"ruleId":"406","severity":1,"message":"425","line":708,"column":35,"nodeType":"408","messageId":"409","endLine":708,"endColumn":37},{"ruleId":"406","severity":1,"message":"407","line":851,"column":213,"nodeType":"408","messageId":"409","endLine":851,"endColumn":215},{"ruleId":"406","severity":1,"message":"407","line":968,"column":82,"nodeType":"408","messageId":"409","endLine":968,"endColumn":84},{"ruleId":"406","severity":1,"message":"407","line":971,"column":156,"nodeType":"408","messageId":"409","endLine":971,"endColumn":158},{"ruleId":"406","severity":1,"message":"407","line":975,"column":84,"nodeType":"408","messageId":"409","endLine":975,"endColumn":86},{"ruleId":"406","severity":1,"message":"407","line":1046,"column":55,"nodeType":"408","messageId":"409","endLine":1046,"endColumn":57},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"404","line":8,"column":34,"nodeType":"399","messageId":"400","endLine":8,"endColumn":43},{"ruleId":"397","severity":1,"message":"413","line":8,"column":45,"nodeType":"399","messageId":"400","endLine":8,"endColumn":66},{"ruleId":"397","severity":1,"message":"414","line":8,"column":68,"nodeType":"399","messageId":"400","endLine":8,"endColumn":80},{"ruleId":"397","severity":1,"message":"476","line":82,"column":10,"nodeType":"399","messageId":"400","endLine":82,"endColumn":18},{"ruleId":"397","severity":1,"message":"477","line":98,"column":10,"nodeType":"399","messageId":"400","endLine":98,"endColumn":24},{"ruleId":"397","severity":1,"message":"478","line":106,"column":10,"nodeType":"399","messageId":"400","endLine":106,"endColumn":27},{"ruleId":"397","severity":1,"message":"479","line":114,"column":49,"nodeType":"399","messageId":"400","endLine":114,"endColumn":68},{"ruleId":"397","severity":1,"message":"480","line":122,"column":10,"nodeType":"399","messageId":"400","endLine":122,"endColumn":26},{"ruleId":"397","severity":1,"message":"481","line":130,"column":10,"nodeType":"399","messageId":"400","endLine":130,"endColumn":26},{"ruleId":"397","severity":1,"message":"482","line":138,"column":10,"nodeType":"399","messageId":"400","endLine":138,"endColumn":25},{"ruleId":"397","severity":1,"message":"483","line":170,"column":10,"nodeType":"399","messageId":"400","endLine":170,"endColumn":27},{"ruleId":"397","severity":1,"message":"423","line":194,"column":10,"nodeType":"399","messageId":"400","endLine":194,"endColumn":22},{"ruleId":"397","severity":1,"message":"484","line":202,"column":39,"nodeType":"399","messageId":"400","endLine":202,"endColumn":53},{"ruleId":"397","severity":1,"message":"485","line":210,"column":45,"nodeType":"399","messageId":"400","endLine":210,"endColumn":62},{"ruleId":"397","severity":1,"message":"486","line":218,"column":41,"nodeType":"399","messageId":"400","endLine":218,"endColumn":56},{"ruleId":"397","severity":1,"message":"487","line":226,"column":45,"nodeType":"399","messageId":"400","endLine":226,"endColumn":62},{"ruleId":"397","severity":1,"message":"488","line":234,"column":47,"nodeType":"399","messageId":"400","endLine":234,"endColumn":65},{"ruleId":"397","severity":1,"message":"489","line":242,"column":43,"nodeType":"399","messageId":"400","endLine":242,"endColumn":59},{"ruleId":"397","severity":1,"message":"490","line":250,"column":10,"nodeType":"399","messageId":"400","endLine":250,"endColumn":22},{"ruleId":"397","severity":1,"message":"491","line":258,"column":10,"nodeType":"399","messageId":"400","endLine":258,"endColumn":18},{"ruleId":"397","severity":1,"message":"492","line":266,"column":10,"nodeType":"399","messageId":"400","endLine":266,"endColumn":18},{"ruleId":"397","severity":1,"message":"493","line":281,"column":9,"nodeType":"399","messageId":"400","endLine":281,"endColumn":20},{"ruleId":"426","severity":1,"message":"427","line":335,"column":9,"nodeType":"428","messageId":"429","endLine":348,"endColumn":10},{"ruleId":"397","severity":1,"message":"494","line":372,"column":9,"nodeType":"399","messageId":"400","endLine":372,"endColumn":15},{"ruleId":"406","severity":1,"message":"407","line":476,"column":32,"nodeType":"408","messageId":"409","endLine":476,"endColumn":34},{"ruleId":"406","severity":1,"message":"407","line":511,"column":18,"nodeType":"408","messageId":"409","endLine":511,"endColumn":20},{"ruleId":"406","severity":1,"message":"407","line":511,"column":33,"nodeType":"408","messageId":"409","endLine":511,"endColumn":35},{"ruleId":"406","severity":1,"message":"407","line":513,"column":18,"nodeType":"408","messageId":"409","endLine":513,"endColumn":20},{"ruleId":"406","severity":1,"message":"407","line":513,"column":33,"nodeType":"408","messageId":"409","endLine":513,"endColumn":35},{"ruleId":"406","severity":1,"message":"425","line":878,"column":164,"nodeType":"408","messageId":"409","endLine":878,"endColumn":166},{"ruleId":"406","severity":1,"message":"407","line":879,"column":164,"nodeType":"408","messageId":"409","endLine":879,"endColumn":166},{"ruleId":"406","severity":1,"message":"425","line":880,"column":164,"nodeType":"408","messageId":"409","endLine":880,"endColumn":166},{"ruleId":"406","severity":1,"message":"407","line":894,"column":64,"nodeType":"408","messageId":"409","endLine":894,"endColumn":66},{"ruleId":"436","severity":1,"message":"437","line":898,"column":125,"nodeType":"438","endLine":898,"endColumn":253},{"ruleId":"439","severity":1,"message":"440","line":906,"column":45,"nodeType":"438","endLine":906,"endColumn":110},{"ruleId":"397","severity":1,"message":"495","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":16},{"ruleId":"397","severity":1,"message":"496","line":12,"column":8,"nodeType":"399","messageId":"400","endLine":12,"endColumn":21},{"ruleId":"397","severity":1,"message":"466","line":27,"column":10,"nodeType":"399","messageId":"400","endLine":27,"endColumn":17},{"ruleId":"397","severity":1,"message":"497","line":30,"column":10,"nodeType":"399","messageId":"400","endLine":30,"endColumn":22},{"ruleId":"397","severity":1,"message":"498","line":33,"column":10,"nodeType":"399","messageId":"400","endLine":33,"endColumn":21},{"ruleId":"397","severity":1,"message":"499","line":34,"column":10,"nodeType":"399","messageId":"400","endLine":34,"endColumn":21},{"ruleId":"397","severity":1,"message":"500","line":35,"column":10,"nodeType":"399","messageId":"400","endLine":35,"endColumn":25},{"ruleId":"397","severity":1,"message":"501","line":36,"column":43,"nodeType":"399","messageId":"400","endLine":36,"endColumn":59},{"ruleId":"397","severity":1,"message":"502","line":37,"column":10,"nodeType":"399","messageId":"400","endLine":37,"endColumn":20},{"ruleId":"447","severity":1,"message":"503","line":47,"column":6,"nodeType":"449","endLine":47,"endColumn":8,"suggestions":"504"},{"ruleId":"397","severity":1,"message":"431","line":63,"column":17,"nodeType":"399","messageId":"400","endLine":63,"endColumn":25},{"ruleId":"397","severity":1,"message":"430","line":234,"column":13,"nodeType":"399","messageId":"400","endLine":234,"endColumn":19},{"ruleId":"406","severity":1,"message":"407","line":266,"column":63,"nodeType":"408","messageId":"409","endLine":266,"endColumn":65},{"ruleId":"406","severity":1,"message":"407","line":267,"column":63,"nodeType":"408","messageId":"409","endLine":267,"endColumn":65},{"ruleId":"406","severity":1,"message":"407","line":272,"column":63,"nodeType":"408","messageId":"409","endLine":272,"endColumn":65},{"ruleId":"406","severity":1,"message":"407","line":273,"column":63,"nodeType":"408","messageId":"409","endLine":273,"endColumn":65},{"ruleId":"406","severity":1,"message":"407","line":278,"column":63,"nodeType":"408","messageId":"409","endLine":278,"endColumn":65},{"ruleId":"406","severity":1,"message":"407","line":279,"column":63,"nodeType":"408","messageId":"409","endLine":279,"endColumn":65},{"ruleId":"406","severity":1,"message":"407","line":360,"column":76,"nodeType":"408","messageId":"409","endLine":360,"endColumn":78},{"ruleId":"406","severity":1,"message":"407","line":361,"column":67,"nodeType":"408","messageId":"409","endLine":361,"endColumn":69},{"ruleId":"406","severity":1,"message":"407","line":365,"column":76,"nodeType":"408","messageId":"409","endLine":365,"endColumn":78},{"ruleId":"406","severity":1,"message":"407","line":416,"column":15,"nodeType":"408","messageId":"409","endLine":416,"endColumn":17},{"ruleId":"432","severity":1,"message":"505","line":465,"column":69,"nodeType":"506","messageId":"507","endLine":465,"endColumn":71},{"ruleId":"406","severity":1,"message":"407","line":466,"column":49,"nodeType":"408","messageId":"409","endLine":466,"endColumn":51},{"ruleId":"406","severity":1,"message":"407","line":644,"column":63,"nodeType":"408","messageId":"409","endLine":644,"endColumn":65},{"ruleId":"397","severity":1,"message":"495","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":16},{"ruleId":"397","severity":1,"message":"496","line":12,"column":8,"nodeType":"399","messageId":"400","endLine":12,"endColumn":21},{"ruleId":"397","severity":1,"message":"508","line":23,"column":10,"nodeType":"399","messageId":"400","endLine":23,"endColumn":24},{"ruleId":"397","severity":1,"message":"509","line":25,"column":29,"nodeType":"399","messageId":"400","endLine":25,"endColumn":38},{"ruleId":"397","severity":1,"message":"490","line":27,"column":10,"nodeType":"399","messageId":"400","endLine":27,"endColumn":22},{"ruleId":"397","severity":1,"message":"510","line":29,"column":10,"nodeType":"399","messageId":"400","endLine":29,"endColumn":26},{"ruleId":"447","severity":1,"message":"511","line":35,"column":6,"nodeType":"449","endLine":35,"endColumn":8,"suggestions":"512"},{"ruleId":"397","severity":1,"message":"431","line":50,"column":13,"nodeType":"399","messageId":"400","endLine":50,"endColumn":21},{"ruleId":"397","severity":1,"message":"413","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":49},{"ruleId":"397","severity":1,"message":"402","line":9,"column":17,"nodeType":"399","messageId":"400","endLine":9,"endColumn":26},{"ruleId":"397","severity":1,"message":"513","line":9,"column":28,"nodeType":"399","messageId":"400","endLine":9,"endColumn":41},{"ruleId":"397","severity":1,"message":"514","line":12,"column":8,"nodeType":"399","messageId":"400","endLine":12,"endColumn":18},{"ruleId":"397","severity":1,"message":"398","line":13,"column":10,"nodeType":"399","messageId":"400","endLine":13,"endColumn":14},{"ruleId":"397","severity":1,"message":"515","line":22,"column":9,"nodeType":"399","messageId":"400","endLine":22,"endColumn":16},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"495","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":16},{"ruleId":"397","severity":1,"message":"496","line":12,"column":8,"nodeType":"399","messageId":"400","endLine":12,"endColumn":21},{"ruleId":"397","severity":1,"message":"516","line":57,"column":10,"nodeType":"399","messageId":"400","endLine":57,"endColumn":23},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"495","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":16},{"ruleId":"397","severity":1,"message":"496","line":12,"column":8,"nodeType":"399","messageId":"400","endLine":12,"endColumn":21},{"ruleId":"397","severity":1,"message":"516","line":22,"column":10,"nodeType":"399","messageId":"400","endLine":22,"endColumn":23},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"495","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":16},{"ruleId":"397","severity":1,"message":"496","line":12,"column":8,"nodeType":"399","messageId":"400","endLine":12,"endColumn":21},{"ruleId":"397","severity":1,"message":"516","line":58,"column":10,"nodeType":"399","messageId":"400","endLine":58,"endColumn":23},{"ruleId":"397","severity":1,"message":"398","line":8,"column":87,"nodeType":"399","messageId":"400","endLine":8,"endColumn":91},{"ruleId":"397","severity":1,"message":"517","line":61,"column":12,"nodeType":"399","messageId":"400","endLine":61,"endColumn":18},{"ruleId":"397","severity":1,"message":"518","line":61,"column":20,"nodeType":"399","messageId":"400","endLine":61,"endColumn":29},{"ruleId":"397","severity":1,"message":"472","line":109,"column":12,"nodeType":"399","messageId":"400","endLine":109,"endColumn":22},{"ruleId":"397","severity":1,"message":"519","line":117,"column":12,"nodeType":"399","messageId":"400","endLine":117,"endColumn":21},{"ruleId":"406","severity":1,"message":"425","line":282,"column":24,"nodeType":"408","messageId":"409","endLine":282,"endColumn":26},{"ruleId":"426","severity":1,"message":"427","line":283,"column":13,"nodeType":"428","messageId":"429","endLine":320,"endColumn":14},{"ruleId":"406","severity":1,"message":"407","line":345,"column":20,"nodeType":"408","messageId":"409","endLine":345,"endColumn":22},{"ruleId":"406","severity":1,"message":"407","line":345,"column":33,"nodeType":"408","messageId":"409","endLine":345,"endColumn":35},{"ruleId":"406","severity":1,"message":"407","line":345,"column":50,"nodeType":"408","messageId":"409","endLine":345,"endColumn":52},{"ruleId":"406","severity":1,"message":"407","line":345,"column":79,"nodeType":"408","messageId":"409","endLine":345,"endColumn":81},{"ruleId":"432","severity":1,"message":"433","line":396,"column":40,"nodeType":"506","messageId":"520","endLine":396,"endColumn":42},{"ruleId":"432","severity":1,"message":"433","line":401,"column":34,"nodeType":"506","messageId":"520","endLine":401,"endColumn":36},{"ruleId":"432","severity":1,"message":"433","line":416,"column":40,"nodeType":"506","messageId":"520","endLine":416,"endColumn":42},{"ruleId":"432","severity":1,"message":"433","line":422,"column":41,"nodeType":"506","messageId":"520","endLine":422,"endColumn":43},{"ruleId":"397","severity":1,"message":"431","line":425,"column":23,"nodeType":"399","messageId":"400","endLine":425,"endColumn":31},{"ruleId":"406","severity":1,"message":"407","line":433,"column":37,"nodeType":"408","messageId":"409","endLine":433,"endColumn":39},{"ruleId":"397","severity":1,"message":"521","line":436,"column":37,"nodeType":"399","messageId":"400","endLine":436,"endColumn":52},{"ruleId":"410","severity":1,"message":"522","line":607,"column":183,"nodeType":"412","messageId":"409","endLine":607,"endColumn":193},{"ruleId":"406","severity":1,"message":"407","line":634,"column":75,"nodeType":"408","messageId":"409","endLine":634,"endColumn":77},{"ruleId":"447","severity":1,"message":"523","line":24,"column":5,"nodeType":"449","endLine":24,"endColumn":7,"suggestions":"524"},{"ruleId":"436","severity":1,"message":"437","line":127,"column":13,"nodeType":"438","endLine":127,"endColumn":36},{"ruleId":"397","severity":1,"message":"525","line":4,"column":5,"nodeType":"399","messageId":"400","endLine":4,"endColumn":15},{"ruleId":"393","replacedBy":"526"},{"ruleId":"395","replacedBy":"527"},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"404","line":8,"column":34,"nodeType":"399","messageId":"400","endLine":8,"endColumn":43},{"ruleId":"397","severity":1,"message":"413","line":8,"column":45,"nodeType":"399","messageId":"400","endLine":8,"endColumn":66},{"ruleId":"397","severity":1,"message":"414","line":8,"column":68,"nodeType":"399","messageId":"400","endLine":8,"endColumn":80},{"ruleId":"397","severity":1,"message":"528","line":11,"column":8,"nodeType":"399","messageId":"400","endLine":11,"endColumn":17},{"ruleId":"397","severity":1,"message":"529","line":12,"column":10,"nodeType":"399","messageId":"400","endLine":12,"endColumn":18},{"ruleId":"397","severity":1,"message":"496","line":15,"column":8,"nodeType":"399","messageId":"400","endLine":15,"endColumn":21},{"ruleId":"397","severity":1,"message":"530","line":16,"column":10,"nodeType":"399","messageId":"400","endLine":16,"endColumn":15},{"ruleId":"397","severity":1,"message":"531","line":26,"column":9,"nodeType":"399","messageId":"400","endLine":26,"endColumn":19},{"ruleId":"397","severity":1,"message":"532","line":28,"column":12,"nodeType":"399","messageId":"400","endLine":28,"endColumn":20},{"ruleId":"397","severity":1,"message":"533","line":28,"column":22,"nodeType":"399","messageId":"400","endLine":28,"endColumn":33},{"ruleId":"397","severity":1,"message":"534","line":32,"column":12,"nodeType":"399","messageId":"400","endLine":32,"endColumn":21},{"ruleId":"397","severity":1,"message":"535","line":32,"column":23,"nodeType":"399","messageId":"400","endLine":32,"endColumn":35},{"ruleId":"397","severity":1,"message":"536","line":32,"column":37,"nodeType":"399","messageId":"400","endLine":32,"endColumn":49},{"ruleId":"397","severity":1,"message":"480","line":39,"column":12,"nodeType":"399","messageId":"400","endLine":39,"endColumn":28},{"ruleId":"397","severity":1,"message":"537","line":44,"column":12,"nodeType":"399","messageId":"400","endLine":44,"endColumn":26},{"ruleId":"397","severity":1,"message":"538","line":45,"column":33,"nodeType":"399","messageId":"400","endLine":45,"endColumn":43},{"ruleId":"397","severity":1,"message":"424","line":47,"column":11,"nodeType":"399","messageId":"400","endLine":47,"endColumn":19},{"ruleId":"426","severity":1,"message":"427","line":135,"column":9,"nodeType":"428","messageId":"429","endLine":171,"endColumn":10},{"ruleId":"397","severity":1,"message":"430","line":245,"column":19,"nodeType":"399","messageId":"400","endLine":245,"endColumn":25},{"ruleId":"406","severity":1,"message":"407","line":281,"column":24,"nodeType":"408","messageId":"409","endLine":281,"endColumn":26},{"ruleId":"406","severity":1,"message":"407","line":281,"column":39,"nodeType":"408","messageId":"409","endLine":281,"endColumn":41},{"ruleId":"397","severity":1,"message":"431","line":388,"column":19,"nodeType":"399","messageId":"400","endLine":388,"endColumn":27},{"ruleId":"432","severity":1,"message":"433","line":413,"column":47,"nodeType":"506","messageId":"520","endLine":413,"endColumn":49},{"ruleId":"432","severity":1,"message":"433","line":444,"column":31,"nodeType":"506","messageId":"520","endLine":444,"endColumn":33},{"ruleId":"397","severity":1,"message":"539","line":445,"column":21,"nodeType":"399","messageId":"400","endLine":445,"endColumn":27},{"ruleId":"406","severity":1,"message":"407","line":530,"column":17,"nodeType":"408","messageId":"409","endLine":530,"endColumn":19},{"ruleId":"426","severity":1,"message":"427","line":531,"column":9,"nodeType":"428","messageId":"429","endLine":604,"endColumn":10},{"ruleId":"439","severity":1,"message":"440","line":567,"column":33,"nodeType":"438","endLine":567,"endColumn":141},{"ruleId":"406","severity":1,"message":"407","line":574,"column":62,"nodeType":"408","messageId":"409","endLine":574,"endColumn":64},{"ruleId":"406","severity":1,"message":"407","line":678,"column":72,"nodeType":"408","messageId":"409","endLine":678,"endColumn":74},{"ruleId":"436","severity":1,"message":"437","line":682,"column":141,"nodeType":"438","endLine":682,"endColumn":269},{"ruleId":"439","severity":1,"message":"440","line":690,"column":61,"nodeType":"438","endLine":690,"endColumn":115},{"ruleId":"406","severity":1,"message":"425","line":819,"column":96,"nodeType":"408","messageId":"409","endLine":819,"endColumn":98},{"ruleId":"406","severity":1,"message":"407","line":877,"column":97,"nodeType":"408","messageId":"409","endLine":877,"endColumn":99},{"ruleId":"406","severity":1,"message":"407","line":883,"column":95,"nodeType":"408","messageId":"409","endLine":883,"endColumn":97},{"ruleId":"406","severity":1,"message":"407","line":889,"column":98,"nodeType":"408","messageId":"409","endLine":889,"endColumn":100},{"ruleId":"406","severity":1,"message":"407","line":895,"column":97,"nodeType":"408","messageId":"409","endLine":895,"endColumn":99},{"ruleId":"406","severity":1,"message":"407","line":901,"column":96,"nodeType":"408","messageId":"409","endLine":901,"endColumn":98},{"ruleId":"406","severity":1,"message":"407","line":13,"column":53,"nodeType":"408","messageId":"409","endLine":13,"endColumn":55},{"ruleId":"540","severity":1,"message":"541","line":30,"column":18,"nodeType":"399","messageId":"542","endLine":30,"endColumn":19},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"406","severity":1,"message":"407","line":128,"column":85,"nodeType":"408","messageId":"409","endLine":128,"endColumn":87},{"ruleId":"406","severity":1,"message":"407","line":134,"column":83,"nodeType":"408","messageId":"409","endLine":134,"endColumn":85},{"ruleId":"406","severity":1,"message":"407","line":140,"column":86,"nodeType":"408","messageId":"409","endLine":140,"endColumn":88},{"ruleId":"406","severity":1,"message":"407","line":146,"column":85,"nodeType":"408","messageId":"409","endLine":146,"endColumn":87},{"ruleId":"406","severity":1,"message":"407","line":152,"column":84,"nodeType":"408","messageId":"409","endLine":152,"endColumn":86},{"ruleId":"397","severity":1,"message":"398","line":8,"column":28,"nodeType":"399","messageId":"400","endLine":8,"endColumn":32},{"ruleId":"397","severity":1,"message":"543","line":17,"column":12,"nodeType":"399","messageId":"400","endLine":17,"endColumn":24},{"ruleId":"397","severity":1,"message":"423","line":19,"column":12,"nodeType":"399","messageId":"400","endLine":19,"endColumn":24},{"ruleId":"447","severity":1,"message":"544","line":23,"column":8,"nodeType":"449","endLine":23,"endColumn":10,"suggestions":"545"},{"ruleId":"439","severity":1,"message":"440","line":85,"column":25,"nodeType":"438","endLine":85,"endColumn":90},{"ruleId":"436","severity":1,"message":"437","line":120,"column":49,"nodeType":"438","endLine":120,"endColumn":184},"no-native-reassign",["546"],"no-negated-in-lhs",["547"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Image' is defined but never used.","'InputText' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'flex'.","ObjectExpression","'NavPageContainerRight' is defined but never used.","'LinkCompound' is defined but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'entityCode' is assigned a value but never used.","'tableEquipo' is assigned a value but never used.","'tableEquipoRef' is assigned a value but never used.","'lastKey' is assigned a value but never used.","'headersRef' is assigned a value but never used.","'rows' is assigned a value but never used.","'currentImage' is assigned a value but never used.","'columnas' is assigned a value but never used.","Expected '!==' and instead saw '!='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'result' is assigned a value but never used.","'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'VictoryContainer' is defined but never used.","'masterState' is assigned a value but never used.","'dashboard' is assigned a value but never used.","'colors' is assigned a value but never used.","'employees' is assigned a value but never used.","'graphData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDashboardData'. Either include it or remove the dependency array.","ArrayExpression",["548"],"'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'logs' is assigned a value but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'usernameRef' is assigned a value but never used.","'passwordRef' is assigned a value but never used.","'confirmPasswordRef' is assigned a value but never used.","'usernameRefR' is assigned a value but never used.","'passwordRefR' is assigned a value but never used.","'confirmPasswordRefR' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getLoginsRecords'. Either include it or remove the dependency array.",["549"],"'data' is assigned a value but never used.","'listCat' is assigned a value but never used.","'keyEdit' is assigned a value but never used.","'itemsSelect' is assigned a value but never used.","'types' is assigned a value but never used.","'selectedType' is assigned a value but never used.","'isRequired' is assigned a value but never used.","'lastLevel' is assigned a value but never used.","'insertedId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllTypes' and 'getItems'. Either include them or remove the dependency array.",["550"],"'id' is assigned a value but never used.","'employee' is assigned a value but never used.","'selectedDataPC' is assigned a value but never used.","'statusComputadora' is assigned a value but never used.","'selectedEmployeeRef' is assigned a value but never used.","'filteredComputer' is assigned a value but never used.","'filteredEmployee' is assigned a value but never used.","'disableEmployee' is assigned a value but never used.","'mantenimientoTipo' is assigned a value but never used.","'detallesAsiRef' is assigned a value but never used.","'incluyeMochilaRef' is assigned a value but never used.","'incluyeMouseRef' is assigned a value but never used.","'incluyeTecladoRef' is assigned a value but never used.","'incluyeCargadorRef' is assigned a value but never used.","'incluyeWebcamRef' is assigned a value but never used.","'defaultValue' is assigned a value but never used.","'selectEq' is assigned a value but never used.","'selectEm' is assigned a value but never used.","'getControls' is assigned a value but never used.","'label2' is assigned a value but never used.","'Dialog' is defined but never used.","'MaterialTable' is defined but never used.","'selectedCity' is assigned a value but never used.","'defaultArea' is assigned a value but never used.","'defaultCity' is assigned a value but never used.","'defaultSucursal' is assigned a value but never used.","'allSucursalesRef' is assigned a value but never used.","'sucursales' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllSucursales' and 'getEmployeesData'. Either include them or remove the dependency array.",["551"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'listSucursales' is assigned a value but never used.","'citiesRef' is assigned a value but never used.","'selectedSucursal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCities' and 'getItems'. Either include them or remove the dependency array.",["552"],"'createContext' is defined but never used.","'MasterPage' is defined but never used.","'history' is assigned a value but never used.","'selectedIndex' is assigned a value but never used.","'dialog' is assigned a value but never used.","'setDialog' is assigned a value but never used.","'allCampos' is assigned a value but never used.","expectedInside","'responseOptions' is assigned a value but never used.","Duplicate key 'alignItems'.","React Hook useEffect has a missing dependency: 'getColorPreference'. Either include it or remove the dependency array.",["553"],"'colorValue' is defined but never used.",["546"],["547"],"'RightMenu' is defined but never used.","'useInput' is defined but never used.","'Table' is defined but never used.","'initialArr' is assigned a value but never used.","'controls' is assigned a value but never used.","'setControls' is assigned a value but never used.","'respuesta' is assigned a value but never used.","'setRespuesta' is assigned a value but never used.","'respuestaRef' is assigned a value but never used.","'computerObject' is assigned a value but never used.","'optionsRef' is assigned a value but never used.","'indice' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'maintenances' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getMaintenanceRecords'. Either include it or remove the dependency array.",["554"],"no-global-assign","no-unsafe-negation",{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},"Update the dependencies array to be: [getDashboardData]",{"range":"569","text":"570"},"Update the dependencies array to be: [getLoginsRecords]",{"range":"571","text":"572"},"Update the dependencies array to be: [getAllTypes, getItems]",{"range":"573","text":"574"},"Update the dependencies array to be: [getAllSucursales, getEmployeesData]",{"range":"575","text":"576"},"Update the dependencies array to be: [getCities, getItems]",{"range":"577","text":"578"},"Update the dependencies array to be: [getColorPreference]",{"range":"579","text":"580"},"Update the dependencies array to be: [getMaintenanceRecords]",{"range":"581","text":"582"},[1154,1156],"[getDashboardData]",[1139,1141],"[getLoginsRecords]",[5955,5957],"[getAllTypes, getItems]",[1920,1922],"[getAllSucursales, getEmployeesData]",[1276,1278],"[getCities, getItems]",[677,679],"[getColorPreference]",[837,839],"[getMaintenanceRecords]"]